
u8m2.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c3       	rjmp	.+1846   	; 0x738 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c3       	rjmp	.+1898   	; 0x770 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c3       	rjmp	.+1894   	; 0x770 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c3       	rjmp	.+1890   	; 0x770 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c3       	rjmp	.+1886   	; 0x770 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c3       	rjmp	.+1882   	; 0x770 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c3       	rjmp	.+1878   	; 0x770 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c3       	rjmp	.+1874   	; 0x770 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c3       	rjmp	.+1870   	; 0x770 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c3       	rjmp	.+1866   	; 0x770 <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c3       	rjmp	.+1862   	; 0x770 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a1 c3       	rjmp	.+1858   	; 0x770 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c3       	rjmp	.+1854   	; 0x770 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c3       	rjmp	.+1850   	; 0x770 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c3       	rjmp	.+1846   	; 0x770 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c3       	rjmp	.+1842   	; 0x770 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c3       	rjmp	.+1838   	; 0x770 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c3       	rjmp	.+1834   	; 0x770 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c3       	rjmp	.+1830   	; 0x770 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c3       	rjmp	.+1826   	; 0x770 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c3       	rjmp	.+1822   	; 0x770 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c3       	rjmp	.+1818   	; 0x770 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c3       	rjmp	.+1814   	; 0x770 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c3       	rjmp	.+1810   	; 0x770 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c3       	rjmp	.+1806   	; 0x770 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c3       	rjmp	.+1802   	; 0x770 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	25 00       	.word	0x0025	; ????
      6c:	28 00       	.word	0x0028	; ????
      6e:	2b 00       	.word	0x002b	; ????

00000070 <u8g_avr_ddr_P>:
      70:	00 00 24 00 27 00 2a 00                             ..$.'.*.

00000078 <u8g_dev_ssd1327_2bit_96x96_prepare_page_seq>:
      78:	ff e0 ff d1 15 08 37 75 ff fe                       ......7u..

00000082 <u8g_dev_ssd1327_2bit_96x96_init_seq>:
      82:	ff 0a ff d0 ff e0 ff c1 ff d1 fd 12 ae a8 5f a1     .............._.
      92:	00 a2 60 a0 46 ab 01 81 53 b1 51 b3 01 b9 bc 08     ..`.F...S.Q.....
      a2:	be 07 b6 01 d5 62 a5 af ff 64 a4 ff 64 a5 af ff     .....b...d..d...
      b2:	64 a4 15 08 37 75 08 5f ff e1 0f 0f 00 00 0f 0f     d...7u._........
      c2:	00 00 0f 0f 00 00 0f 0f 00 00 0f 0f 00 00 0f 0f     ................
      d2:	00 00 0f 0f 00 00 0f 0f 00 00 ff d0 ff fe           ..............

000000e0 <u8g_font_5x7>:
      e0:	01 05 07 00 ff 06 01 15 02 27 20 ff ff 06 ff 06     .........' .....
      f0:	ff 08 00 50 22 16 56 80 80 80 80 00 80 15 33 53     ...P".V.......3S
     100:	a0 a0 a0 02 55 55 50 f8 50 f8 50 02 55 55 70 a0     ....UUP.P.P.UUp.
     110:	70 28 70 02 46 56 80 90 20 40 90 10 02 45 55 40     p(p.FV.. @...EU@
     120:	a0 40 a0 50 25 13 53 80 80 80 12 26 56 40 80 80     .@.P%.S....&V@..
     130:	80 80 40 12 26 56 80 40 40 40 40 80 12 35 55 a0     ..@.&V.@@@@..5U.
     140:	40 e0 40 a0 02 55 55 20 20 f8 20 20 11 33 53 60     @.@..UU  .  .3S`
     150:	40 80 04 41 51 f0 12 22 52 c0 c0 03 44 54 10 20     @..AQ.."R...DT. 
     160:	40 80 12 36 56 40 a0 a0 a0 a0 40 12 36 56 40 c0     @..6V@....@.6V@.
     170:	40 40 40 e0 02 46 56 60 90 10 20 40 f0 02 46 56     @@@..FV`.. @..FV
     180:	f0 10 60 10 90 60 02 46 56 20 60 a0 f0 20 20 02     ..`..`.FV `..  .
     190:	46 56 f0 80 e0 10 90 60 02 46 56 60 80 e0 90 90     FV.....`.FV`....
     1a0:	60 02 46 56 f0 10 20 20 40 40 02 46 56 60 90 60     `.FV..  @@.FV`.`
     1b0:	90 90 60 02 46 56 60 90 90 70 10 60 12 25 55 c0     ..`.FV`..p.`.%U.
     1c0:	c0 00 c0 c0 01 36 56 60 60 00 60 40 80 12 35 55     .....6V``.`@..5U
     1d0:	20 40 80 40 20 03 43 53 f0 00 f0 12 35 55 80 40      @.@ .CS....5U.@
     1e0:	20 40 80 12 36 56 40 a0 20 40 00 40 02 46 56 60      @..6V@. @.@.FV`
     1f0:	90 b0 b0 80 60 02 46 56 60 90 90 f0 90 90 02 46     ....`.FV`......F
     200:	56 e0 90 e0 90 90 e0 02 46 56 60 90 80 80 90 60     V.......FV`....`
     210:	02 46 56 e0 90 90 90 90 e0 02 46 56 f0 80 e0 80     .FV.......FV....
     220:	80 f0 02 46 56 f0 80 e0 80 80 80 02 46 56 60 90     ...FV.......FV`.
     230:	80 b0 90 70 02 46 56 90 90 f0 90 90 90 12 36 56     ...p.FV.......6V
     240:	e0 40 40 40 40 e0 02 46 56 10 10 10 10 90 60 02     .@@@@..FV.....`.
     250:	46 56 90 a0 c0 c0 a0 90 02 46 56 80 80 80 80 80     FV.......FV.....
     260:	f0 02 46 56 90 f0 f0 90 90 90 02 46 56 90 d0 d0     ..FV.......FV...
     270:	b0 b0 90 02 46 56 60 90 90 90 90 60 02 46 56 e0     ....FV`....`.FV.
     280:	90 90 e0 80 80 01 47 57 60 90 90 90 d0 60 10 02     ......GW`....`..
     290:	46 56 e0 90 90 e0 a0 90 02 46 56 60 90 40 20 90     FV.......FV`.@ .
     2a0:	60 12 36 56 e0 40 40 40 40 40 02 46 56 90 90 90     `.6V.@@@@@.FV...
     2b0:	90 90 60 02 46 56 90 90 90 90 60 60 02 46 56 90     ..`.FV....``.FV.
     2c0:	90 90 f0 f0 90 02 46 56 90 90 60 60 90 90 12 36     ......FV..``...6
     2d0:	56 a0 a0 a0 40 40 40 02 46 56 f0 10 20 40 80 f0     V...@@@.FV.. @..
     2e0:	12 36 56 e0 80 80 80 80 e0 03 44 54 80 40 20 10     .6V.......DT.@ .
     2f0:	12 36 56 e0 20 20 20 20 e0 16 32 52 40 a0 02 41     .6V.    ..2R@..A
     300:	51 f0 16 22 52 80 40 02 44 54 70 90 b0 50 02 46     Q.."R.@.DTp..P.F
     310:	56 80 80 e0 90 90 e0 02 34 54 60 80 80 60 02 46     V.......4T`..`.F
     320:	56 10 10 70 90 90 70 02 44 54 60 b0 c0 60 02 46     V..p..p.DT`..`.F
     330:	56 20 50 40 e0 40 40 01 45 55 70 90 60 80 70 02     V P@.@@.EUp.`.p.
     340:	46 56 80 80 e0 90 90 90 12 36 56 40 00 c0 40 40     FV.......6V@..@@
     350:	e0 11 37 57 20 00 20 20 20 a0 40 02 46 56 80 80     ..7W .   .@.FV..
     360:	a0 c0 a0 90 12 36 56 c0 40 40 40 40 e0 02 44 54     .....6V.@@@@..DT
     370:	a0 f0 90 90 02 44 54 e0 90 90 90 02 44 54 60 90     .....DT.....DT`.
     380:	90 60 01 45 55 e0 90 90 e0 80 01 45 55 70 90 90     .`.EU......EUp..
     390:	70 10 02 44 54 e0 90 80 80 02 44 54 70 c0 30 e0     p..DT.....DTp.0.
     3a0:	02 46 56 40 40 e0 40 40 30 02 44 54 90 90 90 70     .FV@@.@@0.DT...p
     3b0:	12 34 54 a0 a0 a0 40 02 44 54 90 90 f0 f0 02 44     .4T...@.DT.....D
     3c0:	54 90 60 60 90 01 45 55 90 90 50 20 40 02 44 54     T.``..EU..P @.DT
     3d0:	f0 20 40 f0 12 36 56 20 40 c0 40 40 20 22 16 56     . @..6V @.@@ ".V
     3e0:	80 80 80 80 80 80 12 36 56 80 40 60 40 40 80 06     .......6V.@`@@..
     3f0:	42 52 50 a0 ff ff ff ff ff ff ff ff ff ff ff ff     BRP.............
     400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     410:	ff ff ff ff ff 08 00 50 22 16 56 80 00 80 80 80     .......P".V.....
     420:	80 01 46 56 20 70 a0 a0 70 20 02 45 55 30 40 e0     ..FV p..p .EU0@.
     430:	40 b0 02 55 55 88 70 50 70 88 12 36 56 a0 a0 40     @..UU.pPp..6V..@
     440:	e0 40 40 22 15 55 80 80 00 80 80 11 37 57 60 80     .@@".U......7W`.
     450:	c0 a0 60 20 c0 17 31 51 a0 01 57 57 70 88 a8 c8     ..` ..1Q..WWp...
     460:	a8 88 70 05 33 53 60 a0 60 03 53 53 48 90 48 03     ..p.3S`.`.SSH.H.
     470:	42 52 f0 10 14 31 51 e0 01 57 57 70 88 e8 c8 c8     BR...1Q..WWp....
     480:	88 70 07 41 51 f0 15 33 53 40 a0 40 02 56 56 20     .p.AQ..3S@.@.VV 
     490:	20 f8 20 20 f8 14 24 54 c0 40 80 c0 14 24 54 c0      .  ..$T.@...$T.
     4a0:	c0 40 c0 16 22 52 40 80 01 45 55 90 90 90 e0 80     .@.."R@..EU.....
     4b0:	02 46 56 70 d0 d0 50 50 50 14 22 52 c0 c0 11 22     .FVp..PPP."R..."
     4c0:	52 40 80 14 34 54 40 c0 40 e0 05 33 53 40 a0 40     R@..4T@.@..3S@.@
     4d0:	03 53 53 90 48 90 01 47 57 80 80 80 90 30 70 10     .SS.H..GW....0p.
     4e0:	01 47 57 80 80 80 b0 10 20 30 01 47 57 c0 c0 40     .GW..... 0.GW..@
     4f0:	d0 30 70 10 12 36 56 40 00 40 80 a0 40 02 46 56     .0p..6V@.@..@.FV
     500:	60 90 90 f0 90 90 02 46 56 60 90 90 f0 90 90 02     `......FV`......
     510:	46 56 60 90 90 f0 90 90 02 46 56 60 90 90 f0 90     FV`......FV`....
     520:	90 02 46 56 90 60 90 f0 90 90 02 46 56 60 60 90     ..FV.`.....FV``.
     530:	f0 90 90 02 46 56 70 a0 b0 e0 a0 b0 01 47 57 60     ....FVp......GW`
     540:	90 80 80 90 60 40 02 46 56 f0 80 e0 80 80 f0 02     ....`@.FV.......
     550:	46 56 f0 80 e0 80 80 f0 02 46 56 f0 80 e0 80 80     FV.......FV.....
     560:	f0 02 46 56 f0 80 e0 80 80 f0 12 36 56 e0 40 40     ..FV.......6V.@@
     570:	40 40 e0 12 36 56 e0 40 40 40 40 e0 12 36 56 e0     @@..6V.@@@@..6V.
     580:	40 40 40 40 e0 12 36 56 e0 40 40 40 40 e0 02 46     @@@@..6V.@@@@..F
     590:	56 e0 50 d0 50 50 e0 02 46 56 b0 90 d0 b0 b0 90     V.P.PP..FV......
     5a0:	02 46 56 60 90 90 90 90 60 02 46 56 60 90 90 90     .FV`....`.FV`...
     5b0:	90 60 02 46 56 60 90 90 90 90 60 02 46 56 60 90     .`.FV`....`.FV`.
     5c0:	90 90 90 60 02 46 56 90 60 90 90 90 60 02 44 54     ...`.FV.`...`.DT
     5d0:	90 60 60 90 02 46 56 70 b0 b0 d0 d0 e0 02 46 56     .``..FVp......FV
     5e0:	90 90 90 90 90 60 02 46 56 90 90 90 90 90 60 02     .....`.FV.....`.
     5f0:	46 56 90 90 90 90 90 60 02 46 56 90 00 90 90 90     FV.....`.FV.....
     600:	60 12 36 56 a0 a0 a0 40 40 40 02 46 56 80 e0 90     `.6V...@@@.FV...
     610:	e0 80 80 02 46 56 60 90 a0 90 90 a0 02 46 56 40     ....FV`......FV@
     620:	20 70 90 b0 50 02 46 56 20 40 70 90 b0 50 02 46      p..P.FV @p..P.F
     630:	56 20 50 70 90 b0 50 02 46 56 50 a0 70 90 b0 50     V Pp..P.FVP.p..P
     640:	02 46 56 50 00 70 90 b0 50 02 46 56 60 60 70 90     .FVP.p..P.FV``p.
     650:	b0 50 02 44 54 70 b0 a0 70 11 35 55 60 80 80 60     .P.DTp..p.5U`..`
     660:	40 02 46 56 40 20 60 b0 c0 60 02 46 56 20 40 60     @.FV@ `..`.FV @`
     670:	b0 c0 60 02 46 56 40 a0 60 b0 c0 60 02 46 56 a0     ..`.FV@.`..`.FV.
     680:	00 60 b0 c0 60 12 36 56 80 40 c0 40 40 e0 12 36     .`..`.6V.@.@@..6
     690:	56 40 80 c0 40 40 e0 12 36 56 40 a0 c0 40 40 e0     V@..@@..6V@..@@.
     6a0:	12 36 56 a0 00 c0 40 40 e0 02 46 56 40 30 60 90     .6V...@@..FV@0`.
     6b0:	90 60 02 46 56 50 a0 e0 90 90 90 02 46 56 40 20     .`.FVP......FV@ 
     6c0:	60 90 90 60 02 46 56 20 40 60 90 90 60 02 46 56     `..`.FV @`..`.FV
     6d0:	60 00 60 90 90 60 02 46 56 50 a0 60 90 90 60 02     `.`..`.FVP.`..`.
     6e0:	46 56 50 00 60 90 90 60 02 45 55 60 00 f0 00 60     FVP.`..`.EU`...`
     6f0:	02 44 54 70 b0 d0 e0 02 46 56 40 20 90 90 90 70     .DTp....FV@ ...p
     700:	02 46 56 20 40 90 90 90 70 02 46 56 60 00 90 90     .FV @...p.FV`...
     710:	90 70 02 46 56 50 00 90 90 90 70 01 47 57 20 40     .p.FVP....p.GW @
     720:	90 90 50 20 40 01 46 56 80 e0 90 90 e0 80 01 47     ..P @.FV.......G
     730:	57 50 00 90 90 50 20 40                             WP...P @

00000738 <__ctors_end>:
     738:	11 24       	eor	r1, r1
     73a:	1f be       	out	0x3f, r1	; 63
     73c:	cf ef       	ldi	r28, 0xFF	; 255
     73e:	d4 e0       	ldi	r29, 0x04	; 4
     740:	de bf       	out	0x3e, r29	; 62
     742:	cd bf       	out	0x3d, r28	; 61

00000744 <__do_copy_data>:
     744:	11 e0       	ldi	r17, 0x01	; 1
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b1 e0       	ldi	r27, 0x01	; 1
     74a:	ea e5       	ldi	r30, 0x5A	; 90
     74c:	fa e1       	ldi	r31, 0x1A	; 26
     74e:	02 c0       	rjmp	.+4      	; 0x754 <__do_copy_data+0x10>
     750:	05 90       	lpm	r0, Z+
     752:	0d 92       	st	X+, r0
     754:	a4 34       	cpi	r26, 0x44	; 68
     756:	b1 07       	cpc	r27, r17
     758:	d9 f7       	brne	.-10     	; 0x750 <__do_copy_data+0xc>

0000075a <__do_clear_bss>:
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	a4 e4       	ldi	r26, 0x44	; 68
     75e:	b1 e0       	ldi	r27, 0x01	; 1
     760:	01 c0       	rjmp	.+2      	; 0x764 <.do_clear_bss_start>

00000762 <.do_clear_bss_loop>:
     762:	1d 92       	st	X+, r1

00000764 <.do_clear_bss_start>:
     764:	a8 3e       	cpi	r26, 0xE8	; 232
     766:	b2 07       	cpc	r27, r18
     768:	e1 f7       	brne	.-8      	; 0x762 <.do_clear_bss_loop>
     76a:	e3 d0       	rcall	.+454    	; 0x932 <main>
     76c:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <_exit>

00000770 <__bad_interrupt>:
     770:	47 cc       	rjmp	.-1906   	; 0x0 <__vectors>

00000772 <u8g_setup>:
    SCL: Port C, Bit 5
    SDA: Port C, Bit 4
  */
  
  /* activate pull-up, set ports to output, init U8glib */  
  u8g_SetPinInput(PN(2,5)); u8g_SetPinLevel(PN(2,5), 1); u8g_SetPinOutput(PN(2,5));
     772:	65 e0       	ldi	r22, 0x05	; 5
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	0c d1       	rcall	.+536    	; 0x990 <u8g_Pin>
     778:	27 d1       	rcall	.+590    	; 0x9c8 <u8g_SetPinInput>
     77a:	65 e0       	ldi	r22, 0x05	; 5
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	08 d1       	rcall	.+528    	; 0x990 <u8g_Pin>
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	39 d1       	rcall	.+626    	; 0x9f6 <u8g_SetPinLevel>
     784:	65 e0       	ldi	r22, 0x05	; 5
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	03 d1       	rcall	.+518    	; 0x990 <u8g_Pin>
     78a:	08 d1       	rcall	.+528    	; 0x99c <u8g_SetPinOutput>
     78c:	64 e0       	ldi	r22, 0x04	; 4
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	ff d0       	rcall	.+510    	; 0x990 <u8g_Pin>
     792:	1a d1       	rcall	.+564    	; 0x9c8 <u8g_SetPinInput>
     794:	64 e0       	ldi	r22, 0x04	; 4
     796:	82 e0       	ldi	r24, 0x02	; 2
  u8g_SetPinInput(PN(2,4)); u8g_SetPinLevel(PN(2,4), 1); u8g_SetPinOutput(PN(2,4));
     798:	fb d0       	rcall	.+502    	; 0x990 <u8g_Pin>
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	2c d1       	rcall	.+600    	; 0x9f6 <u8g_SetPinLevel>
     79e:	64 e0       	ldi	r22, 0x04	; 4
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	f6 d0       	rcall	.+492    	; 0x990 <u8g_Pin>
     7a4:	fb d0       	rcall	.+502    	; 0x99c <u8g_SetPinOutput>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	68 e0       	ldi	r22, 0x08	; 8
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	81 eb       	ldi	r24, 0xB1	; 177
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	e6 d4       	rcall	.+2508   	; 0x117e <u8g_InitI2C>
     7b2:	81 eb       	ldi	r24, 0xB1	; 177
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	18 d7       	rcall	.+3632   	; 0x15e8 <u8g_SetRot180>
     7b8:	80 91 bc 01 	lds	r24, 0x01BC
     7bc:	88 32       	cpi	r24, 0x28	; 40
  u8g_InitI2C(&u8g, &u8g_dev_ssd1327_96x96_gr_i2c, U8G_I2C_OPT_NONE);
     7be:	11 f4       	brne	.+4      	; 0x7c4 <u8g_setup+0x52>
     7c0:	6f ef       	ldi	r22, 0xFF	; 255
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <u8g_setup+0x60>
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	11 f4       	brne	.+4      	; 0x7cc <u8g_setup+0x5a>
     7c8:	63 e0       	ldi	r22, 0x03	; 3
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <u8g_setup+0x60>
      A0 and Reset are not used.
  */
  // u8g_InitSPI(&u8g, &u8g_dev_st7920_192x32_sw_spi, PN(2, 3), PN(2, 5), PN(2, 4), U8G_PIN_NONE, U8G_PIN_NONE);
  
  /* flip screen, if required */
  u8g_SetRot180(&u8g);
     7cc:	81 30       	cpi	r24, 0x01	; 1
     7ce:	21 f4       	brne	.+8      	; 0x7d8 <u8g_setup+0x66>
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	81 eb       	ldi	r24, 0xB1	; 177

  /* assign default color value */
  if ( u8g_GetMode(&u8g) == U8G_MODE_R3G3B2 ) 
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0a c5       	rjmp	.+2580   	; 0x11ec <u8g_SetColorIndex>
     7d8:	08 95       	ret

000007da <sys_init>:

void sys_init(void)
{
#if defined(__AVR__)
  /* select minimal prescaler (max system speed) */
  CLKPR = 0x80;
     7da:	e1 e6       	ldi	r30, 0x61	; 97
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 e8       	ldi	r24, 0x80	; 128
     7e0:	80 83       	st	Z, r24
  CLKPR = 0x00;
     7e2:	10 82       	st	Z, r1
     7e4:	08 95       	ret

000007e6 <sys_setup_keys>:

void sys_setup_keys(void)
{
#if defined(__AVR__)
  /* configure buttons (inputs with pullup) */
  DDRD &= ~(1<<5);
     7e6:	55 98       	cbi	0x0a, 5	; 10
  PORTD |= (1<<5);
     7e8:	5d 9a       	sbi	0x0b, 5	; 11
  DDRD &= ~(1<<6);
     7ea:	56 98       	cbi	0x0a, 6	; 10
  PORTD |= (1<<6);
     7ec:	5e 9a       	sbi	0x0b, 6	; 11
  DDRD &= ~(1<<7);
     7ee:	57 98       	cbi	0x0a, 7	; 10
  PORTD |= (1<<7);
     7f0:	5f 9a       	sbi	0x0b, 7	; 11
  DDRB &= ~(1<<7);
     7f2:	27 98       	cbi	0x04, 7	; 4
  PORTB |= (1<<7);
     7f4:	2f 9a       	sbi	0x05, 7	; 5
     7f6:	08 95       	ret

000007f8 <sys_get_key>:

uint8_t sys_get_key(void)
{
  uint8_t result = KEY_NONE;
#if defined(__AVR__)
  if ( (PIND & (1<<5)) == 0 ) 
     7f8:	89 b1       	in	r24, 0x09	; 9
    result = KEY_PREV;
  if ( (PIND & (1<<6)) == 0 ) 
     7fa:	4e 9b       	sbis	0x09, 6	; 9
     7fc:	06 c0       	rjmp	.+12     	; 0x80a <sys_get_key+0x12>

uint8_t sys_get_key(void)
{
  uint8_t result = KEY_NONE;
#if defined(__AVR__)
  if ( (PIND & (1<<5)) == 0 ) 
     7fe:	85 fb       	bst	r24, 5
     800:	88 27       	eor	r24, r24
     802:	80 f9       	bld	r24, 0
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	89 27       	eor	r24, r25
     808:	01 c0       	rjmp	.+2      	; 0x80c <sys_get_key+0x14>
    result = KEY_PREV;
  if ( (PIND & (1<<6)) == 0 ) 
    result = KEY_NEXT;
     80a:	82 e0       	ldi	r24, 0x02	; 2
  if ( (PIND & (1<<7)) == 0 ) 
     80c:	4f 9b       	sbis	0x09, 7	; 9
    result |= KEY_SELECT;
     80e:	83 e0       	ldi	r24, 0x03	; 3
  if ( (PINB & (1<<7)) == 0 ) 
     810:	1f 9b       	sbis	0x03, 7	; 3
    result |= KEY_BACK;
     812:	84 60       	ori	r24, 0x04	; 4
#endif
  return result;
}
     814:	08 95       	ret

00000816 <sys_debounce_key>:
uint8_t sys_key_code = KEY_NONE;


void sys_debounce_key(void) 
{
  sys_key_second = sys_key_first;
     816:	80 91 49 01 	lds	r24, 0x0149
     81a:	80 93 48 01 	sts	0x0148, r24
  sys_key_first = sys_get_key();
     81e:	ec df       	rcall	.-40     	; 0x7f8 <sys_get_key>
     820:	80 93 49 01 	sts	0x0149, r24
     824:	90 91 48 01 	lds	r25, 0x0148
    
  if ( sys_key_second == sys_key_first )
     828:	98 13       	cpse	r25, r24
     82a:	03 c0       	rjmp	.+6      	; 0x832 <sys_debounce_key+0x1c>
     82c:	90 93 47 01 	sts	0x0147, r25
    sys_key_code = sys_key_first;
     830:	08 95       	ret
     832:	10 92 47 01 	sts	0x0147, r1
  else
    sys_key_code = KEY_NONE;
     836:	08 95       	ret

00000838 <draw_menu>:
uint8_t menu_current = 0;
uint8_t menu_redraw_required = 0;
uint8_t last_key_code = KEY_NONE;

void draw_menu(void) 
{
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e2 e2       	ldi	r30, 0x22	; 34
     83e:	f4 e0       	ldi	r31, 0x04	; 4
     840:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__prologue_saves__+0xa>
  uint8_t i, h;
  u8g_uint_t w, d;

  u8g_SetFont(&u8g, u8g_font_5x7);
     844:	60 ee       	ldi	r22, 0xE0	; 224
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	81 eb       	ldi	r24, 0xB1	; 177
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	8d d3       	rcall	.+1818   	; 0xf68 <u8g_SetFont>
     84e:	81 eb       	ldi	r24, 0xB1	; 177
  u8g_SetFontRefHeightText(&u8g);
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	61 d3       	rcall	.+1730   	; 0xf16 <u8g_SetFontRefHeightText>
     854:	81 eb       	ldi	r24, 0xB1	; 177
     856:	91 e0       	ldi	r25, 0x01	; 1
  u8g_SetFontPosTop(&u8g);
     858:	67 d3       	rcall	.+1742   	; 0xf28 <u8g_SetFontPosTop>
     85a:	10 91 c9 01 	lds	r17, 0x01C9
     85e:	80 91 ca 01 	lds	r24, 0x01CA
  
  h = u8g_GetFontAscent(&u8g)-u8g_GetFontDescent(&u8g);
     862:	18 1b       	sub	r17, r24
     864:	70 90 b1 01 	lds	r7, 0x01B1
     868:	90 e0       	ldi	r25, 0x00	; 0
  w = u8g_GetWidth(&u8g);
     86a:	e9 2e       	mov	r14, r25
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	f9 2e       	mov	r15, r25
     870:	d0 e0       	ldi	r29, 0x00	; 0
     872:	c0 e0       	ldi	r28, 0x00	; 0
     874:	a7 2c       	mov	r10, r7
     876:	b1 2c       	mov	r11, r1
  for( i = 0; i < MENU_ITEMS; i++ ) 
     878:	67 01       	movw	r12, r14
  {
    d = (w-u8g_GetStrWidth(&u8g, menu_strings[i]))/2;
     87a:	f7 01       	movw	r30, r14
     87c:	60 81       	ld	r22, Z
     87e:	71 81       	ldd	r23, Z+1	; 0x01
     880:	81 eb       	ldi	r24, 0xB1	; 177
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	57 d3       	rcall	.+1710   	; 0xf34 <u8g_GetStrWidth>
     886:	b5 01       	movw	r22, r10
     888:	68 1b       	sub	r22, r24
     88a:	71 09       	sbc	r23, r1
     88c:	77 ff       	sbrs	r23, 7
     88e:	02 c0       	rjmp	.+4      	; 0x894 <draw_menu+0x5c>
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	4b 01       	movw	r8, r22
     896:	95 94       	asr	r9
     898:	87 94       	ror	r8
     89a:	81 eb       	ldi	r24, 0xB1	; 177
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	b5 d4       	rcall	.+2410   	; 0x120a <u8g_SetDefaultForegroundColor>
     8a0:	80 91 46 01 	lds	r24, 0x0146
    u8g_SetDefaultForegroundColor(&u8g);
     8a4:	c8 13       	cpse	r28, r24
     8a6:	0b c0       	rjmp	.+22     	; 0x8be <draw_menu+0x86>
     8a8:	01 2f       	mov	r16, r17
    if ( i == menu_current ) 
     8aa:	27 2d       	mov	r18, r7
     8ac:	41 e0       	ldi	r20, 0x01	; 1
     8ae:	4d 0f       	add	r20, r29
     8b0:	60 e0       	ldi	r22, 0x00	; 0
    {
      u8g_DrawBox(&u8g, 0, i*h+1, w, h);
     8b2:	81 eb       	ldi	r24, 0xB1	; 177
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	ee d5       	rcall	.+3036   	; 0x1494 <u8g_DrawBox>
     8b8:	81 eb       	ldi	r24, 0xB1	; 177
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	b7 d4       	rcall	.+2414   	; 0x122c <u8g_SetDefaultBackgroundColor>
     8be:	f2 e0       	ldi	r31, 0x02	; 2
     8c0:	ef 0e       	add	r14, r31
     8c2:	f1 1c       	adc	r15, r1
      u8g_SetDefaultBackgroundColor(&u8g);
     8c4:	f6 01       	movw	r30, r12
     8c6:	20 81       	ld	r18, Z
     8c8:	31 81       	ldd	r19, Z+1	; 0x01
     8ca:	4d 2f       	mov	r20, r29
     8cc:	68 2d       	mov	r22, r8
     8ce:	81 eb       	ldi	r24, 0xB1	; 177
     8d0:	91 e0       	ldi	r25, 0x01	; 1
    }
    u8g_DrawStr(&u8g, d, i*h, menu_strings[i]);
     8d2:	a2 d2       	rcall	.+1348   	; 0xe18 <u8g_DrawStr>
     8d4:	cf 5f       	subi	r28, 0xFF	; 255
     8d6:	d1 0f       	add	r29, r17
     8d8:	c4 30       	cpi	r28, 0x04	; 4
     8da:	71 f6       	brne	.-100    	; 0x878 <draw_menu+0x40>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	ed e0       	ldi	r30, 0x0D	; 13
     8e2:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__epilogue_restores__+0xa>

000008e6 <update_menu>:
  }
}

void update_menu(void) 
{
  if ( sys_key_code != KEY_NONE && last_key_code == sys_key_code ) 
     8e6:	80 91 47 01 	lds	r24, 0x0147
     8ea:	88 23       	and	r24, r24
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <update_menu+0x10>
     8ee:	90 91 44 01 	lds	r25, 0x0144
     8f2:	98 17       	cp	r25, r24
     8f4:	e9 f0       	breq	.+58     	; 0x930 <update_menu+0x4a>
  {
    return;
  }
  last_key_code = sys_key_code;
     8f6:	80 93 44 01 	sts	0x0144, r24
  
  switch ( sys_key_code ) 
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	51 f0       	breq	.+20     	; 0x912 <update_menu+0x2c>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	b9 f4       	brne	.+46     	; 0x930 <update_menu+0x4a>
  {
    case KEY_NEXT:
      menu_current++;
     902:	80 91 46 01 	lds	r24, 0x0146
     906:	8f 5f       	subi	r24, 0xFF	; 255
      if ( menu_current >= MENU_ITEMS )
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	68 f0       	brcs	.+26     	; 0x926 <update_menu+0x40>
        menu_current = 0;
     90c:	10 92 46 01 	sts	0x0146, r1
     910:	0c c0       	rjmp	.+24     	; 0x92a <update_menu+0x44>
      menu_redraw_required = 1;
      break;
    case KEY_PREV:
      if ( menu_current == 0 )
     912:	80 91 46 01 	lds	r24, 0x0146
     916:	81 11       	cpse	r24, r1
     918:	03 c0       	rjmp	.+6      	; 0x920 <update_menu+0x3a>
        menu_current = MENU_ITEMS;
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	80 93 46 01 	sts	0x0146, r24
      menu_current--;
     920:	80 91 46 01 	lds	r24, 0x0146
     924:	81 50       	subi	r24, 0x01	; 1
     926:	80 93 46 01 	sts	0x0146, r24
      menu_redraw_required = 1;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 45 01 	sts	0x0145, r24
     930:	08 95       	ret

00000932 <main>:
  }
}

int main(void)
{
  sys_init();
     932:	53 df       	rcall	.-346    	; 0x7da <sys_init>
     934:	58 df       	rcall	.-336    	; 0x7e6 <sys_setup_keys>
  sys_setup_keys();
     936:	1d df       	rcall	.-454    	; 0x772 <u8g_setup>
     938:	81 e0       	ldi	r24, 0x01	; 1
  u8g_setup();
     93a:	80 93 45 01 	sts	0x0145, r24

  menu_redraw_required = 1;
     93e:	6b df       	rcall	.-298    	; 0x816 <sys_debounce_key>
     940:	80 91 45 01 	lds	r24, 0x0145
  for(;;)
  {  
    
    sys_debounce_key();
     944:	88 23       	and	r24, r24
     946:	59 f0       	breq	.+22     	; 0x95e <main+0x2c>
    
    if (  menu_redraw_required != 0 ) 
     948:	81 eb       	ldi	r24, 0xB1	; 177
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	2b d4       	rcall	.+2134   	; 0x11a4 <u8g_FirstPage>
     94e:	74 df       	rcall	.-280    	; 0x838 <draw_menu>
    {
      u8g_FirstPage(&u8g);
     950:	81 eb       	ldi	r24, 0xB1	; 177
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	2b d4       	rcall	.+2134   	; 0x11ac <u8g_NextPage>
     956:	81 11       	cpse	r24, r1
      do
      {
        draw_menu();
     958:	fa cf       	rjmp	.-12     	; 0x94e <main+0x1c>
     95a:	10 92 45 01 	sts	0x0145, r1
      } while ( u8g_NextPage(&u8g) );
     95e:	c3 df       	rcall	.-122    	; 0x8e6 <update_menu>
     960:	ee cf       	rjmp	.-36     	; 0x93e <main+0xc>

00000962 <u8g_get_avr_io_ptr>:
#endif
#endif
};

static volatile uint8_t *u8g_get_avr_io_ptr(const IO_PTR *base, uint8_t offset)
{
     962:	a2 e0       	ldi	r26, 0x02	; 2
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e7 eb       	ldi	r30, 0xB7	; 183
     968:	f4 e0       	ldi	r31, 0x04	; 4
     96a:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__prologue_saves__+0x20>
  volatile uint8_t * tmp;
  base += offset;
     96e:	86 0f       	add	r24, r22
     970:	91 1d       	adc	r25, r1
     972:	86 0f       	add	r24, r22
     974:	91 1d       	adc	r25, r1
  memcpy_P(&tmp, base, sizeof(volatile uint8_t * PROGMEM));
     976:	42 e0       	ldi	r20, 0x02	; 2
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	bc 01       	movw	r22, r24
     97c:	ce 01       	movw	r24, r28
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <memcpy_P>
  return tmp; 
}
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	22 96       	adiw	r28, 0x02	; 2
     98a:	e2 e0       	ldi	r30, 0x02	; 2
     98c:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__epilogue_restores__+0x20>

00000990 <u8g_Pin>:
uint8_t u8g_Pin(uint8_t port, uint8_t bitpos)
{
  port <<= 3;
  port += bitpos;
  return port;
}
     990:	98 e0       	ldi	r25, 0x08	; 8
     992:	89 9f       	mul	r24, r25
     994:	60 0d       	add	r22, r0
     996:	11 24       	eor	r1, r1
     998:	86 2f       	mov	r24, r22
     99a:	08 95       	ret

0000099c <u8g_SetPinOutput>:
  return tmp; 
}

/* set direction to output of the specified pin (internal pin number) */
void u8g_SetPinOutput(uint8_t internal_pin_number)
{
     99c:	cf 93       	push	r28
     99e:	c8 2f       	mov	r28, r24
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) |= _BV(internal_pin_number&7);
     9a0:	68 2f       	mov	r22, r24
     9a2:	66 95       	lsr	r22
     9a4:	66 95       	lsr	r22
     9a6:	66 95       	lsr	r22
     9a8:	80 e7       	ldi	r24, 0x70	; 112
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	da df       	rcall	.-76     	; 0x962 <u8g_get_avr_io_ptr>
     9ae:	fc 01       	movw	r30, r24
     9b0:	40 81       	ld	r20, Z
     9b2:	c7 70       	andi	r28, 0x07	; 7
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <u8g_SetPinOutput+0x20>
     9ba:	22 0f       	add	r18, r18
     9bc:	ca 95       	dec	r28
     9be:	ea f7       	brpl	.-6      	; 0x9ba <u8g_SetPinOutput+0x1e>
     9c0:	24 2b       	or	r18, r20
     9c2:	20 83       	st	Z, r18
     9c4:	cf 91       	pop	r28
}
     9c6:	08 95       	ret

000009c8 <u8g_SetPinInput>:

void u8g_SetPinInput(uint8_t internal_pin_number)
{
     9c8:	cf 93       	push	r28
     9ca:	c8 2f       	mov	r28, r24
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) &= ~_BV(internal_pin_number&7);
     9cc:	68 2f       	mov	r22, r24
     9ce:	66 95       	lsr	r22
     9d0:	66 95       	lsr	r22
     9d2:	66 95       	lsr	r22
     9d4:	80 e7       	ldi	r24, 0x70	; 112
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	c4 df       	rcall	.-120    	; 0x962 <u8g_get_avr_io_ptr>
     9da:	fc 01       	movw	r30, r24
     9dc:	40 81       	ld	r20, Z
     9de:	c7 70       	andi	r28, 0x07	; 7
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <u8g_SetPinInput+0x20>
     9e6:	22 0f       	add	r18, r18
     9e8:	ca 95       	dec	r28
     9ea:	ea f7       	brpl	.-6      	; 0x9e6 <u8g_SetPinInput+0x1e>
     9ec:	20 95       	com	r18
     9ee:	24 23       	and	r18, r20
     9f0:	20 83       	st	Z, r18
     9f2:	cf 91       	pop	r28
}
     9f4:	08 95       	ret

000009f6 <u8g_SetPinLevel>:

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	c8 2f       	mov	r28, r24
     9fc:	d6 2f       	mov	r29, r22
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
     9fe:	68 2f       	mov	r22, r24
     a00:	66 95       	lsr	r22
     a02:	66 95       	lsr	r22
     a04:	66 95       	lsr	r22
     a06:	88 e6       	ldi	r24, 0x68	; 104
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	ab df       	rcall	.-170    	; 0x962 <u8g_get_avr_io_ptr>
     a0c:	fc 01       	movw	r30, r24
     a0e:	c7 70       	andi	r28, 0x07	; 7
     a10:	8f b7       	in	r24, 0x3f	; 63
  
  if ( level == 0 )
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
     a12:	d1 11       	cpse	r29, r1

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
  
  if ( level == 0 )
     a14:	0b c0       	rjmp	.+22     	; 0xa2c <u8g_SetPinLevel+0x36>
     a16:	f8 94       	cli
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
     a18:	90 81       	ld	r25, Z
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <u8g_SetPinLevel+0x2c>
     a20:	22 0f       	add	r18, r18
     a22:	ca 95       	dec	r28
     a24:	ea f7       	brpl	.-6      	; 0xa20 <u8g_SetPinLevel+0x2a>
     a26:	20 95       	com	r18
     a28:	29 23       	and	r18, r25
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <u8g_SetPinLevel+0x48>
     a2c:	f8 94       	cli
   // *tmp &= ~_BV(internal_pin_number&7);
  }
  else
  {
    U8G_ATOMIC_OR(tmp, _BV(internal_pin_number&7));
     a2e:	90 81       	ld	r25, Z
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <u8g_SetPinLevel+0x42>
     a36:	22 0f       	add	r18, r18
     a38:	ca 95       	dec	r28
     a3a:	ea f7       	brpl	.-6      	; 0xa36 <u8g_SetPinLevel+0x40>
     a3c:	29 2b       	or	r18, r25
     a3e:	20 83       	st	Z, r18
     a40:	8f bf       	out	0x3f, r24	; 63
     a42:	df 91       	pop	r29
    //*tmp |= _BV(internal_pin_number&7);
  }
  
}
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <u8g_dev_ssd1327_2bit_write_4_pixel>:
  u8g_SetAddress(u8g, dev, 1);          /* data mode */
}

/* assumes row autoincrement and activated nibble remap */
static  void u8g_dev_ssd1327_2bit_write_4_pixel(u8g_t *u8g, u8g_dev_t *dev, uint8_t left, uint8_t right)
{
     a48:	dc 01       	movw	r26, r24
  uint8_t d, tmp, cnt;
  static uint8_t buf[4];
  buf[0] = 0;
     a4a:	10 92 4a 01 	sts	0x014A, r1
  buf[1] = 0;
     a4e:	10 92 4b 01 	sts	0x014B, r1
  buf[2] = 0;
     a52:	10 92 4c 01 	sts	0x014C, r1
  buf[3] = 0;
     a56:	10 92 4d 01 	sts	0x014D, r1
     a5a:	ea e4       	ldi	r30, 0x4A	; 74
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	8e 0f       	add	r24, r30
  cnt = 0;
  do 
  {
    if ( left == 0 && right == 0 )
     a62:	41 11       	cpse	r20, r1
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <u8g_dev_ssd1327_2bit_write_4_pixel+0x2c>
     a66:	21 11       	cpse	r18, r1
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <u8g_dev_ssd1327_2bit_write_4_pixel+0x2c>
    buf[cnt] = d;
    left >>= 2;
    right >>= 2;
    cnt++;
  }while ( cnt < 4 );
  u8g_WriteSequence(u8g, dev, 4, buf);
     a6a:	2a e4       	ldi	r18, 0x4A	; 74
     a6c:	31 e0       	ldi	r19, 0x01	; 1
     a6e:	44 e0       	ldi	r20, 0x04	; 4
     a70:	cd 01       	movw	r24, r26
     a72:	32 c6       	rjmp	.+3172   	; 0x16d8 <u8g_WriteSequence>
     a74:	94 2f       	mov	r25, r20
     a76:	93 70       	andi	r25, 0x03	; 3
  do 
  {
    if ( left == 0 && right == 0 )
      break;
    d = left;
    d &= 3;
     a78:	92 95       	swap	r25
     a7a:	90 7f       	andi	r25, 0xF0	; 240
    d <<= 4;    
     a7c:	32 2f       	mov	r19, r18
     a7e:	33 70       	andi	r19, 0x03	; 3
    tmp = right;    
    tmp &= 3;
     a80:	93 2b       	or	r25, r19
     a82:	99 0f       	add	r25, r25
    d |= tmp;
     a84:	99 0f       	add	r25, r25
    d <<= 2;
     a86:	91 93       	st	Z+, r25
     a88:	46 95       	lsr	r20
    buf[cnt] = d;
     a8a:	46 95       	lsr	r20
    left >>= 2;
     a8c:	26 95       	lsr	r18
     a8e:	26 95       	lsr	r18
    right >>= 2;
     a90:	8e 13       	cpse	r24, r30
     a92:	e7 cf       	rjmp	.-50     	; 0xa62 <u8g_dev_ssd1327_2bit_write_4_pixel+0x1a>
    cnt++;
  }while ( cnt < 4 );
     a94:	ea cf       	rjmp	.-44     	; 0xa6a <u8g_dev_ssd1327_2bit_write_4_pixel+0x22>

00000a96 <u8g_dev_ssd1327_96x96_gr_fn>:
    cnt--;
  } while( cnt > 0 );
}

uint8_t u8g_dev_ssd1327_96x96_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e0 e5       	ldi	r30, 0x50	; 80
     a9c:	f5 e0       	ldi	r31, 0x05	; 5
     a9e:	a3 c7       	rjmp	.+3910   	; 0x19e6 <__prologue_saves__+0x10>
     aa0:	8c 01       	movw	r16, r24
     aa2:	eb 01       	movw	r28, r22
     aa4:	e4 2e       	mov	r14, r20
     aa6:	69 01       	movw	r12, r18
     aa8:	8f e0       	ldi	r24, 0x0F	; 15
  switch(msg)
     aaa:	48 17       	cp	r20, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <u8g_dev_ssd1327_96x96_gr_fn+0x1a>
     aae:	3e c0       	rjmp	.+124    	; 0xb2c <u8g_dev_ssd1327_96x96_gr_fn+0x96>
     ab0:	e5 e1       	ldi	r30, 0x15	; 21
     ab2:	4e 17       	cp	r20, r30
     ab4:	61 f0       	breq	.+24     	; 0xace <u8g_dev_ssd1327_96x96_gr_fn+0x38>
     ab6:	fa e0       	ldi	r31, 0x0A	; 10
     ab8:	4f 13       	cpse	r20, r31
     aba:	4f c0       	rjmp	.+158    	; 0xb5a <u8g_dev_ssd1327_96x96_gr_fn+0xc4>
     abc:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
     abe:	c8 01       	movw	r24, r16
     ac0:	cd d5       	rcall	.+2970   	; 0x165c <u8g_InitCom>
     ac2:	42 e8       	ldi	r20, 0x82	; 130
     ac4:	50 e0       	ldi	r21, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_init_seq);
     ac6:	be 01       	movw	r22, r28
     ac8:	c8 01       	movw	r24, r16
     aca:	0e d6       	rcall	.+3100   	; 0x16e8 <u8g_WriteEscSeqP>
     acc:	46 c0       	rjmp	.+140    	; 0xb5a <u8g_dev_ssd1327_96x96_gr_fn+0xc4>
     ace:	ea 81       	ldd	r30, Y+2	; 0x02
     ad0:	fb 81       	ldd	r31, Y+3	; 0x03
      break;
     ad2:	f4 80       	ldd	r15, Z+4	; 0x04
};


static void u8g_dev_ssd1327_2bit_prepare_page(u8g_t *u8g, u8g_dev_t *dev)
{
  uint8_t page = ((u8g_pb_t *)(dev->dev_mem))->p.page;
     ad4:	48 e7       	ldi	r20, 0x78	; 120
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	c8 01       	movw	r24, r16
  
  u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_prepare_page_seq);
     ada:	06 d6       	rcall	.+3084   	; 0x16e8 <u8g_WriteEscSeqP>
     adc:	ff 0c       	add	r15, r15
     ade:	ff 0c       	add	r15, r15
     ae0:	4f 2d       	mov	r20, r15
     ae2:	be 01       	movw	r22, r28
  
  page <<= 2;
     ae4:	c8 01       	movw	r24, r16
     ae6:	ee d5       	rcall	.+3036   	; 0x16c4 <u8g_WriteByte>
  u8g_WriteByte(u8g, dev, page);       /* start at the selected page */
     ae8:	43 e0       	ldi	r20, 0x03	; 3
     aea:	4f 0d       	add	r20, r15
     aec:	be 01       	movw	r22, r28
     aee:	c8 01       	movw	r24, r16
     af0:	e9 d5       	rcall	.+3026   	; 0x16c4 <u8g_WriteByte>
  page += 3;
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	be 01       	movw	r22, r28
  u8g_WriteByte(u8g, dev, page);       /* end within the selected page */  
     af6:	c8 01       	movw	r24, r16
     af8:	db d5       	rcall	.+2998   	; 0x16b0 <u8g_SetAddress>
     afa:	ea 81       	ldd	r30, Y+2	; 0x02
     afc:	fb 81       	ldd	r31, Y+3	; 0x03
  
  u8g_SetAddress(u8g, dev, 1);          /* data mode */
     afe:	f5 80       	ldd	r15, Z+5	; 0x05
     b00:	f6 94       	lsr	r15
     b02:	a6 80       	ldd	r10, Z+6	; 0x06
     b04:	b7 80       	ldd	r11, Z+7	; 0x07
     b06:	f5 01       	movw	r30, r10

static void u8g_dev_ssd1327_2bit_write_buffer(u8g_t *u8g, u8g_dev_t *dev)
{
  uint8_t cnt, left, right;
  uint8_t *ptr;
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
     b08:	40 81       	ld	r20, Z
     b0a:	f2 e0       	ldi	r31, 0x02	; 2
  
  cnt = pb->width;
     b0c:	af 0e       	add	r10, r31
  cnt >>= 1;
     b0e:	b1 1c       	adc	r11, r1
  ptr = pb->buf;
     b10:	f5 01       	movw	r30, r10
     b12:	31 97       	sbiw	r30, 0x01	; 1
  do
  {
    left = *ptr++;
     b14:	20 81       	ld	r18, Z
     b16:	be 01       	movw	r22, r28
     b18:	c8 01       	movw	r24, r16
     b1a:	96 df       	rcall	.-212    	; 0xa48 <u8g_dev_ssd1327_2bit_write_4_pixel>
     b1c:	fa 94       	dec	r15
     b1e:	f1 10       	cpse	r15, r1
     b20:	f2 cf       	rjmp	.-28     	; 0xb06 <u8g_dev_ssd1327_96x96_gr_fn+0x70>
    right = *ptr++;
    u8g_dev_ssd1327_2bit_write_4_pixel(u8g, dev, left, right);
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	be 01       	movw	r22, r28
     b26:	c8 01       	movw	r24, r16
     b28:	a3 d5       	rcall	.+2886   	; 0x1670 <u8g_SetChipSelect>
     b2a:	17 c0       	rjmp	.+46     	; 0xb5a <u8g_dev_ssd1327_96x96_gr_fn+0xc4>
    cnt--;
     b2c:	41 e0       	ldi	r20, 0x01	; 1
  } while( cnt > 0 );
     b2e:	c8 01       	movw	r24, r16
     b30:	9f d5       	rcall	.+2878   	; 0x1670 <u8g_SetChipSelect>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_dev_ssd1327_2bit_prepare_page(u8g, dev);
        u8g_dev_ssd1327_2bit_write_buffer(u8g, dev);
        u8g_SetChipSelect(u8g, dev, 0);        
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	be 01       	movw	r22, r28
     b36:	c8 01       	movw	r24, r16
     b38:	bb d5       	rcall	.+2934   	; 0x16b0 <u8g_SetAddress>
     b3a:	41 e8       	ldi	r20, 0x81	; 129
      }
      break;
     b3c:	be 01       	movw	r22, r28
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
     b3e:	c8 01       	movw	r24, r16
     b40:	c1 d5       	rcall	.+2946   	; 0x16c4 <u8g_WriteByte>
     b42:	f6 01       	movw	r30, r12
     b44:	40 81       	ld	r20, Z
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
     b46:	46 95       	lsr	r20
     b48:	be 01       	movw	r22, r28
     b4a:	c8 01       	movw	r24, r16
     b4c:	bb d5       	rcall	.+2934   	; 0x16c4 <u8g_WriteByte>
     b4e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteByte(u8g, dev, 0x081);
     b50:	be 01       	movw	r22, r28
     b52:	c8 01       	movw	r24, r16
     b54:	8d d5       	rcall	.+2842   	; 0x1670 <u8g_SetChipSelect>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <u8g_dev_ssd1327_96x96_gr_fn+0xce>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
     b5a:	96 01       	movw	r18, r12
     b5c:	4e 2d       	mov	r20, r14
     b5e:	be 01       	movw	r22, r28
     b60:	c8 01       	movw	r24, r16
     b62:	c7 d3       	rcall	.+1934   	; 0x12f2 <u8g_dev_pb8v2_base_fn>
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
      u8g_SetChipSelect(u8g, dev, 0);      
     b68:	ea e0       	ldi	r30, 0x0A	; 10
     b6a:	59 c7       	rjmp	.+3762   	; 0x1a1e <__epilogue_restores__+0x10>

00000b6c <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
     b6c:	fc 01       	movw	r30, r24
     b6e:	e6 0f       	add	r30, r22
     b70:	f1 1d       	adc	r31, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
     b72:	84 91       	lpm	r24, Z
     b74:	90 e0       	ldi	r25, 0x00	; 0
    font++;
    pos <<= 8;
     b76:	98 2f       	mov	r25, r24
     b78:	88 27       	eor	r24, r24
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
     b7a:	31 96       	adiw	r30, 0x01	; 1
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
     b7c:	e4 91       	lpm	r30, Z
    return pos;
}
     b7e:	8e 0f       	add	r24, r30
     b80:	91 1d       	adc	r25, r1
     b82:	08 95       	ret

00000b84 <u8g_font_GetFormat>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     b84:	fc 01       	movw	r30, r24
     b86:	84 91       	lpm	r24, Z

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
     b88:	08 95       	ret

00000b8a <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
     b8a:	fc df       	rcall	.-8      	; 0xb84 <u8g_font_GetFormat>
     b8c:	88 23       	and	r24, r24
     b8e:	21 f0       	breq	.+8      	; 0xb98 <u8g_font_GetFontGlyphStructureSize+0xe>
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	11 f0       	breq	.+4      	; 0xb98 <u8g_font_GetFontGlyphStructureSize+0xe>
     b94:	83 e0       	ldi	r24, 0x03	; 3
  {
    case 0: return 6;
    case 1: return 3;
     b96:	08 95       	ret
     b98:	86 e0       	ldi	r24, 0x06	; 6
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
  {
    case 0: return 6;
     b9a:	08 95       	ret

00000b9c <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	08 95       	ret

00000ba0 <u8g_font_calc_vref_top>:

  /*
  y += (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
  y++;
  */
  tmp = (u8g_uint_t)(u8g_int_t)(u8g->font_ref_ascent);
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 8d       	ldd	r24, Z+24	; 0x18
  tmp++;
  return tmp;
}
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	08 95       	ret

00000ba8 <u8g_font_GetEncoding65Pos>:
}

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
    return u8g_font_get_word(font, 6);
     ba8:	66 e0       	ldi	r22, 0x06	; 6
     baa:	e0 cf       	rjmp	.-64     	; 0xb6c <u8g_font_get_word>

00000bac <u8g_font_GetEncoding97Pos>:
}

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
    return u8g_font_get_word(font, 8);
     bac:	68 e0       	ldi	r22, 0x08	; 8
     bae:	de cf       	rjmp	.-68     	; 0xb6c <u8g_font_get_word>

00000bb0 <u8g_font_GetFontStartEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     bb0:	0a 96       	adiw	r24, 0x0a	; 10
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     bb2:	fc 01       	movw	r30, r24
     bb4:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
}
     bb6:	08 95       	ret

00000bb8 <u8g_font_GetFontEndEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     bb8:	0b 96       	adiw	r24, 0x0b	; 11
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     bba:	fc 01       	movw	r30, r24
     bbc:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
}
     bbe:	08 95       	ret

00000bc0 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e5 ee       	ldi	r30, 0xE5	; 229
     bc6:	f5 e0       	ldi	r31, 0x05	; 5
     bc8:	0f c7       	rjmp	.+3614   	; 0x19e8 <__prologue_saves__+0x12>
     bca:	8c 01       	movw	r16, r24
     bcc:	e6 2e       	mov	r14, r22
     bce:	dc 01       	movw	r26, r24
  uint8_t *p = (uint8_t *)(u8g->font);
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	cd 91       	ld	r28, X+
     bd4:	dc 91       	ld	r29, X
     bd6:	15 97       	sbiw	r26, 0x05	; 5
     bd8:	ce 01       	movw	r24, r28
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
     bda:	d4 df       	rcall	.-88     	; 0xb84 <u8g_font_GetFormat>
     bdc:	f8 2e       	mov	r15, r24
     bde:	f8 01       	movw	r30, r16
     be0:	84 81       	ldd	r24, Z+4	; 0x04
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
     be2:	95 81       	ldd	r25, Z+5	; 0x05
     be4:	d2 df       	rcall	.-92     	; 0xb8a <u8g_font_GetFontGlyphStructureSize>
     be6:	c8 2e       	mov	r12, r24
     be8:	f1 e0       	ldi	r31, 0x01	; 1
     bea:	ff 12       	cpse	r15, r31
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <u8g_GetGlyph+0x34>
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
     bee:	2f e0       	ldi	r18, 0x0F	; 15
     bf0:	b2 2e       	mov	r11, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <u8g_GetGlyph+0x38>
    mask = 15;
     bf4:	bb 24       	eor	r11, r11
     bf6:	ba 94       	dec	r11
     bf8:	d8 01       	movw	r26, r16
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
     bfa:	14 96       	adiw	r26, 0x04	; 4
     bfc:	8d 91       	ld	r24, X+

  if ( font_format == 1 )
    mask = 15;
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
     bfe:	9c 91       	ld	r25, X
     c00:	15 97       	sbiw	r26, 0x05	; 5
     c02:	d6 df       	rcall	.-84     	; 0xbb0 <u8g_font_GetFontStartEncoding>
     c04:	f8 2e       	mov	r15, r24
     c06:	f8 01       	movw	r30, r16
     c08:	84 81       	ldd	r24, Z+4	; 0x04
     c0a:	95 81       	ldd	r25, Z+5	; 0x05
     c0c:	d5 df       	rcall	.-86     	; 0xbb8 <u8g_font_GetFontEndEncoding>
  end = u8g_font_GetFontEndEncoding(u8g->font);
     c0e:	d8 2e       	mov	r13, r24
     c10:	d8 01       	movw	r26, r16
     c12:	14 96       	adiw	r26, 0x04	; 4
     c14:	8d 91       	ld	r24, X+
     c16:	9c 91       	ld	r25, X
     c18:	15 97       	sbiw	r26, 0x05	; 5

  pos = u8g_font_GetEncoding97Pos(u8g->font);
     c1a:	c8 df       	rcall	.-112    	; 0xbac <u8g_font_GetEncoding97Pos>
     c1c:	b0 e6       	ldi	r27, 0x60	; 96
     c1e:	be 15       	cp	r27, r14
     c20:	38 f4       	brcc	.+14     	; 0xc30 <u8g_GetGlyph+0x70>
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	29 f0       	breq	.+10     	; 0xc30 <u8g_GetGlyph+0x70>
     c26:	c8 0f       	add	r28, r24
  if ( requested_encoding >= 97 && pos > 0 )
     c28:	d9 1f       	adc	r29, r25
     c2a:	91 e6       	ldi	r25, 0x61	; 97
     c2c:	f9 2e       	mov	r15, r25
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <u8g_GetGlyph+0x8e>
     c30:	f8 01       	movw	r30, r16
  {
    p+= pos;
     c32:	84 81       	ldd	r24, Z+4	; 0x04
     c34:	95 81       	ldd	r25, Z+5	; 0x05
    start = 97;
     c36:	b8 df       	rcall	.-144    	; 0xba8 <u8g_font_GetEncoding65Pos>
     c38:	f0 e4       	ldi	r31, 0x40	; 64
     c3a:	fe 15       	cp	r31, r14
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
     c3c:	38 f4       	brcc	.+14     	; 0xc4c <u8g_GetGlyph+0x8c>
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	29 f0       	breq	.+10     	; 0xc4c <u8g_GetGlyph+0x8c>
     c42:	c8 0f       	add	r28, r24
     c44:	d9 1f       	adc	r29, r25
    if ( requested_encoding >= 65 && pos > 0 )
     c46:	81 e4       	ldi	r24, 0x41	; 65
     c48:	f8 2e       	mov	r15, r24
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <u8g_GetGlyph+0x8e>
     c4c:	61 96       	adiw	r28, 0x11	; 17
     c4e:	de 14       	cp	r13, r14
    {
      p+= pos;
     c50:	90 f4       	brcc	.+36     	; 0xc76 <u8g_GetGlyph+0xb6>
     c52:	d8 01       	movw	r26, r16
      start = 65;
     c54:	50 96       	adiw	r26, 0x10	; 16
     c56:	1c 92       	st	X, r1
     c58:	50 97       	sbiw	r26, 0x10	; 16
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
     c5a:	53 96       	adiw	r26, 0x13	; 19
  }
  
  if ( requested_encoding > end )
     c5c:	1c 92       	st	X, r1
     c5e:	53 97       	sbiw	r26, 0x13	; 19
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
     c60:	54 96       	adiw	r26, 0x14	; 20
     c62:	1c 92       	st	X, r1
     c64:	54 97       	sbiw	r26, 0x14	; 20
     c66:	51 96       	adiw	r26, 0x11	; 17
  u8g->glyph_width = 0;
     c68:	1c 92       	st	X, r1
     c6a:	51 97       	sbiw	r26, 0x11	; 17
     c6c:	52 96       	adiw	r26, 0x12	; 18
  u8g->glyph_height = 0;
     c6e:	1c 92       	st	X, r1
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
  u8g->glyph_x = 0;
     c74:	66 c0       	rjmp	.+204    	; 0xd42 <u8g_GetGlyph+0x182>
     c76:	df 14       	cp	r13, r15
     c78:	60 f3       	brcs	.-40     	; 0xc52 <u8g_GetGlyph+0x92>
  u8g->glyph_y = 0;
     c7a:	8c 2d       	mov	r24, r12
     c7c:	90 e0       	ldi	r25, 0x00	; 0
  }
  
  if ( requested_encoding > end )
  {
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
     c7e:	fe 01       	movw	r30, r28
     c80:	24 91       	lpm	r18, Z
     c82:	2f 3f       	cpi	r18, 0xFF	; 255
  }
  
  i = start;
  if ( i <= end )
     c84:	11 f4       	brne	.+4      	; 0xc8a <u8g_GetGlyph+0xca>
     c86:	21 96       	adiw	r28, 0x01	; 1
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
        p += data_structure_size;
     c88:	57 c0       	rjmp	.+174    	; 0xd38 <u8g_GetGlyph+0x178>
     c8a:	fe 10       	cpse	r15, r14
  i = start;
  if ( i <= end )
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
     c8c:	4c c0       	rjmp	.+152    	; 0xd26 <u8g_GetGlyph+0x166>
     c8e:	d8 01       	movw	r26, r16
     c90:	14 96       	adiw	r26, 0x04	; 4
     c92:	8d 91       	ld	r24, X+
      {
        p += 1;
     c94:	9c 91       	ld	r25, X
     c96:	15 97       	sbiw	r26, 0x05	; 5
      }
      else
      {
        if ( i == requested_encoding )
     c98:	75 df       	rcall	.-278    	; 0xb84 <u8g_font_GetFormat>
     c9a:	9e 01       	movw	r18, r28
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
     c9c:	2f 5f       	subi	r18, 0xFF	; 255
     c9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ca0:	fe 01       	movw	r30, r28
     ca2:	88 23       	and	r24, r24
     ca4:	11 f0       	breq	.+4      	; 0xcaa <u8g_GetGlyph+0xea>
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	e1 f4       	brne	.+56     	; 0xce2 <u8g_GetGlyph+0x122>
     caa:	84 91       	lpm	r24, Z
     cac:	d8 01       	movw	r26, r16
     cae:	53 96       	adiw	r26, 0x13	; 19
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
     cb0:	8c 93       	st	X, r24
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
     cb2:	53 97       	sbiw	r26, 0x13	; 19
     cb4:	f9 01       	movw	r30, r18
     cb6:	24 91       	lpm	r18, Z
     cb8:	54 96       	adiw	r26, 0x14	; 20
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
     cba:	2c 93       	st	X, r18
     cbc:	54 97       	sbiw	r26, 0x14	; 20
     cbe:	fe 01       	movw	r30, r28
     cc0:	33 96       	adiw	r30, 0x03	; 3
     cc2:	e4 91       	lpm	r30, Z
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
     cc4:	50 96       	adiw	r26, 0x10	; 16
     cc6:	ec 93       	st	X, r30
     cc8:	50 97       	sbiw	r26, 0x10	; 16
     cca:	fe 01       	movw	r30, r28
     ccc:	34 96       	adiw	r30, 0x04	; 4
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
     cce:	e4 91       	lpm	r30, Z
     cd0:	51 96       	adiw	r26, 0x11	; 17
     cd2:	ec 93       	st	X, r30
     cd4:	51 97       	sbiw	r26, 0x11	; 17
     cd6:	fe 01       	movw	r30, r28
     cd8:	35 96       	adiw	r30, 0x05	; 5
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
     cda:	e4 91       	lpm	r30, Z
     cdc:	52 96       	adiw	r26, 0x12	; 18
     cde:	ec 93       	st	X, r30
     ce0:	20 c0       	rjmp	.+64     	; 0xd22 <u8g_GetGlyph+0x162>
     ce2:	84 91       	lpm	r24, Z
     ce4:	98 2f       	mov	r25, r24
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
     ce6:	9f 70       	andi	r25, 0x0F	; 15
     ce8:	92 50       	subi	r25, 0x02	; 2
     cea:	d8 01       	movw	r26, r16
     cec:	52 96       	adiw	r26, 0x12	; 18
     cee:	9c 93       	st	X, r25
     cf0:	52 97       	sbiw	r26, 0x12	; 18
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
     cf2:	82 95       	swap	r24
      u8g->glyph_y =  tmp & 15;
     cf4:	8f 70       	andi	r24, 0x0F	; 15
     cf6:	51 96       	adiw	r26, 0x11	; 17
      u8g->glyph_y-=2;
     cf8:	8c 93       	st	X, r24
     cfa:	51 97       	sbiw	r26, 0x11	; 17
     cfc:	f9 01       	movw	r30, r18
     cfe:	24 91       	lpm	r18, Z
     d00:	82 2f       	mov	r24, r18
      tmp >>= 4;
     d02:	8f 70       	andi	r24, 0x0F	; 15
     d04:	54 96       	adiw	r26, 0x14	; 20
      u8g->glyph_x =  tmp;
     d06:	8c 93       	st	X, r24
     d08:	54 97       	sbiw	r26, 0x14	; 20
     d0a:	22 95       	swap	r18
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
     d0c:	2f 70       	andi	r18, 0x0F	; 15
     d0e:	53 96       	adiw	r26, 0x13	; 19
      u8g->glyph_height =  tmp & 15;
     d10:	2c 93       	st	X, r18
     d12:	53 97       	sbiw	r26, 0x13	; 19
     d14:	fe 01       	movw	r30, r28
     d16:	32 96       	adiw	r30, 0x02	; 2
     d18:	e4 91       	lpm	r30, Z
      tmp >>= 4;
     d1a:	e2 95       	swap	r30
     d1c:	ef 70       	andi	r30, 0x0F	; 15
      u8g->glyph_width =  tmp;
     d1e:	50 96       	adiw	r26, 0x10	; 16
     d20:	ec 93       	st	X, r30
     d22:	ce 01       	movw	r24, r28
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
     d24:	0e c0       	rjmp	.+28     	; 0xd42 <u8g_GetGlyph+0x182>
     d26:	fe 01       	movw	r30, r28
     d28:	32 96       	adiw	r30, 0x02	; 2
      tmp >>= 4;
     d2a:	e4 91       	lpm	r30, Z
     d2c:	eb 21       	and	r30, r11
      u8g->glyph_dx = tmp;
     d2e:	9c 01       	movw	r18, r24
     d30:	2e 0f       	add	r18, r30
      else
      {
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
     d32:	31 1d       	adc	r19, r1
     d34:	c2 0f       	add	r28, r18
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
     d36:	d3 1f       	adc	r29, r19
     d38:	fd 14       	cp	r15, r13
     d3a:	09 f4       	brne	.+2      	; 0xd3e <u8g_GetGlyph+0x17e>
     d3c:	8a cf       	rjmp	.-236    	; 0xc52 <u8g_GetGlyph+0x92>
     d3e:	f3 94       	inc	r15
     d40:	9e cf       	rjmp	.-196    	; 0xc7e <u8g_GetGlyph+0xbe>
     d42:	cd b7       	in	r28, 0x3d	; 61
        p += data_structure_size;
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	e9 e0       	ldi	r30, 0x09	; 9
      }
      if ( i == end )
     d48:	6b c6       	rjmp	.+3286   	; 0x1a20 <__epilogue_restores__+0x12>

00000d4a <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	9f 92       	push	r9
     d54:	af 92       	push	r10
     d56:	bf 92       	push	r11
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	1f 92       	push	r1
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	2c 01       	movw	r4, r24
     d70:	c6 2e       	mov	r12, r22
     d72:	94 2e       	mov	r9, r20
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
     d74:	62 2f       	mov	r22, r18
     d76:	24 df       	rcall	.-440    	; 0xbc0 <u8g_GetGlyph>
     d78:	7c 01       	movw	r14, r24
     d7a:	89 2b       	or	r24, r25
    if ( g == NULL  )
     d7c:	09 f4       	brne	.+2      	; 0xd80 <u8g_draw_glyph+0x36>
     d7e:	3a c0       	rjmp	.+116    	; 0xdf4 <u8g_draw_glyph+0xaa>
     d80:	f2 01       	movw	r30, r4


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
     d82:	84 81       	ldd	r24, Z+4	; 0x04
     d84:	95 81       	ldd	r25, Z+5	; 0x05
     d86:	01 df       	rcall	.-510    	; 0xb8a <u8g_font_GetFontGlyphStructureSize>
     d88:	b8 2e       	mov	r11, r24
     d8a:	f2 01       	movw	r30, r4
     d8c:	13 89       	ldd	r17, Z+19	; 0x13
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
     d8e:	04 89       	ldd	r16, Z+20	; 0x14
     d90:	81 89       	ldd	r24, Z+17	; 0x11
  h = u8g->glyph_height;
     d92:	c8 0e       	add	r12, r24
  
  x += u8g->glyph_x;
     d94:	82 89       	ldd	r24, Z+18	; 0x12
     d96:	98 1a       	sub	r9, r24
     d98:	d9 2c       	mov	r13, r9
     d9a:	d0 1a       	sub	r13, r16
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
     d9c:	21 2f       	mov	r18, r17
     d9e:	4d 2d       	mov	r20, r13
     da0:	6c 2d       	mov	r22, r12
     da2:	c2 01       	movw	r24, r4
     da4:	39 d4       	rcall	.+2162   	; 0x1618 <u8g_IsBBXIntersection>
     da6:	88 23       	and	r24, r24
     da8:	11 f1       	breq	.+68     	; 0xdee <u8g_draw_glyph+0xa4>
     daa:	eb 0c       	add	r14, r11
     dac:	f1 1c       	adc	r15, r1
     dae:	19 5f       	subi	r17, 0xF9	; 249


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
     db0:	16 95       	lsr	r17
     db2:	16 95       	lsr	r17
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
     db4:	16 95       	lsr	r17
  w /= 8;
     db6:	61 2e       	mov	r6, r17
     db8:	71 2c       	mov	r7, r1
     dba:	d9 14       	cp	r13, r9
     dbc:	c1 f0       	breq	.+48     	; 0xdee <u8g_draw_glyph+0xa4>
     dbe:	3c 2d       	mov	r19, r12
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
     dc0:	57 01       	movw	r10, r14
     dc2:	8a 2d       	mov	r24, r10
     dc4:	8e 19       	sub	r24, r14
     dc6:	81 17       	cp	r24, r17
     dc8:	70 f4       	brcc	.+28     	; 0xde6 <u8g_draw_glyph+0x9c>
     dca:	f5 01       	movw	r30, r10
  {
    ix = x;
    for( i = 0; i < w; i++ )
     dcc:	04 91       	lpm	r16, Z
     dce:	20 e0       	ldi	r18, 0x00	; 0
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
     dd0:	4d 2d       	mov	r20, r13
     dd2:	63 2f       	mov	r22, r19
     dd4:	c2 01       	movw	r24, r4
     dd6:	39 83       	std	Y+1, r19	; 0x01
     dd8:	f8 d1       	rcall	.+1008   	; 0x11ca <u8g_Draw8Pixel>
     dda:	ff ef       	ldi	r31, 0xFF	; 255
     ddc:	af 1a       	sub	r10, r31
     dde:	bf 0a       	sbc	r11, r31
     de0:	39 81       	ldd	r19, Y+1	; 0x01
      data++;
     de2:	38 5f       	subi	r19, 0xF8	; 248
     de4:	ee cf       	rjmp	.-36     	; 0xdc2 <u8g_draw_glyph+0x78>
     de6:	e6 0c       	add	r14, r6
      ix+=8;
     de8:	f7 1c       	adc	r15, r7
     dea:	d3 94       	inc	r13
     dec:	e6 cf       	rjmp	.-52     	; 0xdba <u8g_draw_glyph+0x70>
     dee:	f2 01       	movw	r30, r4
     df0:	80 89       	ldd	r24, Z+16	; 0x10
    }
    iy++;
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <u8g_draw_glyph+0xac>
     df4:	80 e0       	ldi	r24, 0x00	; 0
  }
  return u8g->glyph_dx;
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    if ( g == NULL  )
      return 0;
     dfc:	1f 91       	pop	r17
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
}
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	7f 90       	pop	r7
     e10:	6f 90       	pop	r6
     e12:	5f 90       	pop	r5
     e14:	4f 90       	pop	r4
     e16:	08 95       	ret

00000e18 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
     e18:	af 92       	push	r10
     e1a:	bf 92       	push	r11
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <u8g_DrawStr+0x14>
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	7c 01       	movw	r14, r24
     e32:	d6 2e       	mov	r13, r22
     e34:	04 2f       	mov	r16, r20
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
     e36:	dc 01       	movw	r26, r24
     e38:	55 96       	adiw	r26, 0x15	; 21
     e3a:	ed 91       	ld	r30, X+
     e3c:	fc 91       	ld	r31, X
     e3e:	56 97       	sbiw	r26, 0x16	; 22
     e40:	29 83       	std	Y+1, r18	; 0x01
     e42:	3a 83       	std	Y+2, r19	; 0x02
     e44:	09 95       	icall
     e46:	08 0f       	add	r16, r24
     e48:	29 81       	ldd	r18, Y+1	; 0x01
     e4a:	a2 2e       	mov	r10, r18
     e4c:	3a 81       	ldd	r19, Y+2	; 0x02
     e4e:	b3 2e       	mov	r11, r19
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
     e50:	10 e0       	ldi	r17, 0x00	; 0
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
     e52:	f5 01       	movw	r30, r10
     e54:	21 91       	ld	r18, Z+
     e56:	5f 01       	movw	r10, r30
     e58:	22 23       	and	r18, r18
     e5a:	39 f0       	breq	.+14     	; 0xe6a <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
     e5c:	40 2f       	mov	r20, r16
     e5e:	6d 2d       	mov	r22, r13
     e60:	c7 01       	movw	r24, r14
     e62:	73 df       	rcall	.-282    	; 0xd4a <u8g_draw_glyph>
     e64:	d8 0e       	add	r13, r24
    x += d;
     e66:	18 0f       	add	r17, r24
    t += d;
     e68:	f4 cf       	rjmp	.-24     	; 0xe52 <u8g_DrawStr+0x3a>
     e6a:	81 2f       	mov	r24, r17
    s++;
  }
  return t;
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	df 90       	pop	r13
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	08 95       	ret

00000e84 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
     e84:	dc 01       	movw	r26, r24
  uint16_t ls;
  if ( u8g->font == NULL )
     e86:	14 96       	adiw	r26, 0x04	; 4
     e88:	2d 91       	ld	r18, X+
     e8a:	3c 91       	ld	r19, X
     e8c:	15 97       	sbiw	r26, 0x05	; 5
     e8e:	21 15       	cp	r18, r1
     e90:	31 05       	cpc	r19, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <u8g_UpdateRefHeight+0x12>
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <u8g_UpdateRefHeight+0x90>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
     e96:	57 96       	adiw	r26, 0x17	; 23
     e98:	8c 91       	ld	r24, X
     e9a:	57 97       	sbiw	r26, 0x17	; 23

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     e9c:	f9 01       	movw	r30, r18
void u8g_UpdateRefHeight(u8g_t *u8g)
{
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
     e9e:	81 11       	cpse	r24, r1
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <u8g_UpdateRefHeight+0x2e>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     ea2:	35 96       	adiw	r30, 0x05	; 5
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     ea4:	e4 91       	lpm	r30, Z
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
     ea6:	58 96       	adiw	r26, 0x18	; 24
     ea8:	ec 93       	st	X, r30
     eaa:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     eac:	f9 01       	movw	r30, r18
     eae:	3c 96       	adiw	r30, 0x0c	; 12
     eb0:	11 c0       	rjmp	.+34     	; 0xed4 <u8g_UpdateRefHeight+0x50>
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	41 f4       	brne	.+16     	; 0xec6 <u8g_UpdateRefHeight+0x42>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     eb6:	3f 96       	adiw	r30, 0x0f	; 15
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     eb8:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
     eba:	58 96       	adiw	r26, 0x18	; 24
     ebc:	ec 93       	st	X, r30
     ebe:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     ec0:	f9 01       	movw	r30, r18
     ec2:	70 96       	adiw	r30, 0x10	; 16
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <u8g_UpdateRefHeight+0x50>
     ec6:	3d 96       	adiw	r30, 0x0d	; 13
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     ec8:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
     eca:	58 96       	adiw	r26, 0x18	; 24
     ecc:	ec 93       	st	X, r30
     ece:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
     ed0:	f9 01       	movw	r30, r18
     ed2:	3e 96       	adiw	r30, 0x0e	; 14
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
     ed4:	e4 91       	lpm	r30, Z
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
     ed6:	59 96       	adiw	r26, 0x19	; 25
     ed8:	ec 93       	st	X, r30
     eda:	59 97       	sbiw	r26, 0x19	; 25
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
     edc:	58 96       	adiw	r26, 0x18	; 24
     ede:	8c 91       	ld	r24, X
     ee0:	58 97       	sbiw	r26, 0x18	; 24
     ee2:	08 2e       	mov	r0, r24
     ee4:	00 0c       	add	r0, r0
     ee6:	99 0b       	sbc	r25, r25
     ee8:	59 96       	adiw	r26, 0x19	; 25
     eea:	2c 91       	ld	r18, X
     eec:	59 97       	sbiw	r26, 0x19	; 25
     eee:	82 1b       	sub	r24, r18
     ef0:	91 09       	sbc	r25, r1
     ef2:	27 fd       	sbrc	r18, 7
     ef4:	93 95       	inc	r25
  if ( u8g->font_line_spacing_factor != 64 )
     ef6:	5a 96       	adiw	r26, 0x1a	; 26
     ef8:	2c 91       	ld	r18, X
     efa:	5a 97       	sbiw	r26, 0x1a	; 26
     efc:	20 34       	cpi	r18, 0x40	; 64
     efe:	41 f0       	breq	.+16     	; 0xf10 <u8g_UpdateRefHeight+0x8c>
  {
    ls &= 255;
    ls *= u8g->font_line_spacing_factor;
     f00:	82 9f       	mul	r24, r18
     f02:	c0 01       	movw	r24, r0
     f04:	11 24       	eor	r1, r1
    ls >>= 6;
     f06:	26 e0       	ldi	r18, 0x06	; 6
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	2a 95       	dec	r18
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <u8g_UpdateRefHeight+0x84>
  }
  u8g->line_spacing = ls;
     f10:	5b 96       	adiw	r26, 0x1b	; 27
     f12:	8c 93       	st	X, r24
     f14:	08 95       	ret

00000f16 <u8g_SetFontRefHeightText>:
}

void u8g_SetFontRefHeightText(u8g_t *u8g)
{
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_TEXT;
     f16:	fc 01       	movw	r30, r24
     f18:	17 8a       	std	Z+23, r1	; 0x17
  u8g_UpdateRefHeight(u8g);
     f1a:	b4 cf       	rjmp	.-152    	; 0xe84 <u8g_UpdateRefHeight>

00000f1c <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
     f1c:	2e ec       	ldi	r18, 0xCE	; 206
     f1e:	35 e0       	ldi	r19, 0x05	; 5
     f20:	fc 01       	movw	r30, r24
     f22:	36 8b       	std	Z+22, r19	; 0x16
     f24:	25 8b       	std	Z+21, r18	; 0x15
     f26:	08 95       	ret

00000f28 <u8g_SetFontPosTop>:
  return tmp;
}

void u8g_SetFontPosTop(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_top;
     f28:	20 ed       	ldi	r18, 0xD0	; 208
     f2a:	35 e0       	ldi	r19, 0x05	; 5
     f2c:	fc 01       	movw	r30, r24
     f2e:	36 8b       	std	Z+22, r19	; 0x16
     f30:	25 8b       	std	Z+21, r18	; 0x15
     f32:	08 95       	ret

00000f34 <u8g_GetStrWidth>:

/*========================================================================*/
/* string width calculation */

u8g_uint_t u8g_GetStrWidth(u8g_t *u8g, const char *s)
{
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	8c 01       	movw	r16, r24
     f40:	7b 01       	movw	r14, r22
  u8g_uint_t  w;
  uint8_t encoding;
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
     f42:	c0 e0       	ldi	r28, 0x00	; 0
  
  for(;;)
  {
    encoding = *s;
     f44:	f7 01       	movw	r30, r14
     f46:	61 91       	ld	r22, Z+
     f48:	7f 01       	movw	r14, r30
    if ( encoding == 0 )
     f4a:	66 23       	and	r22, r22
     f4c:	31 f0       	breq	.+12     	; 0xf5a <u8g_GetStrWidth+0x26>
      break;

    /* load glyph information */
    u8g_GetGlyph(u8g, encoding);
     f4e:	c8 01       	movw	r24, r16
     f50:	37 de       	rcall	.-914    	; 0xbc0 <u8g_GetGlyph>
     f52:	f8 01       	movw	r30, r16
    w += u8g->glyph_dx;    
     f54:	80 89       	ldd	r24, Z+16	; 0x10
     f56:	c8 0f       	add	r28, r24
     f58:	f5 cf       	rjmp	.-22     	; 0xf44 <u8g_GetStrWidth+0x10>
    
    /* goto next char */
    s++;
  }
     f5a:	8c 2f       	mov	r24, r28
  
  return w;  
}
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	08 95       	ret

00000f68 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
  if ( u8g->font != font )
     f6c:	fc 01       	movw	r30, r24
     f6e:	24 81       	ldd	r18, Z+4	; 0x04
     f70:	35 81       	ldd	r19, Z+5	; 0x05
     f72:	26 17       	cp	r18, r22
     f74:	37 07       	cpc	r19, r23
     f76:	41 f0       	breq	.+16     	; 0xf88 <u8g_SetFont+0x20>
     f78:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
     f7a:	75 83       	std	Z+5, r23	; 0x05
     f7c:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
     f7e:	82 df       	rcall	.-252    	; 0xe84 <u8g_UpdateRefHeight>
     f80:	8e ec       	ldi	r24, 0xCE	; 206
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
     f82:	95 e0       	ldi	r25, 0x05	; 5
     f84:	9e 8b       	std	Y+22, r25	; 0x16
     f86:	8d 8b       	std	Y+21, r24	; 0x15
     f88:	df 91       	pop	r29
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <u8g_init_data>:
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
  u8g->font = NULL;
     f96:	1d 82       	std	Y+5, r1	; 0x05
     f98:	1c 82       	std	Y+4, r1	; 0x04
  u8g->cursor_font = NULL;
     f9a:	1f 82       	std	Y+7, r1	; 0x07
     f9c:	1e 82       	std	Y+6, r1	; 0x06
  u8g->cursor_bg_color = 0;
     f9e:	19 86       	std	Y+9, r1	; 0x09
  u8g->cursor_fg_color = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	88 87       	std	Y+8, r24	; 0x08
  u8g->cursor_encoding = 34;
     fa4:	82 e2       	ldi	r24, 0x22	; 34
     fa6:	8a 87       	std	Y+10, r24	; 0x0a
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
     fa8:	1f 86       	std	Y+15, r1	; 0x0f
     faa:	1e 86       	std	Y+14, r1	; 0x0e
     fac:	fe 01       	movw	r30, r28
     fae:	b3 96       	adiw	r30, 0x23	; 35
     fb0:	ce 01       	movw	r24, r28
     fb2:	c1 96       	adiw	r24, 0x31	; 49

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	21 93       	st	Z+, r18
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
     fb8:	e8 17       	cp	r30, r24
     fba:	f9 07       	cpc	r31, r25
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <u8g_init_data+0x28>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
     fbe:	11 e0       	ldi	r17, 0x01	; 1
     fc0:	18 a3       	std	Y+32, r17	; 0x20
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
     fc2:	ce 01       	movw	r24, r28
     fc4:	ab df       	rcall	.-170    	; 0xf1c <u8g_SetFontPosBaseline>
     fc6:	1f 8b       	std	Y+23, r17	; 0x17
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
     fc8:	18 8e       	std	Y+24, r1	; 0x18
  u8g->font_ref_ascent = 0;
     fca:	19 8e       	std	Y+25, r1	; 0x19
  u8g->font_ref_descent = 0;
     fcc:	80 e4       	ldi	r24, 0x40	; 64
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
     fce:	8a 8f       	std	Y+26, r24	; 0x1a
     fd0:	1b 8e       	std	Y+27, r1	; 0x1b
  u8g->line_spacing = 0;
     fd2:	8b e0       	ldi	r24, 0x0B	; 11
  
  u8g->state_cb = u8g_state_dummy_cb;
     fd4:	9b e0       	ldi	r25, 0x0B	; 11
     fd6:	9a ab       	std	Y+50, r25	; 0x32
     fd8:	89 ab       	std	Y+49, r24	; 0x31
     fda:	df 91       	pop	r29

}
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	08 95       	ret

00000fe2 <u8g_call_dev_fn>:
#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  return dev->dev_fn(u8g, dev, msg, arg); 
     fe2:	db 01       	movw	r26, r22
     fe4:	ed 91       	ld	r30, X+
     fe6:	fc 91       	ld	r31, X
     fe8:	09 95       	icall
}
     fea:	08 95       	ret

00000fec <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <u8g_InitLL+0xc>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	7c 01       	movw	r14, r24
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
     ffe:	dc 01       	movw	r26, r24
    1000:	d1 96       	adiw	r26, 0x31	; 49
    1002:	ed 91       	ld	r30, X+
    1004:	fc 91       	ld	r31, X
    1006:	d2 97       	sbiw	r26, 0x32	; 50
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	69 83       	std	Y+1, r22	; 0x01
    100c:	7a 83       	std	Y+2, r23	; 0x02
    100e:	09 95       	icall
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a e0       	ldi	r20, 0x0A	; 10
    1016:	69 81       	ldd	r22, Y+1	; 0x01
    1018:	7a 81       	ldd	r23, Y+2	; 0x02
    101a:	c7 01       	movw	r24, r14
    101c:	e2 df       	rcall	.-60     	; 0xfe2 <u8g_call_dev_fn>
    101e:	18 2f       	mov	r17, r24
    1020:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
    1022:	d1 96       	adiw	r26, 0x31	; 49
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	d2 97       	sbiw	r26, 0x32	; 50
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	09 95       	icall
    102e:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1030:	d1 96       	adiw	r26, 0x31	; 49
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	d2 97       	sbiw	r26, 0x32	; 50
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	09 95       	icall
    103c:	81 2f       	mov	r24, r17
  return r;
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	08 95       	ret

0000104e <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	8b 01       	movw	r16, r22
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    105a:	e9 a9       	ldd	r30, Y+49	; 0x31
    105c:	fa a9       	ldd	r31, Y+50	; 0x32
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    1062:	e9 a9       	ldd	r30, Y+49	; 0x31
    1064:	fa a9       	ldd	r31, Y+50	; 0x32
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	09 95       	icall
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	44 e1       	ldi	r20, 0x14	; 20
    1070:	b8 01       	movw	r22, r16
    1072:	ce 01       	movw	r24, r28
    1074:	b6 df       	rcall	.-148    	; 0xfe2 <u8g_call_dev_fn>
    1076:	9e 01       	movw	r18, r28
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1078:	2d 5c       	subi	r18, 0xCD	; 205
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	47 e1       	ldi	r20, 0x17	; 23
    107e:	b8 01       	movw	r22, r16
    1080:	ce 01       	movw	r24, r28
    1082:	af df       	rcall	.-162    	; 0xfe2 <u8g_call_dev_fn>
    1084:	e9 a9       	ldd	r30, Y+49	; 0x31
    1086:	fa a9       	ldd	r31, Y+50	; 0x32
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	09 95       	icall
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
}
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	7b 01       	movw	r14, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    10a4:	e9 a9       	ldd	r30, Y+49	; 0x31
    10a6:	fa a9       	ldd	r31, Y+50	; 0x32
    10a8:	82 e0       	ldi	r24, 0x02	; 2
    10aa:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    10ac:	e9 a9       	ldd	r30, Y+49	; 0x31
    10ae:	fa a9       	ldd	r31, Y+50	; 0x32
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	09 95       	icall
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	45 e1       	ldi	r20, 0x15	; 21
    10ba:	b7 01       	movw	r22, r14
    10bc:	ce 01       	movw	r24, r28
    10be:	91 df       	rcall	.-222    	; 0xfe2 <u8g_call_dev_fn>
    10c0:	18 2f       	mov	r17, r24
    10c2:	88 23       	and	r24, r24
  if ( r != 0 )
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <u8g_NextPageLL+0x3e>
    10c6:	9e 01       	movw	r18, r28
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    10c8:	2d 5c       	subi	r18, 0xCD	; 205
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	47 e1       	ldi	r20, 0x17	; 23
    10ce:	b7 01       	movw	r22, r14
    10d0:	ce 01       	movw	r24, r28
    10d2:	87 df       	rcall	.-242    	; 0xfe2 <u8g_call_dev_fn>
    10d4:	e9 a9       	ldd	r30, Y+49	; 0x31
    10d6:	fa a9       	ldd	r31, Y+50	; 0x32
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	09 95       	icall
    10dc:	81 2f       	mov	r24, r17
    10de:	df 91       	pop	r29
  return r;
}
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	08 95       	ret

000010ea <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
    10ea:	a1 e0       	ldi	r26, 0x01	; 1
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ea e7       	ldi	r30, 0x7A	; 122
    10f0:	f8 e0       	ldi	r31, 0x08	; 8
    10f2:	81 c4       	rjmp	.+2306   	; 0x19f6 <__prologue_saves__+0x20>
    10f4:	9e 01       	movw	r18, r28
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
    10f6:	2f 5f       	subi	r18, 0xFF	; 255
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
    10fa:	46 e4       	ldi	r20, 0x46	; 70
    10fc:	72 df       	rcall	.-284    	; 0xfe2 <u8g_call_dev_fn>
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	21 96       	adiw	r28, 0x01	; 1
  return r;
}
    1102:	e2 e0       	ldi	r30, 0x02	; 2
    1104:	94 c4       	rjmp	.+2344   	; 0x1a2e <__epilogue_restores__+0x20>

00001106 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
    1106:	a1 e0       	ldi	r26, 0x01	; 1
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e8 e8       	ldi	r30, 0x88	; 136
    110c:	f8 e0       	ldi	r31, 0x08	; 8
    110e:	73 c4       	rjmp	.+2278   	; 0x19f6 <__prologue_saves__+0x20>
    1110:	9e 01       	movw	r18, r28
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	47 e4       	ldi	r20, 0x47	; 71
    1118:	64 df       	rcall	.-312    	; 0xfe2 <u8g_call_dev_fn>
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	21 96       	adiw	r28, 0x01	; 1
  return r;
}
    111e:	e2 e0       	ldi	r30, 0x02	; 2
    1120:	86 c4       	rjmp	.+2316   	; 0x1a2e <__epilogue_restores__+0x20>

00001122 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	48 e4       	ldi	r20, 0x48	; 72
    1128:	5c cf       	rjmp	.-328    	; 0xfe2 <u8g_call_dev_fn>

0000112a <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	ec 01       	movw	r28, r24
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
    1130:	6a 81       	ldd	r22, Y+2	; 0x02
    1132:	7b 81       	ldd	r23, Y+3	; 0x03
    1134:	da df       	rcall	.-76     	; 0x10ea <u8g_GetWidthLL>
    1136:	88 83       	st	Y, r24
    1138:	6a 81       	ldd	r22, Y+2	; 0x02
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
    113a:	7b 81       	ldd	r23, Y+3	; 0x03
    113c:	ce 01       	movw	r24, r28
    113e:	e3 df       	rcall	.-58     	; 0x1106 <u8g_GetHeightLL>
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	6a 81       	ldd	r22, Y+2	; 0x02
    1144:	7b 81       	ldd	r23, Y+3	; 0x03
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
    1146:	ce 01       	movw	r24, r28
    1148:	ec df       	rcall	.-40     	; 0x1122 <u8g_GetModeLL>
    114a:	8b 87       	std	Y+11, r24	; 0x0b
    114c:	9e 01       	movw	r18, r28
    114e:	2d 5c       	subi	r18, 0xCD	; 205
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1152:	6a 81       	ldd	r22, Y+2	; 0x02
    1154:	7b 81       	ldd	r23, Y+3	; 0x03
    1156:	47 e1       	ldi	r20, 0x17	; 23
    1158:	ce 01       	movw	r24, r28
    115a:	43 df       	rcall	.-378    	; 0xfe2 <u8g_call_dev_fn>
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    1168:	6a 81       	ldd	r22, Y+2	; 0x02
    116a:	7b 81       	ldd	r23, Y+3	; 0x03
    116c:	3f df       	rcall	.-386    	; 0xfec <u8g_InitLL>
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <u8g_Begin+0x16>
    1172:	ce 01       	movw	r24, r28
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
    1174:	da df       	rcall	.-76     	; 0x112a <u8g_UpdateDimension>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	df 91       	pop	r29
  return 1;
    117a:	cf 91       	pop	r28
}
    117c:	08 95       	ret

0000117e <u8g_InitI2C>:
  
  return u8g_Begin(u8g);
}

uint8_t u8g_InitI2C(u8g_t *u8g, u8g_dev_t *dev, uint8_t options)
{
    117e:	a1 e0       	ldi	r26, 0x01	; 1
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e4 ec       	ldi	r30, 0xC4	; 196
    1184:	f8 e0       	ldi	r31, 0x08	; 8
    1186:	33 c4       	rjmp	.+2150   	; 0x19ee <__prologue_saves__+0x18>
    1188:	7c 01       	movw	r14, r24
    118a:	8b 01       	movw	r16, r22
    118c:	49 83       	std	Y+1, r20	; 0x01
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    118e:	ff de       	rcall	.-514    	; 0xf8e <u8g_init_data>
    1190:	f7 01       	movw	r30, r14
    1192:	13 83       	std	Z+3, r17	; 0x03
  u8g->dev = dev;
    1194:	02 83       	std	Z+2, r16	; 0x02
    1196:	49 81       	ldd	r20, Y+1	; 0x01
    1198:	46 a7       	std	Z+46, r20	; 0x2e
    
  u8g->pin_list[U8G_PI_I2C_OPTION] = options;
    119a:	c7 01       	movw	r24, r14
    119c:	e2 df       	rcall	.-60     	; 0x1162 <u8g_Begin>
  
  return u8g_Begin(u8g);
    119e:	21 96       	adiw	r28, 0x01	; 1
    11a0:	e6 e0       	ldi	r30, 0x06	; 6
    11a2:	41 c4       	rjmp	.+2178   	; 0x1a26 <__epilogue_restores__+0x18>

000011a4 <u8g_FirstPage>:
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
  u8g_FirstPageLL(u8g, u8g->dev);
    11a4:	fc 01       	movw	r30, r24
    11a6:	62 81       	ldd	r22, Z+2	; 0x02
    11a8:	73 81       	ldd	r23, Z+3	; 0x03
    11aa:	51 cf       	rjmp	.-350    	; 0x104e <u8g_FirstPageLL>

000011ac <u8g_NextPage>:
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
    11b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    11b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    11b6:	30 97       	sbiw	r30, 0x00	; 0
    11b8:	09 f0       	breq	.+2      	; 0x11bc <u8g_NextPage+0x10>
  {
    u8g->cursor_fn(u8g);
    11ba:	09 95       	icall
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    11bc:	6a 81       	ldd	r22, Y+2	; 0x02
    11be:	7b 81       	ldd	r23, Y+3	; 0x03
    11c0:	ce 01       	movw	r24, r28
    11c2:	69 df       	rcall	.-302    	; 0x1096 <u8g_NextPageLL>
    11c4:	df 91       	pop	r29
}
    11c6:	cf 91       	pop	r28
    11c8:	08 95       	ret

000011ca <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    11ca:	0f 93       	push	r16
    11cc:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    11d2:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    11d4:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    11d6:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    11d8:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    11da:	9f 01       	movw	r18, r30
    11dc:	24 5e       	subi	r18, 0xE4	; 228
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    11e0:	4b e3       	ldi	r20, 0x3B	; 59
    11e2:	bc 01       	movw	r22, r24
    11e4:	cf 01       	movw	r24, r30
    11e6:	fd de       	rcall	.-518    	; 0xfe2 <u8g_call_dev_fn>
    11e8:	0f 91       	pop	r16
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    11ea:	08 95       	ret

000011ec <u8g_SetColorIndex>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    11ec:	fc 01       	movw	r30, r24
    11ee:	60 a3       	std	Z+32, r22	; 0x20
    11f0:	08 95       	ret

000011f2 <u8g_GetDefaultForegroundColor>:
}

uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
    11f2:	fc 01       	movw	r30, r24
    11f4:	83 85       	ldd	r24, Z+11	; 0x0b
  if ( mode == U8G_MODE_R3G3B2 ) 
    11f6:	88 32       	cpi	r24, 0x28	; 40
    11f8:	21 f0       	breq	.+8      	; 0x1202 <u8g_GetDefaultForegroundColor+0x10>
    return 255;     /* white */
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	21 f0       	breq	.+8      	; 0x1206 <u8g_GetDefaultForegroundColor+0x14>
    return 3;         /* max intensity */
  /* if ( u8g.getMode() == U8G_MODE_BW ) */
  return 1;         /* pixel on */
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	08 95       	ret
uint8_t u8g_GetDefaultForegroundColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
    return 255;     /* white */
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	08 95       	ret
  else if ( u8g_GetMode(u8g) == U8G_MODE_GRAY2BIT )
    return 3;         /* max intensity */
    1206:	83 e0       	ldi	r24, 0x03	; 3
  /* if ( u8g.getMode() == U8G_MODE_BW ) */
  return 1;         /* pixel on */
}
    1208:	08 95       	ret

0000120a <u8g_SetDefaultForegroundColor>:

void u8g_SetDefaultForegroundColor(u8g_t *u8g)
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	fc 01       	movw	r30, r24
  if ( u8g->mode == U8G_MODE_HICOLOR )
    1210:	83 85       	ldd	r24, Z+11	; 0x0b
    1212:	80 33       	cpi	r24, 0x30	; 48
    1214:	21 f4       	brne	.+8      	; 0x121e <u8g_SetDefaultForegroundColor+0x14>
  {
    u8g->arg_pixel.color = 0x0ff;
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	80 a3       	std	Z+32, r24	; 0x20
    u8g->arg_pixel.hi_color = 0x0ff;
    121a:	81 a3       	std	Z+33, r24	; 0x21
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <u8g_SetDefaultForegroundColor+0x1c>
    121e:	ef 01       	movw	r28, r30
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
    1220:	cf 01       	movw	r24, r30
    1222:	e7 df       	rcall	.-50     	; 0x11f2 <u8g_GetDefaultForegroundColor>
    1224:	88 a3       	std	Y+32, r24	; 0x20
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    1226:	df 91       	pop	r29
  }
  else
  {
    u8g_SetColorIndex(u8g, u8g_GetDefaultForegroundColor(u8g));
  }
}
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <u8g_SetDefaultBackgroundColor>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    122c:	fc 01       	movw	r30, r24
    122e:	10 a2       	std	Z+32, r1	; 0x20
    1230:	08 95       	ret

00001232 <u8g_pb8v2_set_pixel>:
}

void u8g_pb8v2_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
    1232:	dc 01       	movw	r26, r24
    1234:	16 96       	adiw	r26, 0x06	; 6
    1236:	ed 91       	ld	r30, X+
    1238:	fc 91       	ld	r31, X
    123a:	17 97       	sbiw	r26, 0x07	; 7
  y -= b->p.page_y0;
    123c:	12 96       	adiw	r26, 0x02	; 2
    123e:	8c 91       	ld	r24, X
    1240:	48 1b       	sub	r20, r24
  mask = 0x03;
  y &= 0x03;
    1242:	43 70       	andi	r20, 0x03	; 3
  y <<= 1;
    1244:	44 0f       	add	r20, r20
  mask <<= y;
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	04 2e       	mov	r0, r20
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <u8g_pb8v2_set_pixel+0x1e>
    124e:	88 0f       	add	r24, r24
    1250:	0a 94       	dec	r0
    1252:	ea f7       	brpl	.-6      	; 0x124e <u8g_pb8v2_set_pixel+0x1c>
  mask ^=0xff;
  color_index &= 3;
    1254:	23 70       	andi	r18, 0x03	; 3
  color_index <<= y;
    1256:	32 2f       	mov	r19, r18
    1258:	01 c0       	rjmp	.+2      	; 0x125c <u8g_pb8v2_set_pixel+0x2a>
    125a:	33 0f       	add	r19, r19
    125c:	4a 95       	dec	r20
    125e:	ea f7       	brpl	.-6      	; 0x125a <u8g_pb8v2_set_pixel+0x28>
  ptr += x;
    1260:	e6 0f       	add	r30, r22
    1262:	f1 1d       	adc	r31, r1
  y -= b->p.page_y0;
  mask = 0x03;
  y &= 0x03;
  y <<= 1;
  mask <<= y;
  mask ^=0xff;
    1264:	80 95       	com	r24
  color_index &= 3;
  color_index <<= y;
  ptr += x;
  *ptr &= mask;
    1266:	90 81       	ld	r25, Z
    1268:	89 23       	and	r24, r25
  *ptr |= color_index;
    126a:	23 2f       	mov	r18, r19
    126c:	28 2b       	or	r18, r24
    126e:	20 83       	st	Z, r18
    1270:	08 95       	ret

00001272 <u8g_pb8v2_SetPixel>:
}


void u8g_pb8v2_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
    1272:	fc 01       	movw	r30, r24
    1274:	db 01       	movw	r26, r22
  if ( arg_pixel->y < b->p.page_y0 )
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	4c 91       	ld	r20, X
    127a:	11 97       	sbiw	r26, 0x01	; 1
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	48 17       	cp	r20, r24
    1280:	58 f0       	brcs	.+22     	; 0x1298 <u8g_pb8v2_SetPixel+0x26>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
    1282:	83 81       	ldd	r24, Z+3	; 0x03
    1284:	84 17       	cp	r24, r20
    1286:	40 f0       	brcs	.+16     	; 0x1298 <u8g_pb8v2_SetPixel+0x26>
    return;
  if ( arg_pixel->x >= b->width )
    1288:	6c 91       	ld	r22, X
    128a:	85 81       	ldd	r24, Z+5	; 0x05
    128c:	68 17       	cp	r22, r24
    128e:	20 f4       	brcc	.+8      	; 0x1298 <u8g_pb8v2_SetPixel+0x26>
    1290:	cf 01       	movw	r24, r30
    return;
  u8g_pb8v2_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
    1292:	14 96       	adiw	r26, 0x04	; 4
    1294:	2c 91       	ld	r18, X
    1296:	cd cf       	rjmp	.-102    	; 0x1232 <u8g_pb8v2_set_pixel>
    1298:	08 95       	ret

0000129a <u8g_pb8v2_Set8PixelStd>:
}


void u8g_pb8v2_Set8PixelStd(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	7c 01       	movw	r14, r24
    12a6:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    12a8:	1a 81       	ldd	r17, Y+2	; 0x02
  do
  {
    if ( pixel & 128 )
    12aa:	17 ff       	sbrs	r17, 7
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <u8g_pb8v2_Set8PixelStd+0x1a>
    {
      u8g_pb8v2_SetPixel(b, arg_pixel);
    12ae:	be 01       	movw	r22, r28
    12b0:	c7 01       	movw	r24, r14
    12b2:	df df       	rcall	.-66     	; 0x1272 <u8g_pb8v2_SetPixel>
    12b4:	9b 81       	ldd	r25, Y+3	; 0x03
    }
    switch( arg_pixel->dir )
    12b6:	91 30       	cpi	r25, 0x01	; 1
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <u8g_pb8v2_Set8PixelStd+0x38>
    12ba:	38 f0       	brcs	.+14     	; 0x12ca <u8g_pb8v2_Set8PixelStd+0x30>
    12bc:	92 30       	cpi	r25, 0x02	; 2
    12be:	61 f0       	breq	.+24     	; 0x12d8 <u8g_pb8v2_Set8PixelStd+0x3e>
    12c0:	93 30       	cpi	r25, 0x03	; 3
    12c2:	79 f4       	brne	.+30     	; 0x12e2 <u8g_pb8v2_Set8PixelStd+0x48>
    12c4:	99 81       	ldd	r25, Y+1	; 0x01
    {
      case 0: arg_pixel->x++; break;
      case 1: arg_pixel->y++; break;
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    12c6:	91 50       	subi	r25, 0x01	; 1
    12c8:	0b c0       	rjmp	.+22     	; 0x12e0 <u8g_pb8v2_Set8PixelStd+0x46>
    12ca:	88 81       	ld	r24, Y
    {
      u8g_pb8v2_SetPixel(b, arg_pixel);
    }
    switch( arg_pixel->dir )
    {
      case 0: arg_pixel->x++; break;
    12cc:	8f 5f       	subi	r24, 0xFF	; 255
    12ce:	88 83       	st	Y, r24
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <u8g_pb8v2_Set8PixelStd+0x48>
    12d2:	99 81       	ldd	r25, Y+1	; 0x01
      case 1: arg_pixel->y++; break;
    12d4:	9f 5f       	subi	r25, 0xFF	; 255
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <u8g_pb8v2_Set8PixelStd+0x46>
    12d8:	98 81       	ld	r25, Y
      case 2: arg_pixel->x--; break;
    12da:	91 50       	subi	r25, 0x01	; 1
    12dc:	98 83       	st	Y, r25
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <u8g_pb8v2_Set8PixelStd+0x48>
    12e0:	99 83       	std	Y+1, r25	; 0x01
      case 3: arg_pixel->y--; break;
    12e2:	11 0f       	add	r17, r17
    }
    pixel <<= 1;
    12e4:	11 f7       	brne	.-60     	; 0x12aa <u8g_pb8v2_Set8PixelStd+0x10>
  } while( pixel != 0  );
    12e6:	df 91       	pop	r29

}
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	08 95       	ret

000012f2 <u8g_dev_pb8v2_base_fn>:



uint8_t u8g_dev_pb8v2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    12fc:	fb 01       	movw	r30, r22
    12fe:	c2 81       	ldd	r28, Z+2	; 0x02
    1300:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    1302:	42 33       	cpi	r20, 0x32	; 50
    1304:	09 f1       	breq	.+66     	; 0x1348 <u8g_dev_pb8v2_base_fn+0x56>
    1306:	58 f4       	brcc	.+22     	; 0x131e <u8g_dev_pb8v2_base_fn+0x2c>
    1308:	45 31       	cpi	r20, 0x15	; 21
    130a:	11 f1       	breq	.+68     	; 0x1350 <u8g_dev_pb8v2_base_fn+0x5e>
    130c:	47 31       	cpi	r20, 0x17	; 23
    130e:	39 f1       	breq	.+78     	; 0x135e <u8g_dev_pb8v2_base_fn+0x6c>
    1310:	44 31       	cpi	r20, 0x14	; 20
    1312:	71 f5       	brne	.+92     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    1314:	ce 01       	movw	r24, r28
    1316:	32 d0       	rcall	.+100    	; 0x137c <u8g_pb_Clear>
    1318:	ce 01       	movw	r24, r28
      u8g_page_First(&(pb->p));
    131a:	40 d3       	rcall	.+1664   	; 0x199c <u8g_page_First>
    131c:	29 c0       	rjmp	.+82     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    131e:	46 34       	cpi	r20, 0x46	; 70
    1320:	11 f1       	breq	.+68     	; 0x1366 <u8g_dev_pb8v2_base_fn+0x74>


uint8_t u8g_dev_pb8v2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    1322:	18 f4       	brcc	.+6      	; 0x132a <u8g_dev_pb8v2_base_fn+0x38>
    1324:	4b 33       	cpi	r20, 0x3B	; 59
    1326:	39 f0       	breq	.+14     	; 0x1336 <u8g_dev_pb8v2_base_fn+0x44>
    1328:	23 c0       	rjmp	.+70     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    132a:	47 34       	cpi	r20, 0x47	; 71
    132c:	f1 f0       	breq	.+60     	; 0x136a <u8g_dev_pb8v2_base_fn+0x78>
    132e:	48 34       	cpi	r20, 0x48	; 72
    1330:	f9 f4       	brne	.+62     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	1e c0       	rjmp	.+60     	; 0x1372 <u8g_dev_pb8v2_base_fn+0x80>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
    1336:	b9 01       	movw	r22, r18
    1338:	ce 01       	movw	r24, r28
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    133a:	56 d0       	rcall	.+172    	; 0x13e8 <u8g_pb_Is8PixelVisible>
    133c:	88 23       	and	r24, r24
    133e:	c1 f0       	breq	.+48     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    1340:	b8 01       	movw	r22, r16
    1342:	ce 01       	movw	r24, r28
    1344:	aa df       	rcall	.-172    	; 0x129a <u8g_pb8v2_Set8PixelStd>
      {
        u8g_pb8v2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    1348:	b9 01       	movw	r22, r18
    134a:	ce 01       	movw	r24, r28
    134c:	92 df       	rcall	.-220    	; 0x1272 <u8g_pb8v2_SetPixel>
    134e:	10 c0       	rjmp	.+32     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
      }
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8v2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    1350:	ce 01       	movw	r24, r28
    1352:	2b d3       	rcall	.+1622   	; 0x19aa <u8g_page_Next>
    1354:	88 23       	and	r24, r24
    1356:	69 f0       	breq	.+26     	; 0x1372 <u8g_dev_pb8v2_base_fn+0x80>
    1358:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    135a:	10 d0       	rcall	.+32     	; 0x137c <u8g_pb_Clear>
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    135e:	b9 01       	movw	r22, r18
    1360:	ce 01       	movw	r24, r28
    1362:	32 d0       	rcall	.+100    	; 0x13c8 <u8g_pb_GetPageBox>
        return 0;
      u8g_pb_Clear(pb);
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <u8g_dev_pb8v2_base_fn+0x7e>
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	01 c0       	rjmp	.+2      	; 0x136c <u8g_dev_pb8v2_base_fn+0x7a>
    136a:	89 81       	ldd	r24, Y+1	; 0x01
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    136c:	f8 01       	movw	r30, r16
    136e:	80 83       	st	Z, r24
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    137a:	08 95       	ret

0000137c <u8g_pb_Clear>:

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
    137c:	dc 01       	movw	r26, r24
    137e:	16 96       	adiw	r26, 0x06	; 6
    1380:	ed 91       	ld	r30, X+
    1382:	fc 91       	ld	r31, X
    1384:	17 97       	sbiw	r26, 0x07	; 7
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
    1386:	15 96       	adiw	r26, 0x05	; 5
    1388:	8c 91       	ld	r24, X
    138a:	9f 01       	movw	r18, r30
    138c:	28 0f       	add	r18, r24
    138e:	31 1d       	adc	r19, r1
    1390:	c9 01       	movw	r24, r18
  do
  {
    *ptr++ = 0;
    1392:	11 92       	st	Z+, r1
  } while( ptr != end_ptr );
    1394:	e8 17       	cp	r30, r24
    1396:	f9 07       	cpc	r31, r25
    1398:	e1 f7       	brne	.-8      	; 0x1392 <u8g_pb_Clear+0x16>
}
    139a:	08 95       	ret

0000139c <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
    139c:	fc 01       	movw	r30, r24
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	86 17       	cp	r24, r22
    13a4:	08 f4       	brcc	.+2      	; 0x13a8 <u8g_pb_IsYIntersection+0xc>
    13a6:	90 e0       	ldi	r25, 0x00	; 0
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
    13a8:	31 e0       	ldi	r19, 0x01	; 1
    13aa:	46 17       	cp	r20, r22
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <u8g_pb_IsYIntersection+0x14>
    13ae:	30 e0       	ldi	r19, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    13b0:	83 2f       	mov	r24, r19
    13b2:	89 2b       	or	r24, r25

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
    13b4:	21 e0       	ldi	r18, 0x01	; 1
    13b6:	52 81       	ldd	r21, Z+2	; 0x02
    13b8:	45 17       	cp	r20, r21
    13ba:	08 f4       	brcc	.+2      	; 0x13be <u8g_pb_IsYIntersection+0x22>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    13be:	28 23       	and	r18, r24
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
    13c0:	83 2f       	mov	r24, r19
    13c2:	89 23       	and	r24, r25
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
}
    13c4:	82 2b       	or	r24, r18
    13c6:	08 95       	ret

000013c8 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    13c8:	dc 01       	movw	r26, r24
    13ca:	fb 01       	movw	r30, r22
  box->x0 = 0;
    13cc:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	8c 91       	ld	r24, X
    13d2:	12 97       	sbiw	r26, 0x02	; 2
    13d4:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    13d6:	15 96       	adiw	r26, 0x05	; 5
    13d8:	8c 91       	ld	r24, X
    13da:	15 97       	sbiw	r26, 0x05	; 5
    13dc:	81 50       	subi	r24, 0x01	; 1
    13de:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    13e0:	13 96       	adiw	r26, 0x03	; 3
    13e2:	8c 91       	ld	r24, X
    13e4:	83 83       	std	Z+3, r24	; 0x03
    13e6:	08 95       	ret

000013e8 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    13e8:	fb 01       	movw	r30, r22
    13ea:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    13ec:	23 81       	ldd	r18, Z+3	; 0x03
    13ee:	21 30       	cpi	r18, 0x01	; 1
    13f0:	29 f0       	breq	.+10     	; 0x13fc <u8g_pb_Is8PixelVisible+0x14>
    13f2:	23 30       	cpi	r18, 0x03	; 3
    13f4:	31 f4       	brne	.+12     	; 0x1402 <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    13f6:	68 ef       	ldi	r22, 0xF8	; 248
    13f8:	64 0f       	add	r22, r20
      break;
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    13fc:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    13fe:	48 5f       	subi	r20, 0xF8	; 248
      break;
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    1402:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    1404:	cb cf       	rjmp	.-106    	; 0x139c <u8g_pb_IsYIntersection>

00001406 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e8 e0       	ldi	r30, 0x08	; 8
    140c:	fa e0       	ldi	r31, 0x0A	; 10
    140e:	ed c2       	rjmp	.+1498   	; 0x19ea <__prologue_saves__+0x14>
    1410:	7c 01       	movw	r14, r24
    1412:	d6 2f       	mov	r29, r22
    1414:	d4 2e       	mov	r13, r20
    1416:	c2 2f       	mov	r28, r18
    1418:	12 2f       	mov	r17, r18
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    141a:	c6 2e       	mov	r12, r22
    141c:	c2 0e       	add	r12, r18
    141e:	6c 2d       	mov	r22, r12
    1420:	61 1b       	sub	r22, r17
    1422:	18 30       	cpi	r17, 0x08	; 8
    1424:	38 f0       	brcs	.+14     	; 0x1434 <u8g_draw_hline+0x2e>
    1426:	0f ef       	ldi	r16, 0xFF	; 255
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	4d 2d       	mov	r20, r13
    142c:	c7 01       	movw	r24, r14
    142e:	cd de       	rcall	.-614    	; 0x11ca <u8g_Draw8Pixel>
    1430:	18 50       	subi	r17, 0x08	; 8
    1432:	f5 cf       	rjmp	.-22     	; 0x141e <u8g_draw_hline+0x18>
    w-=8;
    1434:	6c 2f       	mov	r22, r28
    1436:	68 7f       	andi	r22, 0xF8	; 248
    1438:	6d 0f       	add	r22, r29
    143a:	2c 2f       	mov	r18, r28
    143c:	27 70       	andi	r18, 0x07	; 7
    143e:	79 f0       	breq	.+30     	; 0x145e <u8g_draw_hline+0x58>
    1440:	97 e0       	ldi	r25, 0x07	; 7
    x+=8;
  }
  if ( w != 0 )
    1442:	29 27       	eor	r18, r25
  {
    w ^=7;
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	27 70       	andi	r18, 0x07	; 7
    w++;
    1448:	0f ef       	ldi	r16, 0xFF	; 255
    pixel <<= w&7;
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <u8g_draw_hline+0x4c>
    144e:	00 0f       	add	r16, r16
    1450:	11 1f       	adc	r17, r17
    1452:	2a 95       	dec	r18
    1454:	e2 f7       	brpl	.-8      	; 0x144e <u8g_draw_hline+0x48>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	4d 2d       	mov	r20, r13
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    145a:	c7 01       	movw	r24, r14
    145c:	b6 de       	rcall	.-660    	; 0x11ca <u8g_Draw8Pixel>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	e8 e0       	ldi	r30, 0x08	; 8
  }
}
    1464:	de c2       	rjmp	.+1468   	; 0x1a22 <__epilogue_restores__+0x14>

00001466 <u8g_draw_box>:
  y--;
  u8g_draw_hline(u8g, xtmp, y, w);
}

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	7c 01       	movw	r14, r24
    1474:	d6 2f       	mov	r29, r22
    1476:	12 2f       	mov	r17, r18
    1478:	c4 2f       	mov	r28, r20
    147a:	04 0f       	add	r16, r20
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
    147c:	21 2f       	mov	r18, r17
    147e:	4c 2f       	mov	r20, r28
    1480:	6d 2f       	mov	r22, r29
    1482:	c7 01       	movw	r24, r14
    1484:	c0 df       	rcall	.-128    	; 0x1406 <u8g_draw_hline>
    1486:	cf 5f       	subi	r28, 0xFF	; 255
    y++;    
    1488:	0c 13       	cpse	r16, r28
    h--;
  } while( h != 0 );
    148a:	f8 cf       	rjmp	.-16     	; 0x147c <u8g_draw_box+0x16>
    148c:	cd b7       	in	r28, 0x3d	; 61
}
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	e6 e0       	ldi	r30, 0x06	; 6
    1492:	c9 c2       	rjmp	.+1426   	; 0x1a26 <__epilogue_restores__+0x18>

00001494 <u8g_DrawBox>:

/* restrictions: h > 0 */
void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ef e4       	ldi	r30, 0x4F	; 79
    149a:	fa e0       	ldi	r31, 0x0A	; 10
    149c:	a7 c2       	rjmp	.+1358   	; 0x19ec <__prologue_saves__+0x16>
    149e:	ec 01       	movw	r28, r24
    14a0:	16 2f       	mov	r17, r22
    14a2:	f4 2e       	mov	r15, r20
    14a4:	e2 2e       	mov	r14, r18
    14a6:	d0 2e       	mov	r13, r16
    14a8:	b7 d0       	rcall	.+366    	; 0x1618 <u8g_IsBBXIntersection>
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    14aa:	88 23       	and	r24, r24
    14ac:	29 f0       	breq	.+10     	; 0x14b8 <u8g_DrawBox+0x24>
    14ae:	2e 2d       	mov	r18, r14
    14b0:	4f 2d       	mov	r20, r15
    return;
  u8g_draw_box(u8g, x, y, w, h);
    14b2:	61 2f       	mov	r22, r17
    14b4:	ce 01       	movw	r24, r28
    14b6:	d7 df       	rcall	.-82     	; 0x1466 <u8g_draw_box>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	e7 e0       	ldi	r30, 0x07	; 7
}
    14be:	b2 c2       	rjmp	.+1380   	; 0x1a24 <__epilogue_restores__+0x16>

000014c0 <u8g_dev_rot_dummy_fn>:
uint8_t u8g_dev_rot270_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg);

uint8_t u8g_dev_rot_dummy_fn(void *u8g, void *dev, uint8_t msg, void *arg)
{
  return 0;
}
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <u8g_dev_rot180_fn>:
  }
  return 1;
}

uint8_t u8g_dev_rot180_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	bf 92       	push	r11
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	1f 92       	push	r1
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	8c 01       	movw	r16, r24
    14e2:	49 01       	movw	r8, r18
  u8g_dev_t *rotation_chain = (u8g_dev_t *)(dev->dev_mem);
    14e4:	fb 01       	movw	r30, r22
    14e6:	e2 80       	ldd	r14, Z+2	; 0x02
    14e8:	f3 80       	ldd	r15, Z+3	; 0x03
  switch(msg)
    14ea:	42 33       	cpi	r20, 0x32	; 50
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <u8g_dev_rot180_fn+0x2c>
    14ee:	42 c0       	rjmp	.+132    	; 0x1574 <u8g_dev_rot180_fn+0xb0>
    14f0:	48 f4       	brcc	.+18     	; 0x1504 <u8g_dev_rot180_fn+0x40>
    14f2:	4c 32       	cpi	r20, 0x2C	; 44
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <u8g_dev_rot180_fn+0x34>
    14f6:	3e c0       	rjmp	.+124    	; 0x1574 <u8g_dev_rot180_fn+0xb0>
    14f8:	4d 32       	cpi	r20, 0x2D	; 45
    14fa:	09 f4       	brne	.+2      	; 0x14fe <u8g_dev_rot180_fn+0x3a>
    14fc:	4d c0       	rjmp	.+154    	; 0x1598 <u8g_dev_rot180_fn+0xd4>
    14fe:	47 31       	cpi	r20, 0x17	; 23
    1500:	69 f0       	breq	.+26     	; 0x151c <u8g_dev_rot180_fn+0x58>
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <u8g_dev_rot180_fn+0x4e>
    1504:	46 34       	cpi	r20, 0x46	; 70
    1506:	71 f1       	breq	.+92     	; 0x1564 <u8g_dev_rot180_fn+0xa0>
    1508:	47 34       	cpi	r20, 0x47	; 71
    150a:	79 f1       	breq	.+94     	; 0x156a <u8g_dev_rot180_fn+0xa6>
    150c:	4b 33       	cpi	r20, 0x3B	; 59
    150e:	09 f4       	brne	.+2      	; 0x1512 <u8g_dev_rot180_fn+0x4e>
    1510:	43 c0       	rjmp	.+134    	; 0x1598 <u8g_dev_rot180_fn+0xd4>
    case U8G_DEV_MSG_PAGE_FIRST:
    case U8G_DEV_MSG_PAGE_NEXT:
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
    case U8G_DEV_MSG_SET_XY_CB:
    */
      return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
    1512:	94 01       	movw	r18, r8
    1514:	b7 01       	movw	r22, r14
    1516:	c8 01       	movw	r24, r16
    1518:	64 dd       	rcall	.-1336   	; 0xfe2 <u8g_call_dev_fn>
    151a:	59 c0       	rjmp	.+178    	; 0x15ce <u8g_dev_rot180_fn+0x10a>
    151c:	47 e1       	ldi	r20, 0x17	; 23
      }
      return u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
#endif /* U8G_DEV_MSG_IS_BBX_INTERSECTION */
    case U8G_DEV_MSG_GET_PAGE_BOX:
      /* get page size from next device in the chain */
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
    151e:	b7 01       	movw	r22, r14
    1520:	60 dd       	rcall	.-1344   	; 0xfe2 <u8g_call_dev_fn>
    1522:	b7 01       	movw	r22, r14
    1524:	c8 01       	movw	r24, r16
      //printf("pre x: %3d..%3d y: %3d..%3d   ", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
      {
	u8g_box_t new_box;
	
	new_box.x0 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x1 - 1;
    1526:	e1 dd       	rcall	.-1086   	; 0x10ea <u8g_GetWidthLL>
    1528:	f4 01       	movw	r30, r8
    152a:	b2 80       	ldd	r11, Z+2	; 0x02
    152c:	b0 94       	com	r11
    152e:	b8 0e       	add	r11, r24
    1530:	b7 01       	movw	r22, r14
    1532:	c8 01       	movw	r24, r16
    1534:	da dd       	rcall	.-1100   	; 0x10ea <u8g_GetWidthLL>
	new_box.x1 = u8g_GetWidthLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->x0 - 1;
    1536:	f4 01       	movw	r30, r8
    1538:	d0 80       	ld	r13, Z
    153a:	d0 94       	com	r13
    153c:	d8 0e       	add	r13, r24
    153e:	b7 01       	movw	r22, r14
    1540:	c8 01       	movw	r24, r16
    1542:	e1 dd       	rcall	.-1086   	; 0x1106 <u8g_GetHeightLL>
    1544:	f4 01       	movw	r30, r8
	new_box.y0 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y1 - 1;
    1546:	c3 80       	ldd	r12, Z+3	; 0x03
    1548:	c0 94       	com	r12
    154a:	c8 0e       	add	r12, r24
    154c:	b7 01       	movw	r22, r14
    154e:	c8 01       	movw	r24, r16
    1550:	da dd       	rcall	.-1100   	; 0x1106 <u8g_GetHeightLL>
    1552:	f4 01       	movw	r30, r8
    1554:	91 81       	ldd	r25, Z+1	; 0x01
	new_box.y1 = u8g_GetHeightLL(u8g,rotation_chain) - ((u8g_box_t *)arg)->y0 - 1;
    1556:	90 95       	com	r25
    1558:	89 0f       	add	r24, r25
    155a:	b0 82       	st	Z, r11
    155c:	c1 82       	std	Z+1, r12	; 0x01
    155e:	d2 82       	std	Z+2, r13	; 0x02
    1560:	83 83       	std	Z+3, r24	; 0x03
    1562:	34 c0       	rjmp	.+104    	; 0x15cc <u8g_dev_rot180_fn+0x108>
    1564:	b7 01       	movw	r22, r14
	*((u8g_box_t *)arg) = new_box;
    1566:	c1 dd       	rcall	.-1150   	; 0x10ea <u8g_GetWidthLL>
    1568:	02 c0       	rjmp	.+4      	; 0x156e <u8g_dev_rot180_fn+0xaa>
    156a:	b7 01       	movw	r22, r14
    156c:	cc dd       	rcall	.-1128   	; 0x1106 <u8g_GetHeightLL>
    156e:	f4 01       	movw	r30, r8
	//printf("post x: %3d..%3d y: %3d..%3d\n", ((u8g_box_t *)arg)->x0, ((u8g_box_t *)arg)->x1, ((u8g_box_t *)arg)->y0, ((u8g_box_t *)arg)->y1);
      }
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = u8g_GetWidthLL(u8g,rotation_chain);
    1570:	80 83       	st	Z, r24
    1572:	2c c0       	rjmp	.+88     	; 0x15cc <u8g_dev_rot180_fn+0x108>
    1574:	b7 01       	movw	r22, r14
    1576:	c8 01       	movw	r24, r16
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = u8g_GetHeightLL(u8g, rotation_chain);
    1578:	49 83       	std	Y+1, r20	; 0x01
    157a:	c5 dd       	rcall	.-1142   	; 0x1106 <u8g_GetHeightLL>
    157c:	f4 01       	movw	r30, r8
    157e:	d1 80       	ldd	r13, Z+1	; 0x01
    1580:	d0 94       	com	r13
    1582:	d8 0e       	add	r13, r24
    case U8G_DEV_MSG_SET_PIXEL:
    case U8G_DEV_MSG_SET_TPIXEL:
      {
        u8g_uint_t x, y;

        y = u8g_GetHeightLL(u8g, rotation_chain);
    1584:	b7 01       	movw	r22, r14
    1586:	c8 01       	movw	r24, r16
    1588:	b0 dd       	rcall	.-1184   	; 0x10ea <u8g_GetWidthLL>
    158a:	f4 01       	movw	r30, r8
    158c:	90 81       	ld	r25, Z
    158e:	90 95       	com	r25
    1590:	89 0f       	add	r24, r25
    1592:	80 83       	st	Z, r24
        y -= ((u8g_dev_arg_pixel_t *)arg)->y; 
        y--;
    1594:	d1 82       	std	Z+1, r13	; 0x01
        
        x = u8g_GetWidthLL(u8g, rotation_chain);
    1596:	15 c0       	rjmp	.+42     	; 0x15c2 <u8g_dev_rot180_fn+0xfe>
    1598:	b7 01       	movw	r22, r14
    159a:	c8 01       	movw	r24, r16
    159c:	49 83       	std	Y+1, r20	; 0x01
    159e:	b3 dd       	rcall	.-1178   	; 0x1106 <u8g_GetHeightLL>
    15a0:	f4 01       	movw	r30, r8
    15a2:	d1 80       	ldd	r13, Z+1	; 0x01
        x -= ((u8g_dev_arg_pixel_t *)arg)->x; 
        x--;
    15a4:	d0 94       	com	r13
        
        ((u8g_dev_arg_pixel_t *)arg)->x = x;
    15a6:	d8 0e       	add	r13, r24
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
    15a8:	b7 01       	movw	r22, r14
    15aa:	c8 01       	movw	r24, r16
    case U8G_DEV_MSG_SET_8PIXEL:
    case U8G_DEV_MSG_SET_4TPIXEL:
      {
        u8g_uint_t x, y;
        
        y = u8g_GetHeightLL(u8g, rotation_chain);
    15ac:	9e dd       	rcall	.-1220   	; 0x10ea <u8g_GetWidthLL>
    15ae:	f4 01       	movw	r30, r8
    15b0:	90 81       	ld	r25, Z
    15b2:	90 95       	com	r25
    15b4:	89 0f       	add	r24, r25
    15b6:	80 83       	st	Z, r24
    15b8:	d1 82       	std	Z+1, r13	; 0x01
    15ba:	83 81       	ldd	r24, Z+3	; 0x03
        y -= ((u8g_dev_arg_pixel_t *)arg)->y; 
        y--;
    15bc:	8e 5f       	subi	r24, 0xFE	; 254
        
        x = u8g_GetWidthLL(u8g, rotation_chain);
    15be:	83 70       	andi	r24, 0x03	; 3
    15c0:	83 83       	std	Z+3, r24	; 0x03
    15c2:	94 01       	movw	r18, r8
    15c4:	49 81       	ldd	r20, Y+1	; 0x01
    15c6:	b7 01       	movw	r22, r14
    15c8:	c8 01       	movw	r24, r16
    15ca:	0b dd       	rcall	.-1514   	; 0xfe2 <u8g_call_dev_fn>
        x -= ((u8g_dev_arg_pixel_t *)arg)->x; 
        x--;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
        
        ((u8g_dev_arg_pixel_t *)arg)->x = x;
    15ce:	0f 90       	pop	r0
        ((u8g_dev_arg_pixel_t *)arg)->y = y;
    15d0:	df 91       	pop	r29
        ((u8g_dev_arg_pixel_t *)arg)->dir+=2;
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
        ((u8g_dev_arg_pixel_t *)arg)->dir &= 3;
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
      }
      u8g_call_dev_fn(u8g, rotation_chain, msg, arg);
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	bf 90       	pop	r11
    15e2:	9f 90       	pop	r9
    15e4:	8f 90       	pop	r8
      break;
  }
  return 1;
    15e6:	08 95       	ret

000015e8 <u8g_SetRot180>:
  u8g_UpdateDimension(u8g);
}

void u8g_SetRot180(u8g_t *u8g)
{
  if ( u8g->dev != &u8g_dev_rot )
    15e8:	fc 01       	movw	r30, r24
    15ea:	22 81       	ldd	r18, Z+2	; 0x02
    15ec:	33 81       	ldd	r19, Z+3	; 0x03
    15ee:	f1 e0       	ldi	r31, 0x01	; 1
    15f0:	26 31       	cpi	r18, 0x16	; 22
    15f2:	3f 07       	cpc	r19, r31
    15f4:	49 f0       	breq	.+18     	; 0x1608 <u8g_SetRot180+0x20>
  {
    u8g_dev_rot.dev_mem = u8g->dev;
    15f6:	30 93 19 01 	sts	0x0119, r19
    15fa:	20 93 18 01 	sts	0x0118, r18
    u8g->dev = &u8g_dev_rot;
    15fe:	26 e1       	ldi	r18, 0x16	; 22
    1600:	31 e0       	ldi	r19, 0x01	; 1
    1602:	fc 01       	movw	r30, r24
    1604:	33 83       	std	Z+3, r19	; 0x03
    1606:	22 83       	std	Z+2, r18	; 0x02
  }
  u8g_dev_rot.dev_fn = u8g_dev_rot180_fn;
    1608:	22 e6       	ldi	r18, 0x62	; 98
    160a:	3a e0       	ldi	r19, 0x0A	; 10
    160c:	30 93 17 01 	sts	0x0117, r19
    1610:	20 93 16 01 	sts	0x0116, r18
  u8g_UpdateDimension(u8g);
    1614:	8a cd       	rjmp	.-1260   	; 0x112a <u8g_UpdateDimension>

00001616 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    1616:	08 95       	ret

00001618 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1618:	0f 93       	push	r16
    161a:	fc 01       	movw	r30, r24
    161c:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    161e:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1620:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1622:	96 a9       	ldd	r25, Z+54	; 0x36
    1624:	94 17       	cp	r25, r20
    1626:	18 f0       	brcs	.+6      	; 0x162e <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    1628:	08 17       	cp	r16, r24
    162a:	28 f4       	brcc	.+10     	; 0x1636 <u8g_IsBBXIntersection+0x1e>
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    162e:	08 17       	cp	r16, r24
    1630:	50 f0       	brcs	.+20     	; 0x1646 <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    1632:	04 17       	cp	r16, r20
    1634:	40 f4       	brcc	.+16     	; 0x1646 <u8g_IsBBXIntersection+0x2e>
    1636:	21 50       	subi	r18, 0x01	; 1
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1638:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    163a:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    163c:	95 a9       	ldd	r25, Z+53	; 0x35
    163e:	96 17       	cp	r25, r22
    1640:	20 f4       	brcc	.+8      	; 0x164a <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1642:	28 17       	cp	r18, r24
    1644:	20 f4       	brcc	.+8      	; 0x164e <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    164a:	28 17       	cp	r18, r24
    164c:	20 f4       	brcc	.+8      	; 0x1656 <u8g_IsBBXIntersection+0x3e>
  }
  else
  {
    if ( v1 >= a0 )
    {
      if ( v0 > v1 )
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	26 17       	cp	r18, r22
    1652:	10 f0       	brcs	.+4      	; 0x1658 <u8g_IsBBXIntersection+0x40>
    1654:	f8 cf       	rjmp	.-16     	; 0x1646 <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <u8g_InitCom>:

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
    165c:	db 01       	movw	r26, r22
    165e:	14 96       	adiw	r26, 0x04	; 4
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	15 97       	sbiw	r26, 0x05	; 5
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	09 95       	icall
}
    166e:	08 95       	ret

00001670 <u8g_SetChipSelect>:
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
    1670:	db 01       	movw	r26, r22
    1672:	14 96       	adiw	r26, 0x04	; 4
    1674:	ed 91       	ld	r30, X+
    1676:	fc 91       	ld	r31, X
    1678:	15 97       	sbiw	r26, 0x05	; 5
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	63 e0       	ldi	r22, 0x03	; 3
    1680:	09 95       	icall
    1682:	08 95       	ret

00001684 <u8g_SetResetLow>:
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
    1684:	db 01       	movw	r26, r22
    1686:	14 96       	adiw	r26, 0x04	; 4
    1688:	ed 91       	ld	r30, X+
    168a:	fc 91       	ld	r31, X
    168c:	15 97       	sbiw	r26, 0x05	; 5
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	64 e0       	ldi	r22, 0x04	; 4
    1696:	09 95       	icall
    1698:	08 95       	ret

0000169a <u8g_SetResetHigh>:
}

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
    169a:	db 01       	movw	r26, r22
    169c:	14 96       	adiw	r26, 0x04	; 4
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	15 97       	sbiw	r26, 0x05	; 5
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	64 e0       	ldi	r22, 0x04	; 4
    16ac:	09 95       	icall
    16ae:	08 95       	ret

000016b0 <u8g_SetAddress>:
}


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
    16b0:	db 01       	movw	r26, r22
    16b2:	14 96       	adiw	r26, 0x04	; 4
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	15 97       	sbiw	r26, 0x05	; 5
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	09 95       	icall
    16c2:	08 95       	ret

000016c4 <u8g_WriteByte>:
}

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
    16c4:	db 01       	movw	r26, r22
    16c6:	14 96       	adiw	r26, 0x04	; 4
    16c8:	ed 91       	ld	r30, X+
    16ca:	fc 91       	ld	r31, X
    16cc:	15 97       	sbiw	r26, 0x05	; 5
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	65 e0       	ldi	r22, 0x05	; 5
    16d4:	09 95       	icall
}
    16d6:	08 95       	ret

000016d8 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
    16d8:	db 01       	movw	r26, r22
    16da:	14 96       	adiw	r26, 0x04	; 4
    16dc:	ed 91       	ld	r30, X+
    16de:	fc 91       	ld	r31, X
    16e0:	15 97       	sbiw	r26, 0x05	; 5
    16e2:	66 e0       	ldi	r22, 0x06	; 6
    16e4:	09 95       	icall
}
    16e6:	08 95       	ret

000016e8 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e9 e7       	ldi	r30, 0x79	; 121
    16ee:	fb e0       	ldi	r31, 0x0B	; 11
    16f0:	7c c1       	rjmp	.+760    	; 0x19ea <__prologue_saves__+0x14>
    16f2:	8c 01       	movw	r16, r24
    16f4:	7b 01       	movw	r14, r22
    16f6:	6a 01       	movw	r12, r20
    16f8:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t is_escape = 0;
    16fa:	f6 01       	movw	r30, r12
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    16fc:	c4 91       	lpm	r28, Z
    16fe:	81 11       	cpse	r24, r1
    if ( is_escape == 0 )
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <u8g_WriteEscSeqP+0x2c>
    1702:	cf 3f       	cpi	r28, 0xFF	; 255
    {
      if ( value != 255 )
    1704:	b1 f1       	breq	.+108    	; 0x1772 <u8g_WriteEscSeqP+0x8a>
    1706:	4c 2f       	mov	r20, r28
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1708:	b7 01       	movw	r22, r14
    170a:	c8 01       	movw	r24, r16
    170c:	db df       	rcall	.-74     	; 0x16c4 <u8g_WriteByte>
    170e:	81 11       	cpse	r24, r1
    1710:	29 c0       	rjmp	.+82     	; 0x1764 <u8g_WriteEscSeqP+0x7c>
    1712:	34 c0       	rjmp	.+104    	; 0x177c <u8g_WriteEscSeqP+0x94>
    1714:	cf 3f       	cpi	r28, 0xFF	; 255
    1716:	11 f4       	brne	.+4      	; 0x171c <u8g_WriteEscSeqP+0x34>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1718:	4f ef       	ldi	r20, 0xFF	; 255
    171a:	f6 cf       	rjmp	.-20     	; 0x1708 <u8g_WriteEscSeqP+0x20>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    171c:	ce 3f       	cpi	r28, 0xFE	; 254
    171e:	81 f1       	breq	.+96     	; 0x1780 <u8g_WriteEscSeqP+0x98>
          return 0;
      }
      else if ( value == 254 )
    1720:	c0 3f       	cpi	r28, 0xF0	; 240
    1722:	00 f5       	brcc	.+64     	; 0x1764 <u8g_WriteEscSeqP+0x7c>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1724:	c0 3e       	cpi	r28, 0xE0	; 224
    1726:	30 f0       	brcs	.+12     	; 0x1734 <u8g_WriteEscSeqP+0x4c>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1728:	4c 2f       	mov	r20, r28
    172a:	4f 70       	andi	r20, 0x0F	; 15
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    172c:	b7 01       	movw	r22, r14
    172e:	c8 01       	movw	r24, r16
    1730:	bf df       	rcall	.-130    	; 0x16b0 <u8g_SetAddress>
    1732:	18 c0       	rjmp	.+48     	; 0x1764 <u8g_WriteEscSeqP+0x7c>
    1734:	c0 3d       	cpi	r28, 0xD0	; 208
    1736:	30 f0       	brcs	.+12     	; 0x1744 <u8g_WriteEscSeqP+0x5c>
    1738:	4c 2f       	mov	r20, r28
      }
      else if ( value >= 0xd0 )
    173a:	4f 70       	andi	r20, 0x0F	; 15
    173c:	b7 01       	movw	r22, r14
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    173e:	c8 01       	movw	r24, r16
    1740:	97 df       	rcall	.-210    	; 0x1670 <u8g_SetChipSelect>
    1742:	10 c0       	rjmp	.+32     	; 0x1764 <u8g_WriteEscSeqP+0x7c>
    1744:	c0 3c       	cpi	r28, 0xC0	; 192
    1746:	80 f0       	brcs	.+32     	; 0x1768 <u8g_WriteEscSeqP+0x80>
    1748:	b7 01       	movw	r22, r14
    174a:	c8 01       	movw	r24, r16
      }
      else if ( value >= 0xc0 )
    174c:	9b df       	rcall	.-202    	; 0x1684 <u8g_SetResetLow>
    174e:	c2 95       	swap	r28
      {
        u8g_SetResetLow(u8g, dev);
    1750:	c0 7f       	andi	r28, 0xF0	; 240
    1752:	ce 5f       	subi	r28, 0xFE	; 254
    1754:	d0 e0       	ldi	r29, 0x00	; 0
    1756:	ce 01       	movw	r24, r28
        value &= 0x0f;
        value <<= 4;
    1758:	17 d1       	rcall	.+558    	; 0x1988 <u8g_Delay>
    175a:	b7 01       	movw	r22, r14
        value+=2;
    175c:	c8 01       	movw	r24, r16
        u8g_Delay(value);
    175e:	9d df       	rcall	.-198    	; 0x169a <u8g_SetResetHigh>
    1760:	ce 01       	movw	r24, r28
    1762:	12 d1       	rcall	.+548    	; 0x1988 <u8g_Delay>
    1764:	80 e0       	ldi	r24, 0x00	; 0
        u8g_SetResetHigh(u8g, dev);
    1766:	06 c0       	rjmp	.+12     	; 0x1774 <u8g_WriteEscSeqP+0x8c>
    1768:	c7 fd       	sbrc	r28, 7
    176a:	fc cf       	rjmp	.-8      	; 0x1764 <u8g_WriteEscSeqP+0x7c>
    176c:	8c 2f       	mov	r24, r28
        u8g_Delay(value);
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	f8 cf       	rjmp	.-16     	; 0x1762 <u8g_WriteEscSeqP+0x7a>
    1772:	81 e0       	ldi	r24, 0x01	; 1
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1774:	ff ef       	ldi	r31, 0xFF	; 255
    1776:	cf 1a       	sub	r12, r31
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    1778:	df 0a       	sbc	r13, r31
    177a:	bf cf       	rjmp	.-130    	; 0x16fa <u8g_WriteEscSeqP+0x12>
      {
        u8g_Delay(value);
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <u8g_WriteEscSeqP+0x9a>
    1780:	81 e0       	ldi	r24, 0x01	; 1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1782:	cd b7       	in	r28, 0x3d	; 61
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	e8 e0       	ldi	r30, 0x08	; 8
    1788:	4c c1       	rjmp	.+664    	; 0x1a22 <__epilogue_restores__+0x14>

0000178a <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    178e:	fc 01       	movw	r30, r24
    1790:	23 a5       	ldd	r18, Z+43	; 0x2b
    1792:	22 23       	and	r18, r18
    1794:	71 f0       	breq	.+28     	; 0x17b2 <u8g_com_arduino_ssd_start_sequence+0x28>
    1796:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    1798:	88 e7       	ldi	r24, 0x78	; 120
    179a:	9e d0       	rcall	.+316    	; 0x18d8 <u8g_i2c_start>
    179c:	81 11       	cpse	r24, r1
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <u8g_com_arduino_ssd_start_sequence+0x1a>
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <u8g_com_arduino_ssd_start_sequence+0x2a>
    17a4:	8e a1       	ldd	r24, Y+38	; 0x26
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    17a6:	81 11       	cpse	r24, r1
    17a8:	80 e4       	ldi	r24, 0x40	; 64
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    17aa:	c9 d0       	rcall	.+402    	; 0x193e <u8g_i2c_send_byte>
    17ac:	88 23       	and	r24, r24
    17ae:	c1 f3       	breq	.-16     	; 0x17a0 <u8g_com_arduino_ssd_start_sequence+0x16>
    17b0:	1b a6       	std	Y+43, r1	; 0x2b
    17b2:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    17b4:	df 91       	pop	r29

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    17b6:	cf 91       	pop	r28
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    17b8:	08 95       	ret

000017ba <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	c4 2f       	mov	r28, r20
    17c2:	89 01       	movw	r16, r18
  switch(msg)
    17c4:	63 30       	cpi	r22, 0x03	; 3
    17c6:	b9 f0       	breq	.+46     	; 0x17f6 <u8g_com_arduino_ssd_i2c_fn+0x3c>
    17c8:	50 f4       	brcc	.+20     	; 0x17de <u8g_com_arduino_ssd_i2c_fn+0x24>
    17ca:	61 30       	cpi	r22, 0x01	; 1
    17cc:	81 f0       	breq	.+32     	; 0x17ee <u8g_com_arduino_ssd_i2c_fn+0x34>
    17ce:	62 30       	cpi	r22, 0x02	; 2
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <u8g_com_arduino_ssd_i2c_fn+0x1a>
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    17d4:	fc 01       	movw	r30, r24
    17d6:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    17d8:	21 e0       	ldi	r18, 0x01	; 1
    17da:	23 a7       	std	Z+43, r18	; 0x2b
    17dc:	3a c0       	rjmp	.+116    	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
    17de:	66 30       	cpi	r22, 0x06	; 6
    17e0:	e9 f0       	breq	.+58     	; 0x181c <u8g_com_arduino_ssd_i2c_fn+0x62>
    17e2:	67 30       	cpi	r22, 0x07	; 7
    17e4:	41 f1       	breq	.+80     	; 0x1836 <u8g_com_arduino_ssd_i2c_fn+0x7c>
    17e6:	65 30       	cpi	r22, 0x05	; 5
    17e8:	09 f0       	breq	.+2      	; 0x17ec <u8g_com_arduino_ssd_i2c_fn+0x32>
    17ea:	33 c0       	rjmp	.+102    	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <u8g_com_arduino_ssd_i2c_fn+0x4c>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    17ee:	fc 01       	movw	r30, r24
    17f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    17f2:	42 d0       	rcall	.+132    	; 0x1878 <u8g_i2c_init>
    17f4:	2e c0       	rjmp	.+92     	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
    17f6:	fc 01       	movw	r30, r24
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    17f8:	16 a2       	std	Z+38, r1	; 0x26
    17fa:	21 e0       	ldi	r18, 0x01	; 1
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    17fc:	23 a7       	std	Z+43, r18	; 0x2b
    17fe:	41 11       	cpse	r20, r1
      if ( arg_val == 0 )
    1800:	28 c0       	rjmp	.+80     	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
    1802:	bc d0       	rcall	.+376    	; 0x197c <u8g_i2c_stop>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    1804:	26 c0       	rjmp	.+76     	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
    1806:	c1 df       	rcall	.-126    	; 0x178a <u8g_com_arduino_ssd_start_sequence>
    1808:	81 11       	cpse	r24, r1
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <u8g_com_arduino_ssd_i2c_fn+0x58>
    180c:	b7 d0       	rcall	.+366    	; 0x197c <u8g_i2c_stop>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	21 c0       	rjmp	.+66     	; 0x1854 <u8g_com_arduino_ssd_i2c_fn+0x9a>
	return u8g_i2c_stop(), 0;
    1812:	8c 2f       	mov	r24, r28
    1814:	94 d0       	rcall	.+296    	; 0x193e <u8g_i2c_send_byte>
    1816:	81 11       	cpse	r24, r1
    1818:	1c c0       	rjmp	.+56     	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    181a:	f8 cf       	rjmp	.-16     	; 0x180c <u8g_com_arduino_ssd_i2c_fn+0x52>
    181c:	b6 df       	rcall	.-148    	; 0x178a <u8g_com_arduino_ssd_start_sequence>
    181e:	88 23       	and	r24, r24
    1820:	a9 f3       	breq	.-22     	; 0x180c <u8g_com_arduino_ssd_i2c_fn+0x52>
    1822:	cc 23       	and	r28, r28
    1824:	b1 f0       	breq	.+44     	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1826:	f8 01       	movw	r30, r16
    1828:	81 91       	ld	r24, Z+
    182a:	8f 01       	movw	r16, r30
    182c:	88 d0       	rcall	.+272    	; 0x193e <u8g_i2c_send_byte>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    182e:	88 23       	and	r24, r24
    1830:	69 f3       	breq	.-38     	; 0x180c <u8g_com_arduino_ssd_i2c_fn+0x52>
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    1832:	c1 50       	subi	r28, 0x01	; 1
    1834:	f6 cf       	rjmp	.-20     	; 0x1822 <u8g_com_arduino_ssd_i2c_fn+0x68>
    1836:	a9 df       	rcall	.-174    	; 0x178a <u8g_com_arduino_ssd_start_sequence>
    1838:	88 23       	and	r24, r24
    183a:	41 f3       	breq	.-48     	; 0x180c <u8g_com_arduino_ssd_i2c_fn+0x52>
    183c:	cc 23       	and	r28, r28
    183e:	49 f0       	breq	.+18     	; 0x1852 <u8g_com_arduino_ssd_i2c_fn+0x98>
	    return u8g_i2c_stop(), 0;
          arg_val--;
    1840:	f8 01       	movw	r30, r16
    1842:	84 91       	lpm	r24, Z
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    1844:	7c d0       	rcall	.+248    	; 0x193e <u8g_i2c_send_byte>
    1846:	88 23       	and	r24, r24
    1848:	29 f0       	breq	.+10     	; 0x1854 <u8g_com_arduino_ssd_i2c_fn+0x9a>
    184a:	0f 5f       	subi	r16, 0xFF	; 255
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	c1 50       	subi	r28, 0x01	; 1
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1850:	f5 cf       	rjmp	.-22     	; 0x183c <u8g_com_arduino_ssd_i2c_fn+0x82>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	08 95       	ret

0000185c <u8g_i2c_set_error>:

#if defined(__AVR__)

static void u8g_i2c_set_error(uint8_t code, uint8_t pos)
{
  if ( u8g_i2c_err_code > 0 )
    185c:	90 91 b0 01 	lds	r25, 0x01B0
    1860:	91 11       	cpse	r25, r1
    1862:	04 c0       	rjmp	.+8      	; 0x186c <u8g_i2c_set_error+0x10>
    return;
  u8g_i2c_err_code |= code;
    1864:	80 93 b0 01 	sts	0x01B0, r24
  u8g_i2c_err_pos = pos;
    1868:	60 93 ae 01 	sts	0x01AE, r22
    186c:	08 95       	ret

0000186e <u8g_i2c_clear_error>:
static uint8_t u8g_i2c_err_pos;


void u8g_i2c_clear_error(void)
{
  u8g_i2c_err_code = U8G_I2C_ERR_NONE;
    186e:	10 92 b0 01 	sts	0x01B0, r1
  u8g_i2c_err_pos = 0;
    1872:	10 92 ae 01 	sts	0x01AE, r1
    1876:	08 95       	ret

00001878 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    1878:	80 93 af 01 	sts	0x01AF, r24
  TWSR = 0;
    187c:	10 92 b9 00 	sts	0x00B9, r1
  if ( options & U8G_I2C_OPT_FAST )
    1880:	84 ff       	sbrs	r24, 4
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <u8g_i2c_init+0x10>
  {
    TWBR = F_CPU/(2*400000)-8;
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	01 c0       	rjmp	.+2      	; 0x188a <u8g_i2c_init+0x12>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	80 93 b8 00 	sts	0x00B8, r24
  }
  u8g_i2c_clear_error();
    188e:	ef cf       	rjmp	.-34     	; 0x186e <u8g_i2c_clear_error>

00001890 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    1890:	a2 e0       	ldi	r26, 0x02	; 2
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ed e4       	ldi	r30, 0x4D	; 77
    1896:	fc e0       	ldi	r31, 0x0C	; 12
    1898:	ad c0       	rjmp	.+346    	; 0x19f4 <__prologue_saves__+0x1e>
    189a:	20 ed       	ldi	r18, 0xD0	; 208
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    189c:	37 e0       	ldi	r19, 0x07	; 7
    189e:	3a 83       	std	Y+2, r19	; 0x02
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
	  return 0; /* error */
	}
      }
      cnt--;
    18a0:	29 83       	std	Y+1, r18	; 0x01
    18a2:	90 91 bc 00 	lds	r25, 0x00BC
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    18a6:	98 23       	and	r25, r24
    18a8:	91 f4       	brne	.+36     	; 0x18ce <u8g_i2c_wait+0x3e>
    18aa:	29 81       	ldd	r18, Y+1	; 0x01
  {
      if ( cnt == 0 )
    18ac:	3a 81       	ldd	r19, Y+2	; 0x02
    18ae:	23 2b       	or	r18, r19
    18b0:	49 f4       	brne	.+18     	; 0x18c4 <u8g_i2c_wait+0x34>
    18b2:	80 91 af 01 	lds	r24, 0x01AF
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    18b6:	18 2f       	mov	r17, r24
    18b8:	12 70       	andi	r17, 0x02	; 2
    18ba:	81 fd       	sbrc	r24, 1
    18bc:	08 c0       	rjmp	.+16     	; 0x18ce <u8g_i2c_wait+0x3e>
    18be:	81 e0       	ldi	r24, 0x01	; 1
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    18c0:	cd df       	rcall	.-102    	; 0x185c <u8g_i2c_set_error>
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <u8g_i2c_wait+0x40>
    18c4:	29 81       	ldd	r18, Y+1	; 0x01
	  return 0; /* error */
    18c6:	3a 81       	ldd	r19, Y+2	; 0x02
	}
      }
      cnt--;
    18c8:	21 50       	subi	r18, 0x01	; 1
    18ca:	31 09       	sbc	r19, r1
    18cc:	e8 cf       	rjmp	.-48     	; 0x189e <u8g_i2c_wait+0xe>
    18ce:	11 e0       	ldi	r17, 0x01	; 1
    18d0:	81 2f       	mov	r24, r17
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    18d2:	22 96       	adiw	r28, 0x02	; 2
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    18d4:	e3 e0       	ldi	r30, 0x03	; 3
    18d6:	aa c0       	rjmp	.+340    	; 0x1a2c <__epilogue_restores__+0x1e>

000018d8 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    18d8:	cf 93       	push	r28
    18da:	c8 2f       	mov	r28, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    18dc:	84 ea       	ldi	r24, 0xA4	; 164
    18de:	80 93 bc 00 	sts	0x00BC, r24
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	80 e8       	ldi	r24, 0x80	; 128
    18e6:	d4 df       	rcall	.-88     	; 0x1890 <u8g_i2c_wait>
    18e8:	88 23       	and	r24, r24
    18ea:	51 f0       	breq	.+20     	; 0x1900 <u8g_i2c_start+0x28>
    18ec:	90 91 b9 00 	lds	r25, 0x00B9
    return 0;
  
  status = TW_STATUS;
    18f0:	98 7f       	andi	r25, 0xF8	; 248
    18f2:	98 30       	cpi	r25, 0x08	; 8
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    18f4:	39 f0       	breq	.+14     	; 0x1904 <u8g_i2c_start+0x2c>
    18f6:	90 31       	cpi	r25, 0x10	; 16
    18f8:	29 f0       	breq	.+10     	; 0x1904 <u8g_i2c_start+0x2c>
    18fa:	61 e0       	ldi	r22, 0x01	; 1
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	ae df       	rcall	.-164    	; 0x185c <u8g_i2c_set_error>
    1900:	c0 e0       	ldi	r28, 0x00	; 0
    1902:	1a c0       	rjmp	.+52     	; 0x1938 <u8g_i2c_start+0x60>
    return 0;
    1904:	c0 93 bb 00 	sts	0x00BB, r28
  }

  /* set slave address */  
  TWDR = sla;
    1908:	84 e8       	ldi	r24, 0x84	; 132
    190a:	80 93 bc 00 	sts	0x00BC, r24
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	80 e8       	ldi	r24, 0x80	; 128

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1912:	be df       	rcall	.-132    	; 0x1890 <u8g_i2c_wait>
    1914:	88 23       	and	r24, r24
    1916:	a1 f3       	breq	.-24     	; 0x1900 <u8g_i2c_start+0x28>
    1918:	80 91 af 01 	lds	r24, 0x01AF
    191c:	c8 2f       	mov	r28, r24
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    191e:	c2 70       	andi	r28, 0x02	; 2
    1920:	81 fd       	sbrc	r24, 1
    1922:	09 c0       	rjmp	.+18     	; 0x1936 <u8g_i2c_start+0x5e>
    1924:	80 91 b9 00 	lds	r24, 0x00B9
    1928:	88 7f       	andi	r24, 0xF8	; 248
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    192a:	88 31       	cpi	r24, 0x18	; 24
    192c:	21 f0       	breq	.+8      	; 0x1936 <u8g_i2c_start+0x5e>
    192e:	62 e0       	ldi	r22, 0x02	; 2
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	94 df       	rcall	.-216    	; 0x185c <u8g_i2c_set_error>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <u8g_i2c_start+0x60>
    1936:	c1 e0       	ldi	r28, 0x01	; 1
    1938:	8c 2f       	mov	r24, r28
    193a:	cf 91       	pop	r28
      return 0;
    193c:	08 95       	ret

0000193e <u8g_i2c_send_byte>:

   return 1;
}

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    193e:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    1940:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    1944:	84 e8       	ldi	r24, 0x84	; 132
    1946:	80 93 bc 00 	sts	0x00BC, r24
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    194a:	63 e0       	ldi	r22, 0x03	; 3
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	a0 df       	rcall	.-192    	; 0x1890 <u8g_i2c_wait>
    1950:	c8 2f       	mov	r28, r24
    1952:	88 23       	and	r24, r24
    1954:	81 f0       	breq	.+32     	; 0x1976 <u8g_i2c_send_byte+0x38>
    1956:	80 91 af 01 	lds	r24, 0x01AF
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    195a:	c8 2f       	mov	r28, r24
    195c:	c2 70       	andi	r28, 0x02	; 2
    195e:	81 fd       	sbrc	r24, 1
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <u8g_i2c_send_byte+0x36>
    1962:	80 91 b9 00 	lds	r24, 0x00B9
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    1966:	88 7f       	andi	r24, 0xF8	; 248
    1968:	88 32       	cpi	r24, 0x28	; 40
    if ( status != TW_MT_DATA_ACK )
    196a:	21 f0       	breq	.+8      	; 0x1974 <u8g_i2c_send_byte+0x36>
    196c:	63 e0       	ldi	r22, 0x03	; 3
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	75 df       	rcall	.-278    	; 0x185c <u8g_i2c_set_error>
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <u8g_i2c_send_byte+0x38>
    1974:	c1 e0       	ldi	r28, 0x01	; 1
      return 0;
    1976:	8c 2f       	mov	r24, r28
    }
  }

  return 1;  
    1978:	cf 91       	pop	r28
}
    197a:	08 95       	ret

0000197c <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    197c:	84 e9       	ldi	r24, 0x94	; 148
    197e:	80 93 bc 00 	sts	0x00BC, r24

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    1982:	64 e0       	ldi	r22, 0x04	; 4
    1984:	80 e1       	ldi	r24, 0x10	; 16
    1986:	84 cf       	rjmp	.-248    	; 0x1890 <u8g_i2c_wait>

00001988 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1988:	2e ec       	ldi	r18, 0xCE	; 206
    198a:	37 e0       	ldi	r19, 0x07	; 7
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	29 f0       	breq	.+10     	; 0x199a <u8g_Delay+0x12>
    1990:	f9 01       	movw	r30, r18
    1992:	31 97       	sbiw	r30, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f9 cf       	rjmp	.-14     	; 0x198c <u8g_Delay+0x4>
  }
}
    199a:	08 95       	ret

0000199c <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
    199c:	fc 01       	movw	r30, r24
  p->page_y0 = 0;
    199e:	12 82       	std	Z+2, r1	; 0x02
  p->page_y1 = p->page_height;
  p->page_y1--;
    19a0:	80 81       	ld	r24, Z
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	83 83       	std	Z+3, r24	; 0x03
  p->page = 0;
    19a6:	14 82       	std	Z+4, r1	; 0x04
    19a8:	08 95       	ret

000019aa <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    19aa:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    19ac:	80 81       	ld	r24, Z
    19ae:	92 81       	ldd	r25, Z+2	; 0x02
    19b0:	98 0f       	add	r25, r24
    19b2:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    19b4:	21 81       	ldd	r18, Z+1	; 0x01
    19b6:	92 17       	cp	r25, r18
    19b8:	60 f4       	brcc	.+24     	; 0x19d2 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    19ba:	94 81       	ldd	r25, Z+4	; 0x04
    19bc:	9f 5f       	subi	r25, 0xFF	; 255
    19be:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
  y1 += p->page_height;
    19c2:	89 0f       	add	r24, r25
  if ( y1 >= p->total_height )
    19c4:	82 17       	cp	r24, r18
    19c6:	10 f0       	brcs	.+4      	; 0x19cc <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    19cc:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    19d4:	08 95       	ret

000019d6 <__prologue_saves__>:
    19d6:	2f 92       	push	r2
    19d8:	3f 92       	push	r3
    19da:	4f 92       	push	r4
    19dc:	5f 92       	push	r5
    19de:	6f 92       	push	r6
    19e0:	7f 92       	push	r7
    19e2:	8f 92       	push	r8
    19e4:	9f 92       	push	r9
    19e6:	af 92       	push	r10
    19e8:	bf 92       	push	r11
    19ea:	cf 92       	push	r12
    19ec:	df 92       	push	r13
    19ee:	ef 92       	push	r14
    19f0:	ff 92       	push	r15
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	ca 1b       	sub	r28, r26
    1a00:	db 0b       	sbc	r29, r27
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	09 94       	ijmp

00001a0e <__epilogue_restores__>:
    1a0e:	2a 88       	ldd	r2, Y+18	; 0x12
    1a10:	39 88       	ldd	r3, Y+17	; 0x11
    1a12:	48 88       	ldd	r4, Y+16	; 0x10
    1a14:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a16:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a18:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a20:	b9 84       	ldd	r11, Y+9	; 0x09
    1a22:	c8 84       	ldd	r12, Y+8	; 0x08
    1a24:	df 80       	ldd	r13, Y+7	; 0x07
    1a26:	ee 80       	ldd	r14, Y+6	; 0x06
    1a28:	fd 80       	ldd	r15, Y+5	; 0x05
    1a2a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a2c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a2e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a30:	b9 81       	ldd	r27, Y+1	; 0x01
    1a32:	ce 0f       	add	r28, r30
    1a34:	d1 1d       	adc	r29, r1
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	ed 01       	movw	r28, r26
    1a42:	08 95       	ret

00001a44 <memcpy_P>:
    1a44:	fb 01       	movw	r30, r22
    1a46:	dc 01       	movw	r26, r24
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <memcpy_P+0xa>
    1a4a:	05 90       	lpm	r0, Z+
    1a4c:	0d 92       	st	X+, r0
    1a4e:	41 50       	subi	r20, 0x01	; 1
    1a50:	50 40       	sbci	r21, 0x00	; 0
    1a52:	d8 f7       	brcc	.-10     	; 0x1a4a <memcpy_P+0x6>
    1a54:	08 95       	ret

00001a56 <_exit>:
    1a56:	f8 94       	cli

00001a58 <__stop_program>:
    1a58:	ff cf       	rjmp	.-2      	; 0x1a58 <__stop_program>
