
u8m2.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__ctors_end>
       4:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
       8:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
       c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      10:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      14:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      18:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      1c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      20:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      24:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      28:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      2c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      30:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      34:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      38:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      3c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      40:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      44:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      48:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      4c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      50:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      54:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      58:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      5c:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      60:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      64:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__bad_interrupt>
      68:	36 1a       	sub	r3, r22
      6a:	51 1a       	sub	r5, r17
      6c:	54 1a       	sub	r5, r20
      6e:	4f 1a       	sub	r4, r31
      70:	5c 1a       	sub	r5, r28
      72:	61 1a       	sub	r6, r17
      74:	6d 1a       	sub	r6, r29

00000076 <__trampolines_end>:
      76:	00 00       	nop
      78:	25 00       	.word	0x0025	; ????
      7a:	28 00       	.word	0x0028	; ????
      7c:	2b 00       	.word	0x002b	; ????

0000007e <u8g_avr_ddr_P>:
      7e:	00 00 24 00 27 00 2a 00                             ..$.'.*.

00000086 <u8g_dev_st7920_192x32_init_seq>:
      86:	ff d0 ff e0 ff cf ff 64 ff d1 ff 32 38 0c 06 02     .......d...28...
      96:	01 ff 64 ff d0 ff fe                                ..d....

0000009d <u8g_font_gdr30n>:
      9d:	00 47 44 e8 ef 1d 00 00 00 00 2a 3a 00 26 f8 1d     .GD.......*:.&..
      ad:	00 12 14 3c 15 02 11 00 c0 00 01 c0 00 01 c0 00     ...<............
      bd:	01 c0 00 c1 c1 00 f0 c3 c0 f8 cf c0 7c df 00 0f     ............|...
      cd:	fc 00 03 e0 00 03 e0 00 0f fc 00 3c df 00 f8 cf     ...........<....
      dd:	80 f0 c3 80 40 c1 80 01 c0 00 01 c0 00 01 c0 00     ....@...........
      ed:	01 80 00 11 11 33 14 01 05 00 c0 00 01 c0 00 01     .....3..........
      fd:	c0 00 01 c0 00 01 c0 00 01 c0 00 01 c0 00 01 c0     ................
     10d:	00 ff ff 80 ff ff 80 01 c0 00 01 c0 00 01 c0 00     ................
     11d:	01 c0 00 01 c0 00 01 c0 00 01 80 00 07 0d 0d 0b     ................
     12d:	02 f9 08 3c fe fe 1e 1e 1e 1c 1c 38 30 60 40 0e     ...<.......80`@.
     13d:	02 04 10 01 0b 7f fc ff f8 06 06 06 0b 03 ff 38     ...............8
     14d:	7c fc fc f8 70 14 2e 8a 17 01 f8 00 00 30 00 00     |...p........0..
     15d:	f0 00 00 f0 00 00 e0 00 01 e0 00 01 c0 00 01 c0     ................
     16d:	00 03 c0 00 03 80 00 07 80 00 07 80 00 07 00 00     ................
     17d:	0f 00 00 0f 00 00 0e 00 00 1e 00 00 1c 00 00 1c     ................
     18d:	00 00 3c 00 00 38 00 00 78 00 00 78 00 00 70 00     ..<..8..x..x..p.
     19d:	00 f0 00 00 e0 00 00 e0 00 01 e0 00 01 c0 00 03     ................
     1ad:	c0 00 03 c0 00 03 80 00 07 80 00 07 80 00 07 00     ................
     1bd:	00 0f 00 00 0e 00 00 1e 00 00 1e 00 00 1c 00 00     ................
     1cd:	3c 00 00 3c 00 00 38 00 00 78 00 00 70 00 00 f0     <..<..8..x..p...
     1dd:	00 00 c0 00 00 13 1d 57 17 02 00 01 f8 00 07 fc     .......W........
     1ed:	00 0e 1e 00 1c 0f 00 18 07 80 38 07 80 38 03 c0     ..........8..8..
     1fd:	70 03 c0 70 03 c0 70 03 e0 f0 01 e0 f0 01 e0 f0     p..p..p.........
     20d:	01 e0 f0 01 e0 f0 01 e0 f0 01 e0 f0 01 e0 f0 01     ................
     21d:	e0 f0 01 e0 f0 01 c0 78 01 c0 78 03 c0 78 03 80     .......x..x..x..
     22d:	3c 03 80 3c 03 00 1e 07 00 0f 0e 00 07 fc 00 03     <..<............
     23d:	f0 00 11 1d 57 17 03 00 00 60 00 01 e0 00 0f e0     ....W....`......
     24d:	00 7f e0 00 ff e0 00 01 e0 00 01 e0 00 01 e0 00     ................
     25d:	01 e0 00 01 e0 00 01 e0 00 01 e0 00 01 e0 00 01     ................
     26d:	e0 00 01 e0 00 01 e0 00 01 e0 00 01 e0 00 01 e0     ................
     27d:	00 01 e0 00 01 e0 00 01 e0 00 01 e0 00 01 e0 00     ................
     28d:	01 e0 00 01 e0 00 03 f0 00 3f fe 00 7f ff 80 11     .........?......
     29d:	1d 57 16 02 00 01 f8 00 07 fe 00 1c 1f 00 38 0f     .W............8.
     2ad:	00 78 0f 80 70 07 80 f0 07 80 e0 07 80 00 07 80     .x..p...........
     2bd:	00 07 80 00 0f 00 00 0f 00 00 1e 00 00 1e 00 00     ................
     2cd:	3c 00 00 78 00 00 f0 00 00 f0 00 01 e0 00 03 c0     <..x............
     2dd:	00 07 80 00 0f 00 00 0f 00 00 1e 00 80 3c 00 80     .............<..
     2ed:	78 00 80 f0 01 80 ff ff 80 ff ff 80 12 1d 57 16     x.............W.
     2fd:	01 00 01 f8 00 07 fe 00 1e 1f 00 3c 0f 00 38 07     ...........<..8.
     30d:	80 78 07 80 70 07 80 00 07 80 00 07 00 00 0f 00     .x..p...........
     31d:	00 1e 00 00 3c 00 00 f8 00 03 fe 00 00 3f 00 00     ....<........?..
     32d:	0f 80 00 07 80 00 03 c0 00 03 c0 00 03 c0 00 03     ................
     33d:	c0 00 03 c0 00 03 c0 00 07 80 80 07 80 e0 0f 00     ................
     34d:	78 3e 00 3f fc 00 07 e0 00 13 1d 57 17 01 00 00     x>.?.......W....
     35d:	03 00 00 0f 00 00 1f 00 00 3f 00 00 7f 00 00 7f     .........?......
     36d:	00 00 ef 00 00 cf 00 01 cf 00 03 8f 00 03 8f 00     ................
     37d:	07 0f 00 0e 0f 00 0e 0f 00 1c 0f 00 18 0f 00 38     ...............8
     38d:	0f 00 70 0f 00 70 0f 00 ff ff e0 ff ff c0 00 0f     ..p..p..........
     39d:	00 00 0f 00 00 0f 00 00 0f 00 00 0f 00 00 0f 00     ................
     3ad:	00 3f 80 01 ff e0 12 1d 57 17 02 00 00 00 80 00     .?......W.......
     3bd:	01 80 1f ff 00 1f fe 00 18 00 00 18 00 00 18 00     ................
     3cd:	00 18 00 00 38 00 00 38 00 00 38 00 00 3f f0 00     ....8..8..8..?..
     3dd:	3f fc 00 78 3f 00 20 0f 00 00 07 80 00 07 c0 00     ?..x?. .........
     3ed:	03 c0 00 03 c0 00 03 c0 00 03 c0 00 03 c0 00 03     ................
     3fd:	80 00 07 80 80 07 80 e0 0f 00 78 3e 00 3f fc 00     ..........x>.?..
     40d:	07 f0 00 12 1d 57 17 03 00 00 07 00 00 3f 00 00     .....W.......?..
     41d:	f8 00 01 e0 00 03 c0 00 0f 00 00 0e 00 00 1e 00     ................
     42d:	00 3c 00 00 38 00 00 78 00 00 78 f8 00 77 fe 00     .<..8..x..x..w..
     43d:	fe 1f 00 f8 0f 80 f0 07 80 f0 07 c0 f0 03 c0 f0     ................
     44d:	03 c0 f0 03 c0 f0 03 c0 f8 03 c0 78 03 80 78 03     ...........x..x.
     45d:	80 3c 07 80 3c 07 00 1f 0e 00 0f fc 00 03 f0 00     .<..<...........
     46d:	13 1b 51 17 02 00 7f ff c0 7f ff e0 60 01 c0 40     ..Q.........`..@
     47d:	03 c0 c0 03 80 00 03 80 00 07 00 00 07 00 00 0e     ................
     48d:	00 00 0e 00 00 1c 00 00 1c 00 00 38 00 00 38 00     ...........8..8.
     49d:	00 38 00 00 70 00 00 70 00 00 e0 00 00 e0 00 01     .8..p..p........
     4ad:	c0 00 01 c0 00 03 c0 00 07 80 00 07 80 00 0f 00     ................
     4bd:	00 0f 00 00 1c 00 00 12 1d 57 16 02 00 03 f8 00     .........W......
     4cd:	0f fe 00 1c 1f 00 38 0f 00 30 07 80 70 07 80 70     ......8..0..p..p
     4dd:	07 80 70 07 80 70 07 00 78 0f 00 3e 1e 00 1f bc     ..p..p..x..>....
     4ed:	00 0f f0 00 03 fc 00 07 fe 00 1e 3f 00 3c 0f 80     ...........?.<..
     4fd:	78 07 c0 70 07 c0 f0 03 c0 f0 03 c0 f0 03 c0 f0     x..p............
     50d:	03 c0 f0 03 80 78 07 80 7c 07 00 3e 0e 00 1f fc     .....x..|..>....
     51d:	00 07 e0 00 13 1e 5a 17 02 ff 01 f8 00 07 fe 00     ......Z.........
     52d:	0e 1f 00 1c 0f 80 38 07 80 78 03 c0 70 03 c0 f0     ......8..x..p...
     53d:	03 e0 f0 01 e0 f0 01 e0 f0 01 e0 f0 01 e0 f8 01     ................
     54d:	e0 78 03 e0 7c 07 e0 3e 0d e0 1f f9 e0 07 e1 c0     .x..|..>........
     55d:	00 03 c0 00 03 c0 00 07 80 00 07 80 00 0f 00 00     ................
     56d:	1e 00 00 3c 00 00 78 00 00 f0 00 03 e0 00 1f 80     ...<..x.........
     57d:	00 38 00 00 06 17 17 0b 03 ff 38 7c fc fc f8 70     .8........8|...p
	...
     595:	00 00 00 38 7c fc fc f8 70                          ...8|...p

0000059e <u8g_font_gdr25r>:
     59e:	00 3b 39 ec f2 19 06 d1 10 a3 20 7f f7 21 f7 1f     .;9....... ..!..
     5ae:	f7 00 00 00 09 00 00 05 1e 1e 0b 03 ff 30 70 f0     .............0p.
     5be:	70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70     pppppppppppppppp
     5ce:	60 60 60 00 00 00 70 f8 f8 f8 70 0b 0d 1a 11 03     ```...p...p.....
     5de:	10 70 e0 f1 e0 f1 e0 f1 e0 f1 e0 70 e0 60 c0 60     .p.........p.`.`
     5ee:	c0 60 c0 60 c0 60 c0 60 c0 60 c0 11 17 45 13 02     .`.`.`.`.`...E..
     5fe:	02 00 c2 00 01 86 00 01 86 00 01 8e 00 03 8c 00     ................
     60e:	03 0c 00 03 0c 00 3f ff 80 3f ff 80 06 18 00 06     ......?..?......
     61e:	38 00 0e 30 00 0c 30 00 0c 30 00 ff fe 00 ff fe     8..0..0..0......
     62e:	00 18 60 00 18 e0 00 30 c0 00 30 c0 00 30 c0 00     ..`....0..0..0..
     63e:	71 c0 00 61 80 00 10 1e 3c 13 01 fd 01 80 01 80     q..a....<.......
     64e:	01 80 03 e0 0f fc 39 fe 31 9c 71 88 71 80 71 80     ......9.1.q.q.q.
     65e:	79 80 3d 80 3f 80 1f e0 07 f8 01 fc 01 be 01 8f     y.=.?...........
     66e:	01 8f 01 87 c1 87 c1 87 e1 8e f1 8e ff fc 3f f0     ..............?.
     67e:	0f c0 01 80 01 80 01 80 19 19 64 1b 01 ff 0f 80     ..........d.....
     68e:	06 00 3f c0 1c 00 71 e0 38 00 70 e0 38 00 e0 70     ..?...q.8.p.8..p
     69e:	70 00 e0 70 e0 00 e0 70 e0 00 e0 71 c0 00 e0 73     p..p...p...q...s
     6ae:	80 00 70 e7 00 00 78 e7 00 00 3f ce 3c 00 1f 1c     ..p...x...?.<...
     6be:	fe 00 00 1d cf 00 00 39 c7 00 00 73 83 80 00 e3     .......9...s....
     6ce:	83 80 00 e3 83 80 01 c3 83 80 03 83 83 80 03 83     ................
     6de:	83 80 07 01 c7 00 0e 01 c7 00 1c 00 fe 00 18 00     ................
     6ee:	78 00 18 1c 54 1b 02 00 00 f8 00 01 fc 00 03 1e     x...T...........
     6fe:	00 07 0e 00 0e 0e 00 0e 0e 00 0e 0e 00 0e 0c 00     ................
     70e:	0e 1c 00 0f 38 00 07 70 00 07 c0 00 07 83 ff 0f     ....8..p........
     71e:	87 ff 1d c1 f2 39 e0 f0 70 f0 70 70 70 70 e0 78     .....9..p.pppp.x
     72e:	70 e0 3c 70 e0 1e e0 e0 0f e0 e0 07 c0 f0 03 c0     p.<p............
     73e:	78 03 f0 3c 1e f8 1f fc 7f 07 e0 38 04 0d 0d 0a     x..<.......8....
     74e:	03 10 70 f0 f0 f0 f0 70 60 60 60 60 60 60 60 09     ..p....p```````.
     75e:	25 4a 0d 03 fa 00 80 03 80 07 00 0e 00 0c 00 1c     %J..............
     76e:	00 18 00 38 00 38 00 70 00 70 00 70 00 70 00 e0     ...8.8.p.p.p.p..
     77e:	00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ................
     78e:	00 e0 00 e0 00 e0 00 70 00 70 00 70 00 70 00 38     .......p.p.p.p.8
     79e:	00 38 00 1c 00 1c 00 0e 00 07 00 03 80 00 80 09     .8..............
     7ae:	25 4a 0d 01 fa 80 00 e0 00 70 00 38 00 1c 00 1c     %J.......p.8....
     7be:	00 0e 00 0e 00 0e 00 07 00 07 00 07 00 07 80 03     ................
     7ce:	80 03 80 03 80 03 80 03 80 03 80 03 80 03 80 03     ................
     7de:	80 03 80 03 80 07 00 07 00 07 00 07 00 0e 00 0e     ................
     7ee:	00 0c 00 1c 00 18 00 38 00 70 00 e0 00 80 00 10     .......8.p......
     7fe:	10 20 12 01 0e 01 80 01 80 01 80 61 84 71 8e 79     . .........a.q.y
     80e:	9f 1f f8 07 c0 03 c0 1f f8 79 9e f1 8e 21 86 01     .........y...!..
     81e:	80 01 80 01 80 0f 0e 1c 10 01 04 03 80 03 80 03     ................
     82e:	80 03 80 03 80 03 80 ff fe ff fe 03 80 03 80 03     ................
     83e:	80 03 80 03 80 03 80 06 0a 0a 09 02 fa 3c fc 3c     .............<.<
     84e:	1c 1c 18 18 30 20 40 0b 02 04 0d 01 09 7f e0 ff     ....0 @.........
     85e:	e0 05 05 05 09 02 ff 70 f8 f8 f8 70 11 26 72 13     .......p...p.&r.
     86e:	01 f9 00 01 80 00 07 00 00 07 00 00 07 00 00 0e     ................
     87e:	00 00 0e 00 00 0e 00 00 1c 00 00 1c 00 00 38 00     ..............8.
     88e:	00 38 00 00 38 00 00 70 00 00 70 00 00 70 00 00     .8..8..p..p..p..
     89e:	e0 00 00 e0 00 01 c0 00 01 c0 00 01 c0 00 03 80     ................
     8ae:	00 03 80 00 03 80 00 07 00 00 07 00 00 0e 00 00     ................
     8be:	0e 00 00 0e 00 00 1c 00 00 1c 00 00 1c 00 00 38     ...............8
     8ce:	00 00 38 00 00 70 00 00 70 00 00 70 00 00 e0 00     ..8..p..p..p....
     8de:	00 c0 00 00 11 18 48 13 01 00 03 e0 00 0f f8 00     ......H.........
     8ee:	1c 3c 00 38 1e 00 30 0e 00 70 07 00 60 07 00 60     .<.8..0..p..`..`
     8fe:	07 80 e0 03 80 e0 03 80 e0 03 80 e0 03 80 e0 03     ................
     90e:	80 e0 03 80 e0 03 80 e0 03 80 f0 03 00 70 07 00     .............p..
     91e:	70 07 00 78 06 00 3c 0e 00 1e 1c 00 0f f8 00 07     p..x..<.........
     92e:	e0 00 0e 18 30 13 03 00 01 80 07 80 3f 80 ff 80     ....0.......?...
     93e:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     94e:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
     95e:	03 80 03 80 0f e0 7f fc 0e 18 30 13 02 00 03 e0     ..........0.....
     96e:	0f f8 18 78 30 3c 70 1c 60 1c e0 1c 00 1c 00 18     ...x0<p.`.......
     97e:	00 38 00 30 00 70 00 e0 01 c0 01 80 03 80 07 00     .8.0.p..........
     98e:	0e 00 1c 00 18 04 30 04 70 0c ff fc ff fc 0f 18     ......0.p.......
     99e:	30 13 01 00 03 e0 0f f8 1c 78 38 3c 70 1c 70 1c     0........x8<p.p.
     9ae:	00 1c 00 18 00 30 00 60 03 e0 03 f8 00 3c 00 1c     .....0.`.....<..
     9be:	00 0e 00 0e 00 0e 00 0e 00 0e 00 1c 40 1c f0 78     ............@..x
     9ce:	3f f0 0f c0 10 18 30 13 01 00 00 18 00 78 00 78     ?.....0......x.x
     9de:	00 f8 01 f8 01 b8 03 38 07 38 06 38 0c 38 1c 38     .......8.8.8.8.8
     9ee:	18 38 30 38 70 38 60 38 ff ff ff fe 00 38 00 38     .808p8`8.....8.8
     9fe:	00 38 00 38 00 38 00 7c 03 ff 0f 18 30 13 01 00     .8.8.8.|....0...
     a0e:	00 04 1f fc 1f f8 18 00 18 00 18 00 30 00 30 00     ............0.0.
     a1e:	30 00 3f e0 3f f8 30 7c 40 1c 00 1e 00 0e 00 0e     0.?.?.0|@.......
     a2e:	00 0e 00 0e 00 0e 00 1c 40 1c f0 78 3f f0 0f c0     ........@..x?...
     a3e:	0f 18 30 13 02 00 00 38 00 f0 03 c0 07 00 0e 00     ..0....8........
     a4e:	1c 00 38 00 70 00 70 00 63 e0 ef f8 f8 3c f0 1c     ..8.p.p.c....<..
     a5e:	e0 1e e0 0e e0 0e e0 0e e0 0e 70 0e 70 0c 38 1c     ..........p.p.8.
     a6e:	3c 38 1f f0 07 c0 0f 17 2e 13 02 00 7f fe ff fe     <8..............
     a7e:	c0 0c c0 0c 80 1c 00 18 00 38 00 30 00 70 00 60     .........8.0.p.`
     a8e:	00 60 00 e0 00 c0 01 c0 01 80 03 80 03 00 07 00     .`..............
     a9e:	07 00 0e 00 0e 00 1c 00 38 00 0f 18 30 13 02 00     ........8...0...
     aae:	0f c0 3f f0 78 78 70 3c f0 1c e0 1c e0 1c f0 18     ..?.xxp<........
     abe:	78 30 3e 60 1f c0 07 f0 18 78 30 3c 70 1e 60 0e     x0>`.....x0<p.`.
     ace:	e0 0e e0 0e e0 0e e0 0c 70 1c 7c 38 3f f0 0f c0     ........p.|8?...
     ade:	0f 19 32 13 02 ff 07 c0 0f f0 38 78 30 3c 70 1c     ..2.......8x0<p.
     aee:	60 1c e0 0e e0 0e e0 0e e0 0e f0 0e 70 1e 78 3e     `...........p.x>
     afe:	3f ee 0f 8c 00 1c 00 1c 00 18 00 38 00 70 00 e0     ?..........8.p..
     b0e:	01 c0 07 80 1e 00 30 00 05 13 13 09 02 ff 78 f8     ......0.......x.
     b1e:	f8 f8 60 00 00 00 00 00 00 00 00 00 70 f8 f8 f8     ..`.........p...
     b2e:	70 06 18 18 09 02 fa 78 f8 f8 f8 60 00 00 00 00     p......x...`....
     b3e:	00 00 00 00 00 3c fc 3c 1c 1c 18 18 30 20 40 0f     .....<.<....0 @.
     b4e:	0d 1a 12 01 05 00 02 00 1e 00 fe 03 f0 1f c0 7e     ...............~
     b5e:	00 f0 00 fc 00 3f 80 07 e0 01 fc 00 3e 00 0c 0f     .....?......>...
     b6e:	08 10 12 01 07 7f fe ff fe 00 00 00 00 00 00 00     ................
     b7e:	00 7f fe ff fe 0f 0d 1a 12 01 05 60 00 fc 00 3f     ...........`...?
     b8e:	00 0f e0 01 fc 00 7e 00 1e 00 7e 03 f0 1f c0 7e     ......~...~....~
     b9e:	00 f8 00 c0 00 0e 1e 3c 11 02 ff 07 e0 1f f0 38     .......<.......8
     bae:	78 70 38 e0 1c e0 1c e0 1c c0 1c 00 1c 00 38 00     xp8...........8.
     bbe:	38 00 70 00 f0 00 e0 01 c0 03 80 03 80 07 00 07     8.p.............
     bce:	00 07 00 07 00 07 00 00 00 00 00 00 00 07 00 0f     ................
     bde:	80 0f 80 0f 80 07 00 1e 21 84 20 01 f9 00 07 f8     ........!. .....
     bee:	00 00 3f fe 00 00 f0 1f 80 01 c0 07 c0 03 00 01     ..?.............
     bfe:	e0 06 00 00 f0 0c 00 00 70 18 00 00 78 38 03 c6     ........p...x8..
     c0e:	38 30 0f fc 38 70 1c 3c 3c 70 38 1c 1c 60 70 1c     80..8p.<<p8..`p.
     c1e:	1c e0 60 1c 1c e0 e0 1c 1c e0 e0 1c 1c e0 e0 1c     ..`.............
     c2e:	1c e0 e0 1c 1c e0 e0 1c 1c e0 e0 1c 18 f0 f0 1c     ................
     c3e:	38 70 70 1c 30 70 78 3c 60 78 3c 5e e0 38 1f 8f     8pp.0px<`x<^.8..
     c4e:	80 3c 0f 0f 00 1e 00 00 00 1f 00 00 00 0f 80 00     .<..............
     c5e:	20 07 c0 00 c0 01 f8 0f 80 00 ff fe 00 00 1f f0      ...............
     c6e:	00 17 19 4b 18 00 00 00 08 00 00 38 00 00 3c 00     ...K.......8..<.
     c7e:	00 3c 00 00 6c 00 00 6e 00 00 6e 00 00 c6 00 00     .<..l..n..n.....
     c8e:	c7 00 00 c7 00 01 83 00 01 83 80 01 83 80 03 01     ................
     c9e:	80 03 ff c0 03 ff c0 06 00 e0 06 00 e0 06 00 e0     ................
     cae:	0c 00 70 0c 00 70 0c 00 70 18 00 38 1c 00 78 ff     ..p..p..p..8..x.
     cbe:	01 fe 13 19 4b 16 01 00 1f f0 00 ff fe 00 1c 1f     ....K...........
     cce:	00 1c 07 80 1c 03 80 1c 03 80 1c 03 80 1c 03 80     ................
     cde:	1c 07 00 1c 06 00 1c 1c 00 1f fe 00 1f ff 00 1c     ................
     cee:	0f 80 1c 03 c0 1c 01 e0 1c 00 e0 1c 00 e0 1c 00     ................
     cfe:	e0 1c 00 e0 1c 01 e0 1c 01 c0 1c 07 80 3f ff 00     .............?..
     d0e:	ff fc 00 13 19 4b 15 01 00 00 fe 00 03 ff c0 07     .....K..........
     d1e:	07 c0 0c 01 80 18 00 00 38 00 00 70 00 00 70 00     ........8..p..p.
     d2e:	00 70 00 00 e0 00 00 e0 00 00 e0 00 00 e0 00 00     .p..............
     d3e:	e0 00 00 e0 00 00 e0 00 00 e0 00 00 70 00 00 70     ............p..p
     d4e:	00 00 78 00 00 3c 00 40 1e 01 e0 0f 87 80 07 fe     ..x..<.@........
     d5e:	00 01 f8 00 15 19 4b 18 01 00 1f f8 00 ff ff 00     ......K.........
     d6e:	1c 0f 80 1c 03 c0 1c 01 e0 1c 00 f0 1c 00 70 1c     ..............p.
     d7e:	00 70 1c 00 78 1c 00 38 1c 00 38 1c 00 38 1c 00     .p..x..8..8..8..
     d8e:	38 1c 00 38 1c 00 38 1c 00 38 1c 00 70 1c 00 70     8..8..8..8..p..p
     d9e:	1c 00 70 1c 00 e0 1c 01 e0 1c 03 c0 1c 0f 80 3f     ..p............?
     dae:	fe 00 ff f8 00 12 19 4b 14 01 00 ff ff 00 3f ff     .......K......?.
     dbe:	00 1c 03 00 1c 01 00 1c 01 00 1c 00 00 1c 00 00     ................
     dce:	1c 00 00 1c 00 00 1c 00 00 1f fc 00 1f fc 00 1c     ................
     dde:	08 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00     ................
     dee:	00 1c 00 00 1c 00 00 1c 00 40 1c 00 c0 1c 01 80     .........@......
     dfe:	3f ff 80 ff ff 80 11 19 4b 13 01 00 ff ff 80 3f     ?.......K......?
     e0e:	ff 80 1c 03 00 1c 01 00 1c 01 00 1c 00 00 1c 00     ................
     e1e:	00 1c 00 00 1c 00 00 1c 00 00 1f fc 00 1f f8 00     ................
     e2e:	1c 18 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c     ................
     e3e:	00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00     ................
     e4e:	00 3e 00 00 ff 80 00 15 19 4b 17 01 00 00 7f 00     .>.......K......
     e5e:	01 ff c0 07 03 e0 0e 00 c0 1c 00 00 38 00 00 30     ............8..0
     e6e:	00 00 70 00 00 70 00 00 e0 00 00 e0 00 00 e0 00     ..p..p..........
     e7e:	00 e0 00 00 e0 0f f8 e0 01 e0 e0 00 e0 e0 00 e0     ................
     e8e:	70 00 e0 70 00 e0 78 00 e0 3c 00 e0 1e 00 e0 0f     p..p..x..<......
     e9e:	81 c0 07 ff 80 01 fc 00 18 19 4b 1a 01 00 ff 81     ..........K.....
     eae:	ff 3e 00 7c 1c 00 38 1c 00 38 1c 00 38 1c 00 38     .>.|..8..8..8..8
     ebe:	1c 00 38 1c 00 38 1c 00 38 1c 00 38 1c 00 38 1f     ..8..8..8..8..8.
     ece:	ff f8 1f ff f8 1c 00 38 1c 00 38 1c 00 38 1c 00     .......8..8..8..
     ede:	38 1c 00 38 1c 00 38 1c 00 38 1c 00 38 1c 00 38     8..8..8..8..8..8
     eee:	1c 00 38 3e 00 7c ff 81 ff 09 19 32 0c 01 00 ff     ..8>.|.....2....
     efe:	80 3e 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c     .>..............
     f0e:	00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c     ................
     f1e:	00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 3e 00 ff     .............>..
     f2e:	80 0f 20 40 0c fc f9 07 fe 00 f8 00 70 00 70 00     .. @........p.p.
     f3e:	70 00 70 00 70 00 70 00 70 00 70 00 70 00 70 00     p.p.p.p.p.p.p.p.
     f4e:	70 00 70 00 70 00 70 00 70 00 70 00 70 00 70 00     p.p.p.p.p.p.p.p.
     f5e:	70 00 70 00 70 00 70 00 70 00 60 00 60 00 e0 00     p.p.p.p.p.`.`...
     f6e:	c0 31 80 7f 00 fc 00 16 19 4b 17 01 00 ff 87 f8     .1.......K......
     f7e:	3e 01 c0 1c 03 80 1c 07 00 1c 0e 00 1c 0c 00 1c     >...............
     f8e:	18 00 1c 38 00 1c 70 00 1c e0 00 1d c0 00 1f 80     ...8..p.........
     f9e:	00 1f c0 00 1d e0 00 1c e0 00 1c 70 00 1c 38 00     ...........p..8.
     fae:	1c 3c 00 1c 1e 00 1c 0f 00 1c 07 80 1c 03 c0 1c     .<..............
     fbe:	03 e0 3e 01 fc ff 80 f0 12 19 4b 13 01 00 ff 80     ..>.......K.....
     fce:	00 3e 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00     .>..............
     fde:	1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c     ................
     fee:	00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00     ................
     ffe:	00 1c 00 00 1c 00 00 1c 00 00 1c 00 c0 1c 00 80     ................
    100e:	1e 01 80 3f ff 80 ff ff 80 1e 19 64 20 01 00 fe     ...?.......d ...
    101e:	00 01 f8 1e 00 03 e0 1f 00 03 e0 1f 00 03 e0 1f     ................
    102e:	00 07 e0 1b 80 06 e0 1b 80 0e e0 19 c0 0c e0 19     ................
    103e:	c0 0c e0 18 e0 1c e0 18 e0 18 e0 18 e0 38 e0 18     .............8..
    104e:	70 30 e0 18 70 70 e0 18 38 60 e0 18 38 60 e0 18     p0..pp..8`..8`..
    105e:	1c e0 e0 18 1c c0 e0 18 1f c0 e0 18 0f 80 e0 18     ................
    106e:	0f 80 e0 18 07 80 e0 18 07 00 e0 3c 07 01 e0 ff     ...........<....
    107e:	02 07 fc 18 19 4b 1a 01 00 f8 01 ff 3c 00 7c 1e     .....K......<.|.
    108e:	00 38 1e 00 38 1f 00 38 1f 80 38 1d 80 38 1d c0     .8..8..8..8..8..
    109e:	38 1c e0 38 1c 60 38 1c 70 38 1c 38 38 1c 1c 38     8..8.`8.p8.88..8
    10ae:	1c 1c 38 1c 0e 38 1c 07 38 1c 07 38 1c 03 b8 1c     ..8..8..8..8....
    10be:	03 f8 1c 01 f8 1c 00 f8 1c 00 f8 1c 00 78 3e 00     .............x>.
    10ce:	38 ff 80 18 15 19 4b 18 01 00 00 fc 00 03 ff 00     8.....K.........
    10de:	07 07 80 0c 03 c0 18 01 e0 38 00 e0 70 00 70 70     .........8..p.pp
    10ee:	00 70 60 00 78 e0 00 38 e0 00 38 e0 00 38 e0 00     .p`.x..8..8..8..
    10fe:	38 e0 00 38 e0 00 38 e0 00 38 f0 00 30 70 00 70     8..8..8..8..0p.p
    110e:	70 00 60 78 00 e0 3c 00 c0 1e 01 80 0f 07 00 07     p.`x..<.........
    111e:	fe 00 01 f8 00 12 19 4b 15 01 00 1f f8 00 ff fe     .......K........
    112e:	00 1c 1f 00 1c 07 80 1c 03 c0 1c 01 c0 1c 01 c0     ................
    113e:	1c 01 c0 1c 01 c0 1c 01 c0 1c 03 80 1c 07 80 1c     ................
    114e:	0f 00 1d fe 00 1c f8 00 1c 00 00 1c 00 00 1c 00     ................
    115e:	00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00     ................
    116e:	3e 00 00 ff 80 00 18 1f 5d 18 01 fa 00 fc 00 03     >.......].......
    117e:	ff 00 07 07 80 0c 03 c0 18 01 e0 38 00 e0 70 00     ...........8..p.
    118e:	70 70 00 70 60 00 78 e0 00 38 e0 00 38 e0 00 38     pp.p`.x..8..8..8
    119e:	e0 00 38 e0 00 38 e0 00 38 e0 00 38 f0 00 30 70     ..8..8..8..8..0p
    11ae:	00 70 70 00 70 38 00 e0 3c 00 c0 1e 01 c0 0f 07     .pp.p8..<.......
    11be:	80 07 fe 00 01 fc 00 00 0e 00 00 07 00 00 03 82     ................
    11ce:	00 01 e3 00 00 fe 00 00 3c 15 19 4b 16 01 00 1f     ........<..K....
    11de:	f0 00 ff fe 00 1c 1f 00 1c 07 00 1c 07 80 1c 03     ................
    11ee:	80 1c 03 80 1c 03 80 1c 03 80 1c 07 00 1c 06 00     ................
    11fe:	1c 1c 00 1f f0 00 1c 70 00 1c 38 00 1c 38 00 1c     .......p..8..8..
    120e:	1c 00 1c 1e 00 1c 0e 00 1c 07 00 1c 07 80 1c 03     ................
    121e:	80 1c 03 c0 3e 01 f8 ff 81 f0 0f 19 32 13 02 00     ....>.......2...
    122e:	07 e0 1f f8 78 7c 70 18 e0 00 e0 00 e0 00 f0 00     ....x|p.........
    123e:	f8 00 7e 00 3f 80 1f e0 07 f8 01 fc 00 7c 00 1e     ..~.?........|..
    124e:	00 1e 00 0e 80 0e 80 0e c0 1c e0 1c f0 78 ff f0     .............x..
    125e:	1f 80 15 19 4b 16 00 00 7f ff f8 ff ff f8 c0 70     ....K..........p
    126e:	18 c0 70 18 80 70 10 00 70 00 00 70 00 00 70 00     ..p..p..p..p..p.
    127e:	00 70 00 00 70 00 00 70 00 00 70 00 00 70 00 00     .p..p..p..p..p..
    128e:	70 00 00 70 00 00 70 00 00 70 00 00 70 00 00 70     p..p..p..p..p..p
    129e:	00 00 70 00 00 70 00 00 70 00 00 70 00 00 f8 00     ..p..p..p..p....
    12ae:	03 fe 00 18 19 4b 1a 01 00 ff 81 ff 3e 00 7c 1c     .....K......>.|.
    12be:	00 38 1c 00 38 1c 00 38 1c 00 38 1c 00 38 1c 00     .8..8..8..8..8..
    12ce:	38 1c 00 38 1c 00 38 1c 00 38 1c 00 38 1c 00 38     8..8..8..8..8..8
    12de:	1c 00 38 1c 00 38 1c 00 38 1c 00 38 1c 00 38 1c     ..8..8..8..8..8.
    12ee:	00 70 0e 00 70 0e 00 70 0f 00 e0 07 c1 c0 03 ff     .p..p..p........
    12fe:	80 00 7e 00 19 19 64 1a 00 00 ff 80 7f 80 1c 00     ..~...d.........
    130e:	0e 00 1e 00 0c 00 0e 00 1c 00 0e 00 18 00 0f 00     ................
    131e:	18 00 07 00 38 00 07 00 30 00 03 80 30 00 03 80     ....8...0...0...
    132e:	70 00 03 c0 60 00 01 c0 e0 00 01 c0 e0 00 01 e0     p...`...........
    133e:	c0 00 00 e1 c0 00 00 e1 80 00 00 71 80 00 00 73     ...........q...s
    134e:	80 00 00 7b 00 00 00 3b 00 00 00 3f 00 00 00 3e     ...{...;...?...>
    135e:	00 00 00 1e 00 00 00 1e 00 00 00 08 00 00 21 19     ..............!.
    136e:	7d 22 00 00 ff 80 c0 7f 80 1c 00 c0 0e 00 1c 00     }"..............
    137e:	c0 0c 00 1c 01 e0 0c 00 0e 01 e0 1c 00 0e 01 e0     ................
    138e:	1c 00 0e 03 f0 18 00 0e 03 70 18 00 07 03 30 18     .........p....0.
    139e:	00 07 07 38 38 00 07 06 38 38 00 07 06 18 30 00     ...88...88....0.
    13ae:	07 0e 1c 30 00 03 8c 1c 30 00 03 8c 0e 70 00 03     ...0....0....p..
    13be:	9c 0e 60 00 03 98 0e 60 00 01 d8 07 60 00 01 f8     ..`....`....`...
    13ce:	07 60 00 01 f0 07 e0 00 01 f0 03 c0 00 01 f0 03     .`..............
    13de:	c0 00 00 e0 03 c0 00 00 e0 01 c0 00 00 c0 01 80     ................
    13ee:	00 17 19 4b 19 01 00 ff 87 fc 3c 00 f0 1c 00 e0     ...K......<.....
    13fe:	1e 01 c0 0f 01 80 07 03 80 07 87 00 03 c6 00 01     ................
    140e:	ee 00 00 fc 00 00 fc 00 00 78 00 00 78 00 00 7c     .........x..x..|
    141e:	00 00 fe 00 01 ce 00 01 cf 00 03 87 80 03 03 80     ................
    142e:	07 03 c0 0e 01 e0 0c 00 e0 1c 00 f0 3c 00 f8 ff     ............<...
    143e:	03 fe 17 19 4b 18 00 00 f8 01 fe 3c 00 78 1e 00     ....K......<.x..
    144e:	60 0e 00 e0 07 00 c0 07 81 c0 03 81 80 03 c3 80     `...............
    145e:	01 c3 00 00 e7 00 00 ee 00 00 7e 00 00 7c 00 00     ..........~..|..
    146e:	38 00 00 38 00 00 38 00 00 38 00 00 38 00 00 38     8..8..8..8..8..8
    147e:	00 00 38 00 00 38 00 00 38 00 00 38 00 00 7c 00     ..8..8..8..8..|.
    148e:	01 ff 00 12 19 4b 15 01 00 3f ff c0 3f ff c0 30     .....K...?..?..0
    149e:	03 80 20 07 80 60 0f 00 60 0e 00 00 1e 00 00 1c     .. ..`..`.......
    14ae:	00 00 38 00 00 78 00 00 70 00 00 f0 00 01 e0 00     ..8..x..p.......
    14be:	01 c0 00 03 c0 00 03 80 00 07 00 00 0f 00 00 0e     ................
    14ce:	00 00 1e 00 40 3c 00 40 38 00 c0 78 00 c0 7f ff     ....@<.@8..x....
    14de:	c0 ff ff c0 09 25 4a 0c 03 fa ff 80 ff 80 e0 00     .....%J.........
    14ee:	e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
    14fe:	e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
    150e:	e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
    151e:	e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00     ................
    152e:	ff 80 ff 80 11 26 72 13 01 f9 c0 00 00 e0 00 00     .....&r.........
    153e:	70 00 00 70 00 00 30 00 00 38 00 00 38 00 00 18     p..p..0..8..8...
    154e:	00 00 1c 00 00 1c 00 00 0e 00 00 0e 00 00 06 00     ................
    155e:	00 07 00 00 07 00 00 03 00 00 03 80 00 03 80 00     ................
    156e:	01 c0 00 01 c0 00 00 c0 00 00 e0 00 00 e0 00 00     ................
    157e:	60 00 00 70 00 00 70 00 00 38 00 00 38 00 00 18     `..p..p..8..8...
    158e:	00 00 1c 00 00 1c 00 00 0c 00 00 0e 00 00 0e 00     ................
    159e:	00 07 00 00 07 00 00 03 00 00 01 80 09 25 4a 0d     .............%J.
    15ae:	01 fa ff 80 ff 80 03 80 03 80 03 80 03 80 03 80     ................
    15be:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    15ce:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    15de:	03 80 03 80 03 80 03 80 03 80 03 80 03 80 03 80     ................
    15ee:	03 80 03 80 03 80 03 80 ff 80 ff 80 10 13 26 14     ..............&.
    15fe:	02 0b 00 80 03 80 03 c0 03 c0 07 e0 06 e0 0e e0     ................
    160e:	0c 70 0c 70 1c 78 18 38 18 38 30 1c 30 1c 70 1c     .p.p.x.8.80.0.p.
    161e:	60 0e 60 0e e0 07 80 06 11 02 06 13 01 fb 7f ff     `.`.............
    162e:	80 ff ff 00 08 09 09 0d 01 14 e0 f0 70 38 38 1c     ............p88.
    163e:	0e 06 03 10 12 24 12 02 00 03 e0 1f f0 38 78 70     .....$.......8xp
    164e:	38 f0 38 c0 38 00 38 00 78 07 f8 1c 38 70 38 60     8.8.8.8.x...8p8`
    165e:	38 e0 38 e0 38 e0 78 f1 b9 7f 3f 3c 18 12 1e 5a     8.8.8.x...?<...Z
    166e:	14 00 00 0c 00 00 7c 00 00 bc 00 00 1c 00 00 1c     ......|.........
    167e:	00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00     ................
    168e:	00 1c 00 00 1c 00 00 1c 3c 00 1c ff 00 1d 8f 00     ........<.......
    169e:	1f 07 80 1e 03 80 1c 03 c0 1c 01 c0 1c 01 c0 1c     ................
    16ae:	01 c0 1c 01 c0 1c 01 c0 1c 01 80 1c 01 80 1c 03     ................
    16be:	80 1e 03 00 1f 86 00 07 fc 00 01 f0 00 0f 12 24     ...............$
    16ce:	11 02 00 01 f8 07 fe 1c 1c 38 0c 70 04 70 00 e0     .........8.p.p..
    16de:	00 e0 00 e0 00 e0 00 e0 00 e0 00 f0 00 70 04 78     .............p.x
    16ee:	06 3e 1c 1f f8 07 e0 13 1e 5a 15 02 00 00 03 00     .>.......Z......
    16fe:	00 3f 00 00 0f 00 00 07 00 00 07 00 00 07 00 00     .?..............
    170e:	07 00 00 07 00 00 07 00 00 07 00 00 07 00 00 07     ................
    171e:	00 03 f7 00 0f ff 00 1c 1f 00 38 0f 00 30 07 00     ..........8..0..
    172e:	70 07 00 60 07 00 e0 07 00 e0 07 00 e0 07 00 e0     p..`............
    173e:	07 00 e0 07 00 f0 07 00 70 0f 00 78 1f 00 3c 37     ........p..x..<7
    174e:	e0 1f e7 c0 07 83 00 0e 12 24 12 02 00 03 c0 0f     .........$......
    175e:	f0 1c 78 30 38 70 1c 60 1c e0 1c ff fc ff f8 e0     ..x08p.`........
    176e:	00 e0 00 e0 00 f0 00 70 04 78 0c 3c 38 1f f0 07     .......p.x.<8...
    177e:	c0 0f 1e 3c 0c 01 00 00 78 01 fe 03 1c 06 08 0e     ...<....x.......
    178e:	00 0c 00 0c 00 1c 00 1c 00 1c 00 1c 00 1c 00 7f     ................
    179e:	f0 ff e0 1c 40 1c 00 1c 00 1c 00 1c 00 1c 00 1c     ....@...........
    17ae:	00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 3e     ...............>
    17be:	00 ff c0 12 1b 51 13 01 f7 03 e0 c0 0f ff c0 1c     .....Q..........
    17ce:	3f 00 38 1c 00 70 0e 00 70 0e 00 70 0e 00 70 0e     ?.8..p..p..p..p.
    17de:	00 78 1c 00 3c 38 00 1f f0 00 07 c0 00 06 00 00     .x..<8..........
    17ee:	0c 00 00 1c 00 00 1f e0 00 0f fe 00 0c 3f 80 18     .............?..
    17fe:	03 c0 70 01 c0 e0 01 c0 e0 01 c0 e0 03 80 f0 03     ..p.............
    180e:	80 7c 0f 00 3f fc 00 07 f0 00 15 1e 5a 16 01 00     .|..?.......Z...
    181e:	0c 00 00 fc 00 00 7c 00 00 1c 00 00 1c 00 00 1c     ......|.........
    182e:	00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00     ................
    183e:	00 1c 00 00 1c 1f 00 1c 3f 80 1c e3 c0 1d 81 c0     ........?.......
    184e:	1f 01 c0 1e 01 c0 1e 01 c0 1c 01 c0 1c 01 c0 1c     ................
    185e:	01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01     ................
    186e:	c0 1c 01 c0 3e 03 c0 ff 8f f8 09 1b 36 0b 01 00     ....>.......6...
    187e:	1c 00 3c 00 3c 00 3c 00 18 00 00 00 00 00 00 00     ..<.<.<.........
    188e:	00 00 0c 00 fc 00 3c 00 1c 00 1c 00 1c 00 1c 00     ......<.........
    189e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    18ae:	1c 00 3c 00 ff 80 0b 24 48 0a fc f7 00 e0 01 e0     ..<....$H.......
    18be:	01 e0 01 e0 00 c0 00 00 00 00 00 00 00 00 00 60     ...............`
    18ce:	07 e0 01 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ................
    18de:	00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0 00 e0     ................
    18ee:	00 e0 00 e0 00 e0 00 c0 00 c0 01 c0 01 80 23 00     ..............#.
    18fe:	fe 00 f8 00 13 1e 5a 14 01 00 0c 00 00 fc 00 00     ......Z.........
    190e:	3c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c     <...............
    191e:	00 00 1c 00 00 1c 00 00 1c 00 00 1c 00 00 1c 1f     ................
    192e:	e0 1c 07 00 1c 0e 00 1c 1c 00 1c 30 00 1c e0 00     ...........0....
    193e:	1d c0 00 1f 80 00 1d c0 00 1d e0 00 1c f0 00 1c     ................
    194e:	78 00 1c 38 00 1c 1c 00 1c 1e 00 1c 0f 00 3c 07     x..8..........<.
    195e:	80 ff 03 e0 09 1e 3c 0b 01 00 0c 00 fc 00 7c 00     ......<.......|.
    196e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    197e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    198e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    199e:	1c 00 3c 00 ff 80 1f 12 48 20 01 00 0c 1e 03 c0     ..<.....H ......
    19ae:	fc 7f 0f e0 3c c7 98 f0 1d 83 b0 70 1f 03 e0 70     ....<......p...p
    19be:	1e 03 c0 70 1c 03 80 70 1c 03 80 70 1c 03 80 70     ...p...p...p...p
    19ce:	1c 03 80 70 1c 03 80 70 1c 03 80 70 1c 03 80 70     ...p...p...p...p
    19de:	1c 03 80 70 1c 03 80 70 1c 03 80 70 3c 07 c0 f0     ...p...p...p<...
    19ee:	ff 9f f3 fe 15 12 36 16 01 00 0c 0f 00 fc 3f 80     ......6.......?.
    19fe:	3c 63 c0 1d 81 c0 1d 01 c0 1e 01 c0 1e 01 c0 1c     <c..............
    1a0e:	01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01     ................
    1a1e:	c0 1c 01 c0 1c 01 c0 1c 01 c0 3e 03 c0 ff 8f f8     ..........>.....
    1a2e:	10 12 24 14 02 00 03 e0 0f f8 1c 3c 30 1e 70 0e     ..$........<0.p.
    1a3e:	60 0f e0 07 e0 07 e0 07 e0 07 e0 07 e0 07 f0 06     `...............
    1a4e:	70 0e 78 0c 3e 38 1f f0 07 c0 12 1b 51 15 01 f7     p.x.>8......Q...
    1a5e:	0c 1c 00 fc 7f 00 3c 8f 80 1d 07 80 1e 03 80 1e     ......<.........
    1a6e:	03 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01     ................
    1a7e:	c0 1c 01 80 1c 01 80 1c 03 80 1e 03 00 1f 06 00     ................
    1a8e:	1d fc 00 1c 78 00 1c 00 00 1c 00 00 1c 00 00 1c     ....x...........
    1a9e:	00 00 1c 00 00 1c 00 00 1c 00 00 3e 00 00 ff 80     ...........>....
    1aae:	00 13 1b 51 15 02 f7 01 f1 80 07 fb 00 1c 1f 00     ...Q............
    1abe:	38 0f 00 30 07 00 70 07 00 60 07 00 e0 07 00 e0     8..0..p..`......
    1ace:	07 00 e0 07 00 e0 07 00 e0 07 00 f0 07 00 70 0f     ..............p.
    1ade:	00 78 1f 00 3c 37 00 1f e7 00 07 87 00 00 07 00     .x..<7..........
    1aee:	00 07 00 00 07 00 00 07 00 00 07 00 00 07 00 00     ................
    1afe:	07 00 00 07 00 00 3f e0 0e 12 24 10 01 00 0c 3c     ......?...$....<
    1b0e:	fc fc 3d 8c 1d 0c 1f 04 1e 00 1e 00 1c 00 1c 00     ..=.............
    1b1e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1e 00     ................
    1b2e:	ff 80 0b 12 24 0f 02 00 1f 00 7f 80 73 c0 e1 80     ....$.......s...
    1b3e:	e0 80 f0 00 f8 00 7e 00 1f 00 0f c0 03 e0 01 e0     ......~.........
    1b4e:	80 e0 80 e0 c0 e0 e1 c0 ff 80 3e 00 0d 19 32 0e     ..........>...2.
    1b5e:	00 00 04 00 0c 00 1c 00 1c 00 1c 00 1c 00 1c 00     ................
    1b6e:	7f f8 ff f0 1c 20 1c 00 1c 00 1c 00 1c 00 1c 00     ..... ..........
    1b7e:	1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1c 00 1e 38     ...............8
    1b8e:	0f f0 07 80 15 12 36 15 00 00 0c 00 c0 fc 0f c0     ......6.........
    1b9e:	1c 01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c     ................
    1bae:	01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01 c0 1c 01     ................
    1bbe:	c0 1c 03 c0 1c 07 c0 1e 1d c8 0f f1 f0 07 c0 c0     ................
    1bce:	13 12 36 14 00 00 ff 07 e0 3c 01 c0 1c 01 80 1c     ..6......<......
    1bde:	03 80 0e 03 00 0e 03 00 0e 06 00 07 06 00 07 06     ................
    1bee:	00 03 8c 00 03 8c 00 03 9c 00 01 d8 00 01 d8 00     ................
    1bfe:	00 f0 00 00 f0 00 00 f0 00 00 40 00 1c 12 48 1c     ..........@...H.
    1c0e:	00 00 ff 03 07 f0 3c 07 00 c0 1c 07 00 c0 1c 07     ......<.........
    1c1e:	81 80 1c 0f 81 80 0e 0f 81 80 0e 0d c3 80 0e 19     ................
    1c2e:	c3 00 06 19 c3 00 07 18 e3 00 07 30 e6 00 03 30     ...........0...0
    1c3e:	76 00 03 b0 76 00 03 e0 7c 00 01 e0 3c 00 01 e0     v...v...|...<...
    1c4e:	3c 00 01 c0 3c 00 01 80 10 00 14 12 36 14 00 00     <...<.......6...
    1c5e:	7f 8f e0 1e 03 80 0e 03 00 07 06 00 07 8c 00 03     ................
    1c6e:	9c 00 01 d8 00 00 f0 00 00 f0 00 00 f0 00 01 b8     ................
    1c7e:	00 01 9c 00 03 1e 00 06 0e 00 0e 07 00 0c 03 80     ................
    1c8e:	3c 03 c0 ff 0f f0 14 1b 51 14 ff f7 7f 83 f0 1e     <.......Q.......
    1c9e:	00 e0 0e 00 c0 0e 00 c0 07 01 80 07 01 80 07 03     ................
    1cae:	00 03 83 00 03 83 00 01 c6 00 01 c6 00 01 c6 00     ................
    1cbe:	00 ec 00 00 ec 00 00 78 00 00 78 00 00 78 00 00     .......x..x..x..
    1cce:	30 00 00 30 00 00 60 00 00 60 00 00 e0 00 01 c0     0..0..`..`......
    1cde:	00 43 80 00 7f 00 00 fe 00 00 7c 00 00 0f 12 24     .C........|....$
    1cee:	12 01 00 3f fe 3f fe 60 1c 60 38 40 38 00 70 00     ...?.?.`.`8@8.p.
    1cfe:	e0 01 c0 01 c0 03 80 07 00 07 00 0e 00 1c 02 38     ...............8
    1d0e:	02 38 06 7f fe ff fe 0b 25 4a 0e 02 fa 00 40 01     .8......%J....@.
    1d1e:	e0 03 80 07 00 06 00 0e 00 0e 00 0e 00 0e 00 0e     ................
    1d2e:	00 0f 00 07 00 07 00 07 00 07 00 07 00 0e 00 1c     ................
    1d3e:	00 7c 00 fe 00 0f 00 07 00 07 00 07 00 07 00 07     .|..............
    1d4e:	00 0f 00 0e 00 0e 00 0e 00 0e 00 0e 00 0e 00 07     ................
    1d5e:	00 03 00 01 c0 00 40 03 29 29 09 03 f8 60 e0 e0     ......@.))...`..
    1d6e:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    1d7e:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    1d8e:	e0 e0 e0 e0 e0 c0 0b 25 4a 0e 01 fa 40 00 70 00     .......%J...@.p.
    1d9e:	38 00 1c 00 0c 00 0e 00 0e 00 0e 00 0e 00 0e 00     8...............
    1dae:	1e 00 1c 00 1c 00 1c 00 1c 00 1c 00 0e 00 0f c0     ................
    1dbe:	03 e0 07 00 0e 00 0c 00 1c 00 1c 00 1c 00 1c 00     ................
    1dce:	1e 00 0e 00 0e 00 0e 00 0e 00 0e 00 0c 00 1c 00     ................
    1dde:	38 00 70 00 c0 00 12 06 12 14 01 09 0f 00 c0 1f     8.p.............
    1dee:	c0 80 3f e1 00 63 ff 00 c0 fe 00 80 38 00 ff        ..?..c......8..

00001dfd <u8g_font_4x6>:
    1dfd:	01 04 06 00 ff 05 01 03 01 fa 20 ff ff 05 ff 05     .......... .....
    1e0d:	ff 07 00 40 12 15 45 80 80 80 00 80 05 32 42 a0     ...@..E......2B.
    1e1d:	a0 02 45 45 a0 f0 a0 f0 a0 01 36 46 40 e0 c0 20     ..EE......6F@.. 
    1e2d:	e0 40 02 35 45 80 20 40 80 20 02 45 45 40 a0 40     .@.5E. @. .EE@.@
    1e3d:	a0 50 15 12 42 80 80 11 26 46 40 80 80 80 80 40     .P..B...&F@....@
    1e4d:	01 26 46 80 40 40 40 40 80 02 35 45 a0 40 e0 40     .&F.@@@@..5E.@.@
    1e5d:	a0 02 35 45 40 40 e0 40 40 01 22 42 40 80 04 31     ..5E@@.@@."B@..1
    1e6d:	41 e0 12 11 41 80 02 35 45 20 20 40 80 80 02 35     A...A..5E  @...5
    1e7d:	45 40 a0 e0 a0 40 02 35 45 40 c0 40 40 e0 02 35     E@...@.5E@.@@..5
    1e8d:	45 40 a0 20 40 e0 02 35 45 e0 20 40 20 c0 02 35     E@. @..5E. @ ..5
    1e9d:	45 a0 a0 e0 20 20 02 35 45 e0 80 c0 20 c0 02 35     E...  .5E... ..5
    1ead:	45 60 80 c0 a0 40 02 35 45 e0 20 40 80 80 02 35     E`...@.5E. @...5
    1ebd:	45 60 a0 40 a0 c0 02 35 45 40 a0 60 20 c0 12 14     E`.@...5E@.` ...
    1ecd:	44 80 00 00 80 01 25 45 40 00 00 40 80 02 35 45     D.....%E@..@..5E
    1edd:	20 40 80 40 20 03 33 43 e0 00 e0 02 35 45 80 40      @.@ .3C....5E.@
    1eed:	20 40 80 02 35 45 c0 20 40 00 40 02 35 45 60 a0      @..5E. @.@.5E`.
    1efd:	a0 80 60 02 35 45 40 a0 e0 a0 a0 02 35 45 c0 a0     ..`.5E@.....5E..
    1f0d:	c0 a0 c0 02 35 45 40 a0 80 a0 40 02 35 45 c0 a0     ....5E@...@.5E..
    1f1d:	a0 a0 c0 02 35 45 e0 80 c0 80 e0 02 35 45 e0 80     ....5E......5E..
    1f2d:	c0 80 80 02 35 45 60 80 a0 a0 60 02 35 45 a0 a0     ....5E`...`.5E..
    1f3d:	e0 a0 a0 02 35 45 e0 40 40 40 e0 02 35 45 20 20     ....5E.@@@..5E  
    1f4d:	20 a0 40 02 35 45 a0 a0 c0 a0 a0 02 35 45 80 80      .@.5E......5E..
    1f5d:	80 80 e0 02 35 45 a0 e0 e0 a0 a0 02 35 45 20 a0     ....5E......5E .
    1f6d:	e0 a0 80 02 35 45 40 a0 a0 a0 40 02 35 45 c0 a0     ....5E@...@.5E..
    1f7d:	c0 80 80 01 36 46 40 a0 a0 a0 40 20 02 35 45 c0     ....6F@...@ .5E.
    1f8d:	a0 c0 a0 a0 02 35 45 60 80 40 20 c0 02 35 45 e0     .....5E`.@ ..5E.
    1f9d:	40 40 40 40 02 35 45 a0 a0 a0 a0 e0 02 35 45 a0     @@@@.5E......5E.
    1fad:	a0 a0 e0 40 02 35 45 a0 a0 e0 e0 a0 02 35 45 a0     ...@.5E......5E.
    1fbd:	a0 40 a0 a0 02 35 45 a0 a0 40 40 40 02 35 45 e0     .@...5E..@@@.5E.
    1fcd:	20 40 80 e0 12 25 45 c0 80 80 80 c0 02 35 45 80      @...%E......5E.
    1fdd:	80 40 20 20 02 25 45 c0 40 40 40 c0 05 32 42 40     .@  .%E.@@@..2B@
    1fed:	a0 01 31 41 e0 15 22 42 80 40 02 34 44 60 a0 a0     ..1A.."B.@.4D`..
    1ffd:	60 02 35 45 80 c0 a0 a0 c0 02 34 44 60 80 80 60     `.5E......4D`..`
    200d:	02 35 45 20 60 a0 a0 60 02 34 44 40 a0 c0 60 02     .5E `..`.4D@..`.
    201d:	35 45 20 40 e0 40 40 01 35 45 60 a0 60 20 c0 02     5E @.@@.5E`.` ..
    202d:	35 45 80 c0 a0 a0 a0 02 35 45 40 00 c0 40 e0 01     5E......5E@..@..
    203d:	36 46 20 00 20 20 20 c0 02 35 45 80 a0 c0 a0 a0     6F .   ..5E.....
    204d:	02 35 45 c0 40 40 40 e0 02 34 44 a0 e0 a0 a0 02     .5E.@@@..4D.....
    205d:	34 44 c0 a0 a0 a0 02 34 44 40 a0 a0 40 01 35 45     4D.....4D@..@.5E
    206d:	c0 a0 c0 80 80 01 35 45 60 a0 a0 60 20 02 34 44     ......5E`..` .4D
    207d:	a0 c0 80 80 02 34 44 60 c0 20 c0 02 35 45 40 e0     .....4D`. ..5E@.
    208d:	40 40 20 02 34 44 a0 a0 a0 60 02 34 44 a0 a0 a0     @@ .4D...`.4D...
    209d:	40 02 34 44 a0 a0 e0 a0 02 34 44 a0 40 40 a0 01     @.4D.....4D.@@..
    20ad:	35 45 a0 a0 60 20 c0 02 34 44 e0 20 40 e0 01 36     5E..` ..4D. @..6
    20bd:	46 20 40 c0 40 40 20 12 15 45 80 80 80 80 80 01     F @.@@ ..E......
    20cd:	36 46 80 40 60 40 40 80 05 42 42 50 a0 ff ff ff     6F.@`@@..BBP....
    20dd:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    20ed:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 07 00     ................
    20fd:	40 12 15 45 80 00 80 80 80 02 35 45 40 e0 80 e0     @..E......5E@...
    210d:	40 02 35 45 20 40 60 40 a0 02 44 44 90 60 60 90     @.5E @`@..DD.``.
    211d:	02 35 45 a0 40 e0 40 40 12 15 45 80 80 00 80 80     .5E.@.@@..E.....
    212d:	01 36 46 60 c0 a0 60 20 c0 06 31 41 a0 01 46 46     .6F`..` ..1A..FF
    213d:	60 90 d0 d0 90 60 02 35 45 60 a0 60 00 e0 03 43     `....`.5E`.`...C
    214d:	43 50 a0 50 03 32 42 e0 20 04 31 41 e0 03 44 44     CP.P.2B. .1A..DD
    215d:	60 f0 d0 60 06 31 41 e0 04 33 43 40 a0 40 02 35     `..`.1A..3C@.@.5
    216d:	45 40 e0 40 00 e0 03 24 44 c0 40 80 c0 02 25 45     E@.@...$D.@...%E
    217d:	c0 40 80 40 80 15 22 42 40 80 01 35 45 a0 a0 a0     .@.@.."B@..5E...
    218d:	c0 80 02 45 45 70 d0 d0 50 50 14 11 41 80 12 22     ...EEp..PP..A.."
    219d:	42 40 80 03 24 44 40 c0 40 40 02 35 45 40 a0 40     B@..$D@.@@.5E@.@
    21ad:	00 e0 03 43 43 a0 50 a0 01 46 46 80 80 80 50 70     ...CC.P..FF...Pp
    21bd:	10 01 46 46 80 80 b0 10 20 30 01 46 46 c0 40 80     ..FF.... 0.FF.@.
    21cd:	50 b0 10 02 35 45 40 00 40 80 60 02 35 45 80 40     P...5E@.@.`.5E.@
    21dd:	a0 e0 a0 02 35 45 20 40 a0 e0 a0 02 35 45 c0 40     ....5E @....5E.@
    21ed:	a0 e0 a0 02 35 45 60 c0 a0 e0 a0 02 35 45 a0 40     ....5E`.....5E.@
    21fd:	a0 e0 a0 02 35 45 40 40 a0 e0 a0 02 45 45 70 a0     ....5E@@....EEp.
    220d:	f0 a0 b0 01 36 46 40 a0 80 a0 40 80 02 35 45 80     ....6F@...@..5E.
    221d:	e0 c0 80 e0 02 35 45 20 e0 c0 80 e0 02 35 45 60     .....5E .....5E`
    222d:	e0 c0 80 e0 02 35 45 a0 e0 c0 80 e0 02 35 45 80     .....5E......5E.
    223d:	e0 40 40 e0 02 35 45 20 e0 40 40 e0 02 35 45 40     .@@..5E .@@..5E@
    224d:	e0 40 40 e0 02 35 45 a0 40 40 40 e0 02 45 45 e0     .@@..5E.@@@..EE.
    225d:	50 d0 50 e0 02 45 45 50 a0 e0 e0 a0 02 35 45 80     P.P..EEP.....5E.
    226d:	40 a0 a0 40 02 35 45 20 40 a0 a0 40 02 35 45 40     @..@.5E @..@.5E@
    227d:	40 a0 a0 40 02 45 45 70 e0 a0 a0 40 02 35 45 a0     @..@.EEp...@.5E.
    228d:	40 a0 a0 40 03 33 43 a0 40 a0 02 35 45 60 a0 e0     @..@.3C.@..5E`..
    229d:	a0 c0 02 35 45 80 40 a0 a0 e0 02 35 45 20 40 a0     ...5E.@....5E @.
    22ad:	a0 e0 02 35 45 40 00 a0 a0 e0 02 35 45 a0 00 a0     ...5E@.....5E...
    22bd:	a0 e0 02 35 45 20 00 a0 40 40 02 35 45 80 c0 a0     ...5E ..@@.5E...
    22cd:	c0 80 01 36 46 40 a0 c0 a0 e0 80 02 35 45 80 40     ...6F@......5E.@
    22dd:	60 a0 60 02 35 45 20 40 60 a0 60 02 35 45 60 00     `.`.5E @`.`.5E`.
    22ed:	60 a0 60 02 45 45 50 a0 60 a0 60 02 35 45 a0 00     `.`.EEP.`.`.5E..
    22fd:	60 a0 60 02 35 45 40 00 60 a0 60 02 44 44 70 b0     `.`.5E@.`.`.DDp.
    230d:	a0 70 01 35 45 40 a0 80 60 40 02 35 45 80 40 a0     .p.5E@..`@.5E.@.
    231d:	c0 60 02 35 45 20 40 a0 c0 60 02 35 45 c0 40 a0     .`.5E @..`.5E.@.
    232d:	c0 60 02 35 45 a0 40 a0 c0 60 02 35 45 80 40 40     .`.5E.@..`.5E.@@
    233d:	40 e0 02 35 45 20 c0 40 40 e0 02 35 45 40 a0 40     @..5E .@@..5E@.@
    234d:	40 e0 02 35 45 a0 00 c0 40 e0 02 35 45 a0 40 60     @..5E...@..5E.@`
    235d:	a0 40 02 45 45 50 a0 c0 a0 a0 02 35 45 80 40 40     .@.EEP.....5E.@@
    236d:	a0 40 02 35 45 20 40 40 a0 40 02 35 45 40 00 40     .@.5E @@.@.5E@.@
    237d:	a0 40 02 35 45 e0 00 40 a0 40 02 35 45 a0 00 40     .@.5E..@.@.5E..@
    238d:	a0 40 02 35 45 40 00 e0 00 40 02 34 44 60 a0 a0     .@.5E@...@.4D`..
    239d:	c0 02 35 45 80 40 a0 a0 60 02 35 45 20 40 a0 a0     ..5E.@..`.5E @..
    23ad:	60 02 35 45 40 00 a0 a0 60 02 35 45 a0 00 a0 a0     `.5E@...`.5E....
    23bd:	60 01 36 46 20 40 a0 e0 20 c0 01 36 46 80 80 c0     `.6F @.. ..6F...
    23cd:	a0 c0 80 01 36 46 a0 00 a0 e0 20 c0 00              ....6F.... ..

000023da <__ctors_end>:
    23da:	11 24       	eor	r1, r1
    23dc:	1f be       	out	0x3f, r1	; 63
    23de:	cf ef       	ldi	r28, 0xFF	; 255
    23e0:	d4 e0       	ldi	r29, 0x04	; 4
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	cd bf       	out	0x3d, r28	; 61

000023e6 <__do_copy_data>:
    23e6:	11 e0       	ldi	r17, 0x01	; 1
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b1 e0       	ldi	r27, 0x01	; 1
    23ec:	e6 ec       	ldi	r30, 0xC6	; 198
    23ee:	f5 e3       	ldi	r31, 0x35	; 53
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <__do_copy_data+0x10>
    23f2:	05 90       	lpm	r0, Z+
    23f4:	0d 92       	st	X+, r0
    23f6:	ae 33       	cpi	r26, 0x3E	; 62
    23f8:	b1 07       	cpc	r27, r17
    23fa:	d9 f7       	brne	.-10     	; 0x23f2 <__do_copy_data+0xc>

000023fc <__do_clear_bss>:
    23fc:	22 e0       	ldi	r18, 0x02	; 2
    23fe:	ae e3       	ldi	r26, 0x3E	; 62
    2400:	b1 e0       	ldi	r27, 0x01	; 1
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <.do_clear_bss_start>

00002404 <.do_clear_bss_loop>:
    2404:	1d 92       	st	X+, r1

00002406 <.do_clear_bss_start>:
    2406:	a6 33       	cpi	r26, 0x36	; 54
    2408:	b2 07       	cpc	r27, r18
    240a:	e1 f7       	brne	.-8      	; 0x2404 <.do_clear_bss_loop>
    240c:	e0 d0       	rcall	.+448    	; 0x25ce <main>
    240e:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <_exit>

00002412 <__bad_interrupt>:
    2412:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002416 <u8g_setup>:
*/

u8g_t u8g;

void u8g_setup(void)
{  
    2416:	0f 93       	push	r16
    EN, SCK, Green:	Port B, Bit 5
    Arguments for u8g_InitHWSPI are: CS, A0, Reset
      A0 and Reset are not used.
  */
  // u8g_SetPinOutput(PN(1,2));
  u8g_InitHWSPI(&u8g, &u8g_dev_st7920_192x32_hw_spi, PN(2, 4), U8G_PIN_NONE, U8G_PIN_NONE);
    2418:	64 e0       	ldi	r22, 0x04	; 4
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	fb d0       	rcall	.+502    	; 0x2614 <u8g_Pin>
    241e:	0f ef       	ldi	r16, 0xFF	; 255
    2420:	2f ef       	ldi	r18, 0xFF	; 255
    2422:	48 2f       	mov	r20, r24
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	71 e0       	ldi	r23, 0x01	; 1
    2428:	8e ef       	ldi	r24, 0xFE	; 254
    242a:	91 e0       	ldi	r25, 0x01	; 1
    242c:	36 d5       	rcall	.+2668   	; 0x2e9a <u8g_InitHWSPI>
    242e:	0f 91       	pop	r16
    2430:	08 95       	ret

00002432 <sys_init>:

void sys_init(void)
{
#if defined(__AVR__)
  /* select minimal prescaler (max system speed) */
  CLKPR = 0x80;
    2432:	e1 e6       	ldi	r30, 0x61	; 97
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 e8       	ldi	r24, 0x80	; 128
    2438:	80 83       	st	Z, r24
  CLKPR = 0x00;
    243a:	10 82       	st	Z, r1
    243c:	08 95       	ret

0000243e <draw_color_box>:
#endif
}

void draw_color_box(void)
{
    243e:	a0 e0       	ldi	r26, 0x00	; 0
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e5 e2       	ldi	r30, 0x25	; 37
    2444:	f2 e1       	ldi	r31, 0x12	; 18
    2446:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__prologue_saves__+0x8>
  u8g_uint_t w,h;
  u8g_uint_t r, g, b;
  
  w = u8g_GetWidth(&u8g)/32;
    244a:	c0 91 fe 01 	lds	r28, 0x01FE
    244e:	c2 95       	swap	r28
    2450:	c6 95       	lsr	r28
    2452:	c7 70       	andi	r28, 0x07	; 7
  h = u8g_GetHeight(&u8g)/8;
    2454:	d0 91 ff 01 	lds	r29, 0x01FF
    2458:	d6 95       	lsr	r29
    245a:	d6 95       	lsr	r29
    245c:	d6 95       	lsr	r29
    245e:	7c 2e       	mov	r7, r28
    2460:	77 0c       	add	r7, r7
    2462:	77 0c       	add	r7, r7
    2464:	77 0c       	add	r7, r7
    2466:	a1 2c       	mov	r10, r1
  for( b = 0; b < 4; b++ )
    2468:	10 e0       	ldi	r17, 0x00	; 0
    for( g = 0; g < 8; g++ )
      for( r = 0; r < 8; r++ )
      {
        u8g_SetColorIndex(&u8g, (r<<5) |  (g<<2) | b );
    246a:	b1 2c       	mov	r11, r1
    246c:	e1 2c       	mov	r14, r1
    246e:	f1 2c       	mov	r15, r1
    2470:	c7 01       	movw	r24, r14
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	81 2e       	mov	r8, r17
    247c:	88 2a       	or	r8, r24
    247e:	6b 2c       	mov	r6, r11
    2480:	6a 0c       	add	r6, r10
    2482:	91 2c       	mov	r9, r1
    2484:	c1 2c       	mov	r12, r1
    2486:	d1 2c       	mov	r13, r1
    2488:	c6 01       	movw	r24, r12
    248a:	35 e0       	ldi	r19, 0x05	; 5
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	3a 95       	dec	r19
    2492:	e1 f7       	brne	.-8      	; 0x248c <draw_color_box+0x4e>
    2494:	68 2d       	mov	r22, r8
    2496:	68 2b       	or	r22, r24
    2498:	8e ef       	ldi	r24, 0xFE	; 254
    249a:	91 e0       	ldi	r25, 0x01	; 1
    249c:	45 d5       	rcall	.+2698   	; 0x2f28 <u8g_SetColorIndex>
    249e:	0d 2f       	mov	r16, r29
        u8g_DrawBox(&u8g, g*w + b*w*8, r*h, w, h);
    24a0:	2c 2f       	mov	r18, r28
    24a2:	49 2d       	mov	r20, r9
    24a4:	66 2d       	mov	r22, r6
    24a6:	8e ef       	ldi	r24, 0xFE	; 254
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	e1 d6       	rcall	.+3522   	; 0x326e <u8g_DrawBox>
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	c8 1a       	sub	r12, r24
    24b0:	d8 0a       	sbc	r13, r24
    24b2:	9d 0e       	add	r9, r29
    24b4:	88 e0       	ldi	r24, 0x08	; 8
    24b6:	c8 16       	cp	r12, r24
  
  w = u8g_GetWidth(&u8g)/32;
  h = u8g_GetHeight(&u8g)/8;
  for( b = 0; b < 4; b++ )
    for( g = 0; g < 8; g++ )
      for( r = 0; r < 8; r++ )
    24b8:	d1 04       	cpc	r13, r1
    24ba:	31 f7       	brne	.-52     	; 0x2488 <draw_color_box+0x4a>
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	e8 1a       	sub	r14, r24
    24c0:	f8 0a       	sbc	r15, r24
    24c2:	bc 0e       	add	r11, r28
    24c4:	88 e0       	ldi	r24, 0x08	; 8
    24c6:	e8 16       	cp	r14, r24
  u8g_uint_t r, g, b;
  
  w = u8g_GetWidth(&u8g)/32;
  h = u8g_GetHeight(&u8g)/8;
  for( b = 0; b < 4; b++ )
    for( g = 0; g < 8; g++ )
    24c8:	f1 04       	cpc	r15, r1
    24ca:	91 f6       	brne	.-92     	; 0x2470 <draw_color_box+0x32>
    24cc:	1f 5f       	subi	r17, 0xFF	; 255
    24ce:	a7 0c       	add	r10, r7
  u8g_uint_t w,h;
  u8g_uint_t r, g, b;
  
  w = u8g_GetWidth(&u8g)/32;
  h = u8g_GetHeight(&u8g)/8;
  for( b = 0; b < 4; b++ )
    24d0:	14 30       	cpi	r17, 0x04	; 4
    24d2:	59 f6       	brne	.-106    	; 0x246a <draw_color_box+0x2c>
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
      for( r = 0; r < 8; r++ )
      {
        u8g_SetColorIndex(&u8g, (r<<5) |  (g<<2) | b );
        u8g_DrawBox(&u8g, g*w + b*w*8, r*h, w, h);
      }
}
    24d8:	ee e0       	ldi	r30, 0x0E	; 14
    24da:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <__epilogue_restores__+0x8>

000024de <draw_logo>:

void draw_logo(uint8_t d)
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	c8 2f       	mov	r28, r24
  u8g_SetFont(&u8g, u8g_font_gdr25r);
    24e4:	6e e9       	ldi	r22, 0x9E	; 158
    24e6:	75 e0       	ldi	r23, 0x05	; 5
    24e8:	8e ef       	ldi	r24, 0xFE	; 254
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	cb d3       	rcall	.+1942   	; 0x2c84 <u8g_SetFont>
    24ee:	de e1       	ldi	r29, 0x1E	; 30
  u8g_DrawStr(&u8g, 0+d, 30+d, "U");
    24f0:	dc 0f       	add	r29, r28
    24f2:	2e e0       	ldi	r18, 0x0E	; 14
    24f4:	31 e0       	ldi	r19, 0x01	; 1
    24f6:	4d 2f       	mov	r20, r29
    24f8:	6c 2f       	mov	r22, r28
    24fa:	8e ef       	ldi	r24, 0xFE	; 254
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	07 d3       	rcall	.+1550   	; 0x2b0e <u8g_DrawStr>
    2500:	6d e9       	ldi	r22, 0x9D	; 157
    2502:	70 e0       	ldi	r23, 0x00	; 0
  u8g_SetFont(&u8g, u8g_font_gdr30n);
    2504:	8e ef       	ldi	r24, 0xFE	; 254
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	bd d3       	rcall	.+1914   	; 0x2c84 <u8g_SetFont>
    250a:	4a e0       	ldi	r20, 0x0A	; 10
    250c:	4c 0f       	add	r20, r28
    250e:	67 e1       	ldi	r22, 0x17	; 23
  u8g_DrawStr90(&u8g, 23+d,10+d,"8");
    2510:	6c 0f       	add	r22, r28
    2512:	20 e1       	ldi	r18, 0x10	; 16
    2514:	31 e0       	ldi	r19, 0x01	; 1
    2516:	8e ef       	ldi	r24, 0xFE	; 254
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	2f d3       	rcall	.+1630   	; 0x2b7a <u8g_DrawStr90>
    251c:	6e e9       	ldi	r22, 0x9E	; 158
    251e:	75 e0       	ldi	r23, 0x05	; 5
    2520:	8e ef       	ldi	r24, 0xFE	; 254
    2522:	91 e0       	ldi	r25, 0x01	; 1
  u8g_SetFont(&u8g, u8g_font_gdr25r);
    2524:	af d3       	rcall	.+1886   	; 0x2c84 <u8g_SetFont>
    2526:	65 e3       	ldi	r22, 0x35	; 53
    2528:	6c 0f       	add	r22, r28
    252a:	22 e1       	ldi	r18, 0x12	; 18
    252c:	31 e0       	ldi	r19, 0x01	; 1
    252e:	4d 2f       	mov	r20, r29
  u8g_DrawStr(&u8g, 53+d,30+d,"g");
    2530:	8e ef       	ldi	r24, 0xFE	; 254
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	ec d2       	rcall	.+1496   	; 0x2b0e <u8g_DrawStr>
    2536:	43 e2       	ldi	r20, 0x23	; 35
    2538:	4c 0f       	add	r20, r28
    253a:	62 e0       	ldi	r22, 0x02	; 2
    253c:	6c 0f       	add	r22, r28
    253e:	2f e2       	ldi	r18, 0x2F	; 47
    2540:	8e ef       	ldi	r24, 0xFE	; 254
  
  u8g_DrawHLine(&u8g, 2+d, 35+d, 47);
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	4e d6       	rcall	.+3228   	; 0x31e2 <u8g_DrawHLine>
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	4c 0f       	add	r20, r28
    254a:	6d e2       	ldi	r22, 0x2D	; 45
    254c:	6c 0f       	add	r22, r28
    254e:	2c e0       	ldi	r18, 0x0C	; 12
    2550:	8e ef       	ldi	r24, 0xFE	; 254
    2552:	91 e0       	ldi	r25, 0x01	; 1
  u8g_DrawVLine(&u8g, 45+d, 32+d, 12);
    2554:	5d d6       	rcall	.+3258   	; 0x3210 <u8g_DrawVLine>
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <draw_url>:
}

void draw_url(void)
{
  u8g_SetFont(&u8g, u8g_font_4x6);
    255c:	6d ef       	ldi	r22, 0xFD	; 253
    255e:	7d e1       	ldi	r23, 0x1D	; 29
    2560:	8e ef       	ldi	r24, 0xFE	; 254
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	8f d3       	rcall	.+1822   	; 0x2c84 <u8g_SetFont>
    2566:	80 91 ff 01 	lds	r24, 0x01FF
  if ( u8g_GetHeight(&u8g) < 59 )
    256a:	8b 33       	cpi	r24, 0x3B	; 59
    256c:	60 f4       	brcc	.+24     	; 0x2586 <draw_url+0x2a>
    256e:	24 e1       	ldi	r18, 0x14	; 20
  {
    u8g_DrawStr(&u8g, 53,9,"code.google.com");
    2570:	31 e0       	ldi	r19, 0x01	; 1
    2572:	49 e0       	ldi	r20, 0x09	; 9
    2574:	65 e3       	ldi	r22, 0x35	; 53
    2576:	8e ef       	ldi	r24, 0xFE	; 254
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	c9 d2       	rcall	.+1426   	; 0x2b0e <u8g_DrawStr>
    257c:	23 e3       	ldi	r18, 0x33	; 51
    257e:	31 e0       	ldi	r19, 0x01	; 1
    u8g_DrawStr(&u8g, 77,18,"/p/u8glib");
    2580:	42 e1       	ldi	r20, 0x12	; 18
    2582:	6d e4       	ldi	r22, 0x4D	; 77
    2584:	04 c0       	rjmp	.+8      	; 0x258e <draw_url+0x32>
    2586:	24 e2       	ldi	r18, 0x24	; 36
    2588:	31 e0       	ldi	r19, 0x01	; 1
  }
  else
  {
    u8g_DrawStr(&u8g, 1,54,"code.google.com/p/u8glib");
    258a:	46 e3       	ldi	r20, 0x36	; 54
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	8e ef       	ldi	r24, 0xFE	; 254
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	bd c2       	rjmp	.+1402   	; 0x2b0e <u8g_DrawStr>

00002594 <draw>:
}


void draw(void) 
{
  if ( u8g_GetMode(&u8g) == U8G_MODE_R3G3B2 ) 
    2594:	80 91 09 02 	lds	r24, 0x0209
    2598:	88 32       	cpi	r24, 0x28	; 40
    259a:	09 f4       	brne	.+2      	; 0x259e <draw+0xa>
  {
    draw_color_box();
    259c:	50 df       	rcall	.-352    	; 0x243e <draw_color_box>
    259e:	61 e0       	ldi	r22, 0x01	; 1
  }
  u8g_SetColorIndex(&u8g, 1);
    25a0:	8e ef       	ldi	r24, 0xFE	; 254
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	c1 d4       	rcall	.+2434   	; 0x2f28 <u8g_SetColorIndex>
    25a6:	80 91 09 02 	lds	r24, 0x0209
  if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g_GetMode(&u8g)) > 1 ) 
    25aa:	8f 71       	andi	r24, 0x1F	; 31
    25ac:	82 30       	cpi	r24, 0x02	; 2
    25ae:	60 f0       	brcs	.+24     	; 0x25c8 <draw+0x34>
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	95 df       	rcall	.-214    	; 0x24de <draw_logo>
  {
    draw_logo(2);
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	8e ef       	ldi	r24, 0xFE	; 254
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    u8g_SetColorIndex(&u8g, 2);
    25ba:	b6 d4       	rcall	.+2412   	; 0x2f28 <u8g_SetColorIndex>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	8f df       	rcall	.-226    	; 0x24de <draw_logo>
    25c0:	63 e0       	ldi	r22, 0x03	; 3
    25c2:	8e ef       	ldi	r24, 0xFE	; 254
    draw_logo(1);
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	b0 d4       	rcall	.+2400   	; 0x2f28 <u8g_SetColorIndex>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    u8g_SetColorIndex(&u8g, 3);
    25ca:	89 df       	rcall	.-238    	; 0x24de <draw_logo>
    25cc:	c7 cf       	rjmp	.-114    	; 0x255c <draw_url>

000025ce <main>:
  draw_url();
}

int main(void)
{
  sys_init();
    25ce:	31 df       	rcall	.-414    	; 0x2432 <sys_init>
    25d0:	22 df       	rcall	.-444    	; 0x2416 <u8g_setup>
  u8g_setup();
    25d2:	8e ef       	ldi	r24, 0xFE	; 254
    25d4:	91 e0       	ldi	r25, 0x01	; 1
  
  for(;;)
  {  
    u8g_FirstPage(&u8g);
    25d6:	84 d4       	rcall	.+2312   	; 0x2ee0 <u8g_FirstPage>
    25d8:	dd df       	rcall	.-70     	; 0x2594 <draw>
    25da:	8e ef       	ldi	r24, 0xFE	; 254
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    do
    {
      draw();
    25de:	84 d4       	rcall	.+2312   	; 0x2ee8 <u8g_NextPage>
    25e0:	81 11       	cpse	r24, r1
    } while ( u8g_NextPage(&u8g) );
    25e2:	fa cf       	rjmp	.-12     	; 0x25d8 <main+0xa>
    25e4:	8a e0       	ldi	r24, 0x0A	; 10
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	6b d0       	rcall	.+214    	; 0x26c0 <u8g_Delay>
    25ea:	f3 cf       	rjmp	.-26     	; 0x25d2 <main+0x4>

000025ec <u8g_get_avr_io_ptr>:
#endif
#endif
};

static volatile uint8_t *u8g_get_avr_io_ptr(const IO_PTR *base, uint8_t offset)
{
    25ec:	a2 e0       	ldi	r26, 0x02	; 2
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	eb ef       	ldi	r30, 0xFB	; 251
    25f2:	f2 e1       	ldi	r31, 0x12	; 18
    25f4:	b6 c7       	rjmp	.+3948   	; 0x3562 <__prologue_saves__+0x20>
    25f6:	86 0f       	add	r24, r22
  volatile uint8_t * tmp;
  base += offset;
    25f8:	91 1d       	adc	r25, r1
    25fa:	86 0f       	add	r24, r22
    25fc:	91 1d       	adc	r25, r1
    25fe:	42 e0       	ldi	r20, 0x02	; 2
  memcpy_P(&tmp, base, sizeof(volatile uint8_t * PROGMEM));
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	bc 01       	movw	r22, r24
    2604:	ce 01       	movw	r24, r28
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	d3 d7       	rcall	.+4006   	; 0x35b0 <memcpy_P>
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
  return tmp; 
}
    260e:	22 96       	adiw	r28, 0x02	; 2
    2610:	e2 e0       	ldi	r30, 0x02	; 2
    2612:	c3 c7       	rjmp	.+3974   	; 0x359a <__epilogue_restores__+0x20>

00002614 <u8g_Pin>:
uint8_t u8g_Pin(uint8_t port, uint8_t bitpos)
{
  port <<= 3;
  port += bitpos;
  return port;
}
    2614:	98 e0       	ldi	r25, 0x08	; 8
    2616:	89 9f       	mul	r24, r25
    2618:	60 0d       	add	r22, r0
    261a:	11 24       	eor	r1, r1
    261c:	86 2f       	mov	r24, r22
    261e:	08 95       	ret

00002620 <u8g_SetPinOutput>:
  return tmp; 
}

/* set direction to output of the specified pin (internal pin number) */
void u8g_SetPinOutput(uint8_t internal_pin_number)
{
    2620:	cf 93       	push	r28
    2622:	c8 2f       	mov	r28, r24
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) |= _BV(internal_pin_number&7);
    2624:	68 2f       	mov	r22, r24
    2626:	66 95       	lsr	r22
    2628:	66 95       	lsr	r22
    262a:	66 95       	lsr	r22
    262c:	8e e7       	ldi	r24, 0x7E	; 126
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	dd df       	rcall	.-70     	; 0x25ec <u8g_get_avr_io_ptr>
    2632:	fc 01       	movw	r30, r24
    2634:	40 81       	ld	r20, Z
    2636:	c7 70       	andi	r28, 0x07	; 7
    2638:	21 e0       	ldi	r18, 0x01	; 1
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	01 c0       	rjmp	.+2      	; 0x2640 <u8g_SetPinOutput+0x20>
    263e:	22 0f       	add	r18, r18
    2640:	ca 95       	dec	r28
    2642:	ea f7       	brpl	.-6      	; 0x263e <u8g_SetPinOutput+0x1e>
    2644:	24 2b       	or	r18, r20
    2646:	20 83       	st	Z, r18
    2648:	cf 91       	pop	r28
}
    264a:	08 95       	ret

0000264c <u8g_SetPinLevel>:
{
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) &= ~_BV(internal_pin_number&7);
}

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	c8 2f       	mov	r28, r24
    2652:	d6 2f       	mov	r29, r22
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
    2654:	68 2f       	mov	r22, r24
    2656:	66 95       	lsr	r22
    2658:	66 95       	lsr	r22
    265a:	66 95       	lsr	r22
    265c:	86 e7       	ldi	r24, 0x76	; 118
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	c5 df       	rcall	.-118    	; 0x25ec <u8g_get_avr_io_ptr>
    2662:	fc 01       	movw	r30, r24
    2664:	c7 70       	andi	r28, 0x07	; 7
    2666:	8f b7       	in	r24, 0x3f	; 63
  
  if ( level == 0 )
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
    2668:	d1 11       	cpse	r29, r1

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
  
  if ( level == 0 )
    266a:	0b c0       	rjmp	.+22     	; 0x2682 <u8g_SetPinLevel+0x36>
    266c:	f8 94       	cli
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
    266e:	90 81       	ld	r25, Z
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <u8g_SetPinLevel+0x2c>
    2676:	22 0f       	add	r18, r18
    2678:	ca 95       	dec	r28
    267a:	ea f7       	brpl	.-6      	; 0x2676 <u8g_SetPinLevel+0x2a>
    267c:	20 95       	com	r18
    267e:	29 23       	and	r18, r25
    2680:	09 c0       	rjmp	.+18     	; 0x2694 <u8g_SetPinLevel+0x48>
    2682:	f8 94       	cli
   // *tmp &= ~_BV(internal_pin_number&7);
  }
  else
  {
    U8G_ATOMIC_OR(tmp, _BV(internal_pin_number&7));
    2684:	90 81       	ld	r25, Z
    2686:	21 e0       	ldi	r18, 0x01	; 1
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	01 c0       	rjmp	.+2      	; 0x268e <u8g_SetPinLevel+0x42>
    268c:	22 0f       	add	r18, r18
    268e:	ca 95       	dec	r28
    2690:	ea f7       	brpl	.-6      	; 0x268c <u8g_SetPinLevel+0x40>
    2692:	29 2b       	or	r18, r25
    2694:	20 83       	st	Z, r18
    2696:	8f bf       	out	0x3f, r24	; 63
    2698:	df 91       	pop	r29
    //*tmp |= _BV(internal_pin_number&7);
  }
  
}
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <u8g_SetPIOutput>:
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    269e:	86 0f       	add	r24, r22
    26a0:	91 1d       	adc	r25, r1
    26a2:	fc 01       	movw	r30, r24
    26a4:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    26a6:	8f 3f       	cpi	r24, 0xFF	; 255
    26a8:	09 f0       	breq	.+2      	; 0x26ac <u8g_SetPIOutput+0xe>
    u8g_SetPinOutput(pin);
    26aa:	ba cf       	rjmp	.-140    	; 0x2620 <u8g_SetPinOutput>
    26ac:	08 95       	ret

000026ae <u8g_SetPILevel>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    26ae:	86 0f       	add	r24, r22
    26b0:	91 1d       	adc	r25, r1
    26b2:	fc 01       	movw	r30, r24
    26b4:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    26b6:	8f 3f       	cpi	r24, 0xFF	; 255
    26b8:	11 f0       	breq	.+4      	; 0x26be <u8g_SetPILevel+0x10>
    26ba:	64 2f       	mov	r22, r20
    u8g_SetPinLevel(pin, level);
    26bc:	c7 cf       	rjmp	.-114    	; 0x264c <u8g_SetPinLevel>
    26be:	08 95       	ret

000026c0 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26c0:	2e ec       	ldi	r18, 0xCE	; 206
    26c2:	37 e0       	ldi	r19, 0x07	; 7
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <u8g_Delay+0x12>
    26c8:	f9 01       	movw	r30, r18
    26ca:	31 97       	sbiw	r30, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f9 cf       	rjmp	.-14     	; 0x26c4 <u8g_Delay+0x4>
  }
}
    26d2:	08 95       	ret

000026d4 <u8g_10MicroDelay>:
    26d4:	84 e1       	ldi	r24, 0x14	; 20
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <u8g_10MicroDelay+0x4>
    26dc:	08 95       	ret

000026de <u8g_dev_st7920_192x32_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_st7920_192x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    26de:	a0 e0       	ldi	r26, 0x00	; 0
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e4 e7       	ldi	r30, 0x74	; 116
    26e4:	f3 e1       	ldi	r31, 0x13	; 19
    26e6:	34 c7       	rjmp	.+3688   	; 0x3550 <__prologue_saves__+0xe>
    26e8:	8c 01       	movw	r16, r24
    26ea:	eb 01       	movw	r28, r22
    26ec:	e4 2e       	mov	r14, r20
    26ee:	59 01       	movw	r10, r18
    26f0:	8a e0       	ldi	r24, 0x0A	; 10
  switch(msg)
    26f2:	48 17       	cp	r20, r24
    26f4:	a1 f0       	breq	.+40     	; 0x271e <u8g_dev_st7920_192x32_fn+0x40>
    26f6:	e5 e1       	ldi	r30, 0x15	; 21
    26f8:	4e 13       	cpse	r20, r30
    26fa:	3e c0       	rjmp	.+124    	; 0x2778 <u8g_dev_st7920_192x32_fn+0x9a>
    26fc:	ca 80       	ldd	r12, Y+2	; 0x02
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    26fe:	db 80       	ldd	r13, Y+3	; 0x03
    2700:	40 e0       	ldi	r20, 0x00	; 0
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
    2702:	c8 01       	movw	r24, r16
    2704:	17 d6       	rcall	.+3118   	; 0x3334 <u8g_SetAddress>
    2706:	41 e0       	ldi	r20, 0x01	; 1
    2708:	be 01       	movw	r22, r28
        u8g_SetChipSelect(u8g, dev, 1);
    270a:	c8 01       	movw	r24, r16
    270c:	f3 d5       	rcall	.+3046   	; 0x32f4 <u8g_SetChipSelect>
    270e:	f6 01       	movw	r30, r12
    2710:	f2 80       	ldd	r15, Z+2	; 0x02
    2712:	c6 80       	ldd	r12, Z+6	; 0x06
        y = pb->p.page_y0;
    2714:	d7 80       	ldd	r13, Z+7	; 0x07
    2716:	88 e0       	ldi	r24, 0x08	; 8
        ptr = pb->buf;
    2718:	98 2e       	mov	r9, r24
    271a:	9f 0c       	add	r9, r15
    271c:	09 c0       	rjmp	.+18     	; 0x2730 <u8g_dev_st7920_192x32_fn+0x52>
    271e:	43 e0       	ldi	r20, 0x03	; 3
    2720:	c8 01       	movw	r24, r16
    2722:	de d5       	rcall	.+3004   	; 0x32e0 <u8g_InitCom>
uint8_t u8g_dev_st7920_192x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
    2724:	46 e8       	ldi	r20, 0x86	; 134
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	be 01       	movw	r22, r28
    272a:	c8 01       	movw	r24, r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7920_192x32_init_seq);
    272c:	1f d6       	rcall	.+3134   	; 0x336c <u8g_WriteEscSeqP>
    272e:	24 c0       	rjmp	.+72     	; 0x2778 <u8g_dev_st7920_192x32_fn+0x9a>
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	be 01       	movw	r22, r28
    2734:	c8 01       	movw	r24, r16
    2736:	fe d5       	rcall	.+3068   	; 0x3334 <u8g_SetAddress>
      break;
    2738:	4e e3       	ldi	r20, 0x3E	; 62
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 8; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
    273a:	be 01       	movw	r22, r28
    273c:	c8 01       	movw	r24, r16
    273e:	04 d6       	rcall	.+3080   	; 0x3348 <u8g_WriteByte>
    2740:	4f 2d       	mov	r20, r15
    2742:	40 68       	ori	r20, 0x80	; 128
          u8g_WriteByte(u8g, dev, 0x03e );      /* enable extended mode */
    2744:	be 01       	movw	r22, r28
    2746:	c8 01       	movw	r24, r16
    2748:	ff d5       	rcall	.+3070   	; 0x3348 <u8g_WriteByte>
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	be 01       	movw	r22, r28
          u8g_WriteByte(u8g, dev, 0x080 | y );      /* y pos  */
    274e:	c8 01       	movw	r24, r16
    2750:	fb d5       	rcall	.+3062   	; 0x3348 <u8g_WriteByte>
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	be 01       	movw	r22, r28
    2756:	c8 01       	movw	r24, r16
    2758:	ed d5       	rcall	.+3034   	; 0x3334 <u8g_SetAddress>
          u8g_WriteByte(u8g, dev, 0x080  );      /* set x pos to 0*/          
    275a:	96 01       	movw	r18, r12
    275c:	48 e1       	ldi	r20, 0x18	; 24
    275e:	be 01       	movw	r22, r28
    2760:	c8 01       	movw	r24, r16
    2762:	fc d5       	rcall	.+3064   	; 0x335c <u8g_WriteSequence>
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
    2764:	f8 e1       	ldi	r31, 0x18	; 24
    2766:	cf 0e       	add	r12, r31
    2768:	d1 1c       	adc	r13, r1
    276a:	f3 94       	inc	r15
    276c:	f9 10       	cpse	r15, r9
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
    276e:	e0 cf       	rjmp	.-64     	; 0x2730 <u8g_dev_st7920_192x32_fn+0x52>
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	be 01       	movw	r22, r28
    2774:	c8 01       	movw	r24, r16
    2776:	be d5       	rcall	.+2940   	; 0x32f4 <u8g_SetChipSelect>
    2778:	95 01       	movw	r18, r10
          ptr += WIDTH/8;
    277a:	4e 2d       	mov	r20, r14
    277c:	be 01       	movw	r22, r28
    277e:	c8 01       	movw	r24, r16
          y++;
    2780:	4c d4       	rcall	.+2200   	; 0x301a <u8g_dev_pb8h1_base_fn>
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 8; i ++ )
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          y++;
        }
        u8g_SetChipSelect(u8g, dev, 0);
    2786:	eb e0       	ldi	r30, 0x0B	; 11
    2788:	ff c6       	rjmp	.+3582   	; 0x3588 <__epilogue_restores__+0xe>

0000278a <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    278a:	fc 01       	movw	r30, r24
    278c:	e6 0f       	add	r30, r22
    278e:	f1 1d       	adc	r31, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    2790:	84 91       	lpm	r24, Z
    2792:	90 e0       	ldi	r25, 0x00	; 0
    font++;
    pos <<= 8;
    2794:	98 2f       	mov	r25, r24
    2796:	88 27       	eor	r24, r24
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    2798:	31 96       	adiw	r30, 0x01	; 1
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
    279a:	e4 91       	lpm	r30, Z
    return pos;
}
    279c:	8e 0f       	add	r24, r30
    279e:	91 1d       	adc	r25, r1
    27a0:	08 95       	ret

000027a2 <u8g_font_GetFormat>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    27a2:	fc 01       	movw	r30, r24
    27a4:	84 91       	lpm	r24, Z

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
    27a6:	08 95       	ret

000027a8 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
    27a8:	fc df       	rcall	.-8      	; 0x27a2 <u8g_font_GetFormat>
    27aa:	88 23       	and	r24, r24
    27ac:	21 f0       	breq	.+8      	; 0x27b6 <u8g_font_GetFontGlyphStructureSize+0xe>
    27ae:	82 30       	cpi	r24, 0x02	; 2
    27b0:	11 f0       	breq	.+4      	; 0x27b6 <u8g_font_GetFontGlyphStructureSize+0xe>
    27b2:	83 e0       	ldi	r24, 0x03	; 3
  {
    case 0: return 6;
    case 1: return 3;
    27b4:	08 95       	ret
    27b6:	86 e0       	ldi	r24, 0x06	; 6
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
  {
    case 0: return 6;
    27b8:	08 95       	ret

000027ba <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	08 95       	ret

000027be <u8g_font_GetEncoding65Pos>:
}

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
    return u8g_font_get_word(font, 6);
    27be:	66 e0       	ldi	r22, 0x06	; 6
    27c0:	e4 cf       	rjmp	.-56     	; 0x278a <u8g_font_get_word>

000027c2 <u8g_font_GetEncoding97Pos>:
}

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
    return u8g_font_get_word(font, 8);
    27c2:	68 e0       	ldi	r22, 0x08	; 8
    27c4:	e2 cf       	rjmp	.-60     	; 0x278a <u8g_font_get_word>

000027c6 <u8g_font_GetFontStartEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    27c6:	0a 96       	adiw	r24, 0x0a	; 10
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    27c8:	fc 01       	movw	r30, r24
    27ca:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
}
    27cc:	08 95       	ret

000027ce <u8g_font_GetFontEndEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    27ce:	0b 96       	adiw	r24, 0x0b	; 11
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    27d0:	fc 01       	movw	r30, r24
    27d2:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
}
    27d4:	08 95       	ret

000027d6 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
    27d6:	a0 e0       	ldi	r26, 0x00	; 0
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e0 ef       	ldi	r30, 0xF0	; 240
    27dc:	f3 e1       	ldi	r31, 0x13	; 19
    27de:	ba c6       	rjmp	.+3444   	; 0x3554 <__prologue_saves__+0x12>
    27e0:	8c 01       	movw	r16, r24
    27e2:	e6 2e       	mov	r14, r22
    27e4:	dc 01       	movw	r26, r24
  uint8_t *p = (uint8_t *)(u8g->font);
    27e6:	14 96       	adiw	r26, 0x04	; 4
    27e8:	cd 91       	ld	r28, X+
    27ea:	dc 91       	ld	r29, X
    27ec:	15 97       	sbiw	r26, 0x05	; 5
    27ee:	ce 01       	movw	r24, r28
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
    27f0:	d8 df       	rcall	.-80     	; 0x27a2 <u8g_font_GetFormat>
    27f2:	f8 2e       	mov	r15, r24
    27f4:	f8 01       	movw	r30, r16
    27f6:	84 81       	ldd	r24, Z+4	; 0x04
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
    27f8:	95 81       	ldd	r25, Z+5	; 0x05
    27fa:	d6 df       	rcall	.-84     	; 0x27a8 <u8g_font_GetFontGlyphStructureSize>
    27fc:	c8 2e       	mov	r12, r24
    27fe:	f1 e0       	ldi	r31, 0x01	; 1
    2800:	ff 12       	cpse	r15, r31
    2802:	03 c0       	rjmp	.+6      	; 0x280a <u8g_GetGlyph+0x34>
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
    2804:	2f e0       	ldi	r18, 0x0F	; 15
    2806:	b2 2e       	mov	r11, r18
    2808:	02 c0       	rjmp	.+4      	; 0x280e <u8g_GetGlyph+0x38>
    mask = 15;
    280a:	bb 24       	eor	r11, r11
    280c:	ba 94       	dec	r11
    280e:	d8 01       	movw	r26, r16
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
    2810:	14 96       	adiw	r26, 0x04	; 4
    2812:	8d 91       	ld	r24, X+

  if ( font_format == 1 )
    mask = 15;
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
    2814:	9c 91       	ld	r25, X
    2816:	15 97       	sbiw	r26, 0x05	; 5
    2818:	d6 df       	rcall	.-84     	; 0x27c6 <u8g_font_GetFontStartEncoding>
    281a:	f8 2e       	mov	r15, r24
    281c:	f8 01       	movw	r30, r16
    281e:	84 81       	ldd	r24, Z+4	; 0x04
    2820:	95 81       	ldd	r25, Z+5	; 0x05
    2822:	d5 df       	rcall	.-86     	; 0x27ce <u8g_font_GetFontEndEncoding>
  end = u8g_font_GetFontEndEncoding(u8g->font);
    2824:	d8 2e       	mov	r13, r24
    2826:	d8 01       	movw	r26, r16
    2828:	14 96       	adiw	r26, 0x04	; 4
    282a:	8d 91       	ld	r24, X+
    282c:	9c 91       	ld	r25, X
    282e:	15 97       	sbiw	r26, 0x05	; 5

  pos = u8g_font_GetEncoding97Pos(u8g->font);
    2830:	c8 df       	rcall	.-112    	; 0x27c2 <u8g_font_GetEncoding97Pos>
    2832:	b0 e6       	ldi	r27, 0x60	; 96
    2834:	be 15       	cp	r27, r14
    2836:	38 f4       	brcc	.+14     	; 0x2846 <u8g_GetGlyph+0x70>
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	29 f0       	breq	.+10     	; 0x2846 <u8g_GetGlyph+0x70>
    283c:	c8 0f       	add	r28, r24
  if ( requested_encoding >= 97 && pos > 0 )
    283e:	d9 1f       	adc	r29, r25
    2840:	91 e6       	ldi	r25, 0x61	; 97
    2842:	f9 2e       	mov	r15, r25
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <u8g_GetGlyph+0x8e>
    2846:	f8 01       	movw	r30, r16
  {
    p+= pos;
    2848:	84 81       	ldd	r24, Z+4	; 0x04
    284a:	95 81       	ldd	r25, Z+5	; 0x05
    start = 97;
    284c:	b8 df       	rcall	.-144    	; 0x27be <u8g_font_GetEncoding65Pos>
    284e:	f0 e4       	ldi	r31, 0x40	; 64
    2850:	fe 15       	cp	r31, r14
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
    2852:	38 f4       	brcc	.+14     	; 0x2862 <u8g_GetGlyph+0x8c>
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	29 f0       	breq	.+10     	; 0x2862 <u8g_GetGlyph+0x8c>
    2858:	c8 0f       	add	r28, r24
    285a:	d9 1f       	adc	r29, r25
    if ( requested_encoding >= 65 && pos > 0 )
    285c:	81 e4       	ldi	r24, 0x41	; 65
    285e:	f8 2e       	mov	r15, r24
    2860:	01 c0       	rjmp	.+2      	; 0x2864 <u8g_GetGlyph+0x8e>
    2862:	61 96       	adiw	r28, 0x11	; 17
    2864:	de 14       	cp	r13, r14
    {
      p+= pos;
    2866:	90 f4       	brcc	.+36     	; 0x288c <u8g_GetGlyph+0xb6>
    2868:	d8 01       	movw	r26, r16
      start = 65;
    286a:	50 96       	adiw	r26, 0x10	; 16
    286c:	1c 92       	st	X, r1
    286e:	50 97       	sbiw	r26, 0x10	; 16
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
    2870:	53 96       	adiw	r26, 0x13	; 19
  }
  
  if ( requested_encoding > end )
    2872:	1c 92       	st	X, r1
    2874:	53 97       	sbiw	r26, 0x13	; 19
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
    2876:	54 96       	adiw	r26, 0x14	; 20
    2878:	1c 92       	st	X, r1
    287a:	54 97       	sbiw	r26, 0x14	; 20
    287c:	51 96       	adiw	r26, 0x11	; 17
  u8g->glyph_width = 0;
    287e:	1c 92       	st	X, r1
    2880:	51 97       	sbiw	r26, 0x11	; 17
    2882:	52 96       	adiw	r26, 0x12	; 18
  u8g->glyph_height = 0;
    2884:	1c 92       	st	X, r1
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
  u8g->glyph_x = 0;
    288a:	66 c0       	rjmp	.+204    	; 0x2958 <u8g_GetGlyph+0x182>
    288c:	df 14       	cp	r13, r15
    288e:	60 f3       	brcs	.-40     	; 0x2868 <u8g_GetGlyph+0x92>
  u8g->glyph_y = 0;
    2890:	8c 2d       	mov	r24, r12
    2892:	90 e0       	ldi	r25, 0x00	; 0
  }
  
  if ( requested_encoding > end )
  {
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
    2894:	fe 01       	movw	r30, r28
    2896:	24 91       	lpm	r18, Z
    2898:	2f 3f       	cpi	r18, 0xFF	; 255
  }
  
  i = start;
  if ( i <= end )
    289a:	11 f4       	brne	.+4      	; 0x28a0 <u8g_GetGlyph+0xca>
    289c:	21 96       	adiw	r28, 0x01	; 1
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
        p += data_structure_size;
    289e:	57 c0       	rjmp	.+174    	; 0x294e <u8g_GetGlyph+0x178>
    28a0:	fe 10       	cpse	r15, r14
  i = start;
  if ( i <= end )
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
    28a2:	4c c0       	rjmp	.+152    	; 0x293c <u8g_GetGlyph+0x166>
    28a4:	d8 01       	movw	r26, r16
    28a6:	14 96       	adiw	r26, 0x04	; 4
    28a8:	8d 91       	ld	r24, X+
      {
        p += 1;
    28aa:	9c 91       	ld	r25, X
    28ac:	15 97       	sbiw	r26, 0x05	; 5
      }
      else
      {
        if ( i == requested_encoding )
    28ae:	79 df       	rcall	.-270    	; 0x27a2 <u8g_font_GetFormat>
    28b0:	9e 01       	movw	r18, r28
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
    28b2:	2f 5f       	subi	r18, 0xFF	; 255
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	fe 01       	movw	r30, r28
    28b8:	88 23       	and	r24, r24
    28ba:	11 f0       	breq	.+4      	; 0x28c0 <u8g_GetGlyph+0xea>
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	e1 f4       	brne	.+56     	; 0x28f8 <u8g_GetGlyph+0x122>
    28c0:	84 91       	lpm	r24, Z
    28c2:	d8 01       	movw	r26, r16
    28c4:	53 96       	adiw	r26, 0x13	; 19
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    28c6:	8c 93       	st	X, r24
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
    28c8:	53 97       	sbiw	r26, 0x13	; 19
    28ca:	f9 01       	movw	r30, r18
    28cc:	24 91       	lpm	r18, Z
    28ce:	54 96       	adiw	r26, 0x14	; 20
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    28d0:	2c 93       	st	X, r18
    28d2:	54 97       	sbiw	r26, 0x14	; 20
    28d4:	fe 01       	movw	r30, r28
    28d6:	33 96       	adiw	r30, 0x03	; 3
    28d8:	e4 91       	lpm	r30, Z
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    28da:	50 96       	adiw	r26, 0x10	; 16
    28dc:	ec 93       	st	X, r30
    28de:	50 97       	sbiw	r26, 0x10	; 16
    28e0:	fe 01       	movw	r30, r28
    28e2:	34 96       	adiw	r30, 0x04	; 4
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
    28e4:	e4 91       	lpm	r30, Z
    28e6:	51 96       	adiw	r26, 0x11	; 17
    28e8:	ec 93       	st	X, r30
    28ea:	51 97       	sbiw	r26, 0x11	; 17
    28ec:	fe 01       	movw	r30, r28
    28ee:	35 96       	adiw	r30, 0x05	; 5
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
    28f0:	e4 91       	lpm	r30, Z
    28f2:	52 96       	adiw	r26, 0x12	; 18
    28f4:	ec 93       	st	X, r30
    28f6:	20 c0       	rjmp	.+64     	; 0x2938 <u8g_GetGlyph+0x162>
    28f8:	84 91       	lpm	r24, Z
    28fa:	98 2f       	mov	r25, r24
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
    28fc:	9f 70       	andi	r25, 0x0F	; 15
    28fe:	92 50       	subi	r25, 0x02	; 2
    2900:	d8 01       	movw	r26, r16
    2902:	52 96       	adiw	r26, 0x12	; 18
    2904:	9c 93       	st	X, r25
    2906:	52 97       	sbiw	r26, 0x12	; 18
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    2908:	82 95       	swap	r24
      u8g->glyph_y =  tmp & 15;
    290a:	8f 70       	andi	r24, 0x0F	; 15
    290c:	51 96       	adiw	r26, 0x11	; 17
      u8g->glyph_y-=2;
    290e:	8c 93       	st	X, r24
    2910:	51 97       	sbiw	r26, 0x11	; 17
    2912:	f9 01       	movw	r30, r18
    2914:	24 91       	lpm	r18, Z
    2916:	82 2f       	mov	r24, r18
      tmp >>= 4;
    2918:	8f 70       	andi	r24, 0x0F	; 15
    291a:	54 96       	adiw	r26, 0x14	; 20
      u8g->glyph_x =  tmp;
    291c:	8c 93       	st	X, r24
    291e:	54 97       	sbiw	r26, 0x14	; 20
    2920:	22 95       	swap	r18
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    2922:	2f 70       	andi	r18, 0x0F	; 15
    2924:	53 96       	adiw	r26, 0x13	; 19
      u8g->glyph_height =  tmp & 15;
    2926:	2c 93       	st	X, r18
    2928:	53 97       	sbiw	r26, 0x13	; 19
    292a:	fe 01       	movw	r30, r28
    292c:	32 96       	adiw	r30, 0x02	; 2
    292e:	e4 91       	lpm	r30, Z
      tmp >>= 4;
    2930:	e2 95       	swap	r30
    2932:	ef 70       	andi	r30, 0x0F	; 15
      u8g->glyph_width =  tmp;
    2934:	50 96       	adiw	r26, 0x10	; 16
    2936:	ec 93       	st	X, r30
    2938:	ce 01       	movw	r24, r28
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
    293a:	0e c0       	rjmp	.+28     	; 0x2958 <u8g_GetGlyph+0x182>
    293c:	fe 01       	movw	r30, r28
    293e:	32 96       	adiw	r30, 0x02	; 2
      tmp >>= 4;
    2940:	e4 91       	lpm	r30, Z
    2942:	eb 21       	and	r30, r11
      u8g->glyph_dx = tmp;
    2944:	9c 01       	movw	r18, r24
    2946:	2e 0f       	add	r18, r30
      else
      {
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
    2948:	31 1d       	adc	r19, r1
    294a:	c2 0f       	add	r28, r18
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
    294c:	d3 1f       	adc	r29, r19
    294e:	fd 14       	cp	r15, r13
    2950:	09 f4       	brne	.+2      	; 0x2954 <u8g_GetGlyph+0x17e>
    2952:	8a cf       	rjmp	.-236    	; 0x2868 <u8g_GetGlyph+0x92>
    2954:	f3 94       	inc	r15
    2956:	9e cf       	rjmp	.-196    	; 0x2894 <u8g_GetGlyph+0xbe>
    2958:	cd b7       	in	r28, 0x3d	; 61
        p += data_structure_size;
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	e9 e0       	ldi	r30, 0x09	; 9
      }
      if ( i == end )
    295e:	16 c6       	rjmp	.+3116   	; 0x358c <__epilogue_restores__+0x12>

00002960 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
    2960:	4f 92       	push	r4
    2962:	5f 92       	push	r5
    2964:	6f 92       	push	r6
    2966:	7f 92       	push	r7
    2968:	9f 92       	push	r9
    296a:	af 92       	push	r10
    296c:	bf 92       	push	r11
    296e:	cf 92       	push	r12
    2970:	df 92       	push	r13
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	1f 92       	push	r1
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	2c 01       	movw	r4, r24
    2986:	c6 2e       	mov	r12, r22
    2988:	94 2e       	mov	r9, r20
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    298a:	62 2f       	mov	r22, r18
    298c:	24 df       	rcall	.-440    	; 0x27d6 <u8g_GetGlyph>
    298e:	7c 01       	movw	r14, r24
    2990:	89 2b       	or	r24, r25
    if ( g == NULL  )
    2992:	09 f4       	brne	.+2      	; 0x2996 <u8g_draw_glyph+0x36>
    2994:	3a c0       	rjmp	.+116    	; 0x2a0a <u8g_draw_glyph+0xaa>
    2996:	f2 01       	movw	r30, r4


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    2998:	84 81       	ldd	r24, Z+4	; 0x04
    299a:	95 81       	ldd	r25, Z+5	; 0x05
    299c:	05 df       	rcall	.-502    	; 0x27a8 <u8g_font_GetFontGlyphStructureSize>
    299e:	b8 2e       	mov	r11, r24
    29a0:	f2 01       	movw	r30, r4
    29a2:	13 89       	ldd	r17, Z+19	; 0x13
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
    29a4:	04 89       	ldd	r16, Z+20	; 0x14
    29a6:	81 89       	ldd	r24, Z+17	; 0x11
  h = u8g->glyph_height;
    29a8:	c8 0e       	add	r12, r24
  
  x += u8g->glyph_x;
    29aa:	82 89       	ldd	r24, Z+18	; 0x12
    29ac:	98 1a       	sub	r9, r24
    29ae:	d9 2c       	mov	r13, r9
    29b0:	d0 1a       	sub	r13, r16
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    29b2:	21 2f       	mov	r18, r17
    29b4:	4d 2d       	mov	r20, r13
    29b6:	6c 2d       	mov	r22, r12
    29b8:	c2 01       	movw	r24, r4
    29ba:	70 d4       	rcall	.+2272   	; 0x329c <u8g_IsBBXIntersection>
    29bc:	88 23       	and	r24, r24
    29be:	11 f1       	breq	.+68     	; 0x2a04 <u8g_draw_glyph+0xa4>
    29c0:	eb 0c       	add	r14, r11
    29c2:	f1 1c       	adc	r15, r1
    29c4:	19 5f       	subi	r17, 0xF9	; 249


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    29c6:	16 95       	lsr	r17
    29c8:	16 95       	lsr	r17
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
    29ca:	16 95       	lsr	r17
  w /= 8;
    29cc:	61 2e       	mov	r6, r17
    29ce:	71 2c       	mov	r7, r1
    29d0:	d9 14       	cp	r13, r9
    29d2:	c1 f0       	breq	.+48     	; 0x2a04 <u8g_draw_glyph+0xa4>
    29d4:	3c 2d       	mov	r19, r12
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
    29d6:	57 01       	movw	r10, r14
    29d8:	8a 2d       	mov	r24, r10
    29da:	8e 19       	sub	r24, r14
    29dc:	81 17       	cp	r24, r17
    29de:	70 f4       	brcc	.+28     	; 0x29fc <u8g_draw_glyph+0x9c>
    29e0:	f5 01       	movw	r30, r10
  {
    ix = x;
    for( i = 0; i < w; i++ )
    29e2:	04 91       	lpm	r16, Z
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
    29e6:	4d 2d       	mov	r20, r13
    29e8:	63 2f       	mov	r22, r19
    29ea:	c2 01       	movw	r24, r4
    29ec:	39 83       	std	Y+1, r19	; 0x01
    29ee:	8b d2       	rcall	.+1302   	; 0x2f06 <u8g_Draw8Pixel>
    29f0:	ff ef       	ldi	r31, 0xFF	; 255
    29f2:	af 1a       	sub	r10, r31
    29f4:	bf 0a       	sbc	r11, r31
    29f6:	39 81       	ldd	r19, Y+1	; 0x01
      data++;
    29f8:	38 5f       	subi	r19, 0xF8	; 248
    29fa:	ee cf       	rjmp	.-36     	; 0x29d8 <u8g_draw_glyph+0x78>
    29fc:	e6 0c       	add	r14, r6
      ix+=8;
    29fe:	f7 1c       	adc	r15, r7
    2a00:	d3 94       	inc	r13
    2a02:	e6 cf       	rjmp	.-52     	; 0x29d0 <u8g_draw_glyph+0x70>
    2a04:	f2 01       	movw	r30, r4
    2a06:	80 89       	ldd	r24, Z+16	; 0x10
    }
    iy++;
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <u8g_draw_glyph+0xac>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return u8g->glyph_dx;
    2a0c:	0f 90       	pop	r0
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    if ( g == NULL  )
      return 0;
    2a12:	1f 91       	pop	r17
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
}
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	df 90       	pop	r13
    2a1c:	cf 90       	pop	r12
    2a1e:	bf 90       	pop	r11
    2a20:	af 90       	pop	r10
    2a22:	9f 90       	pop	r9
    2a24:	7f 90       	pop	r7
    2a26:	6f 90       	pop	r6
    2a28:	5f 90       	pop	r5
    2a2a:	4f 90       	pop	r4
    2a2c:	08 95       	ret

00002a2e <u8g_draw_glyph90>:
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_glyph(u8g, x, y, encoding);
}

int8_t u8g_draw_glyph90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
    2a2e:	4f 92       	push	r4
    2a30:	5f 92       	push	r5
    2a32:	7f 92       	push	r7
    2a34:	8f 92       	push	r8
    2a36:	9f 92       	push	r9
    2a38:	af 92       	push	r10
    2a3a:	bf 92       	push	r11
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	1f 92       	push	r1
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	2c 01       	movw	r4, r24
    2a54:	f6 2e       	mov	r15, r22
    2a56:	c4 2e       	mov	r12, r20
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    2a58:	62 2f       	mov	r22, r18
    2a5a:	bd de       	rcall	.-646    	; 0x27d6 <u8g_GetGlyph>
    2a5c:	4c 01       	movw	r8, r24
    2a5e:	89 2b       	or	r24, r25
    if ( g == NULL  )
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <u8g_draw_glyph90+0x36>
    2a62:	43 c0       	rjmp	.+134    	; 0x2aea <u8g_draw_glyph90+0xbc>
    2a64:	f2 01       	movw	r30, r4


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    2a66:	84 81       	ldd	r24, Z+4	; 0x04
    2a68:	95 81       	ldd	r25, Z+5	; 0x05
    2a6a:	9e de       	rcall	.-708    	; 0x27a8 <u8g_font_GetFontGlyphStructureSize>
    2a6c:	e8 2e       	mov	r14, r24
    2a6e:	f2 01       	movw	r30, r4
    2a70:	d3 88       	ldd	r13, Z+19	; 0x13
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
    2a72:	b4 88       	ldd	r11, Z+20	; 0x14
    2a74:	12 89       	ldd	r17, Z+18	; 0x12
  h = u8g->glyph_height;
    2a76:	1f 5f       	subi	r17, 0xFF	; 255
    2a78:	1f 0d       	add	r17, r15
    2a7a:	81 89       	ldd	r24, Z+17	; 0x11
  
  x += u8g->glyph_y;
  x++;
    2a7c:	c8 0e       	add	r12, r24
  y += u8g->glyph_x;
    2a7e:	0d 2d       	mov	r16, r13
    2a80:	2b 2d       	mov	r18, r11
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
    2a82:	4c 2d       	mov	r20, r12
    2a84:	61 2f       	mov	r22, r17
    2a86:	c2 01       	movw	r24, r4
    2a88:	09 d4       	rcall	.+2066   	; 0x329c <u8g_IsBBXIntersection>
    2a8a:	88 23       	and	r24, r24
    2a8c:	59 f1       	breq	.+86     	; 0x2ae4 <u8g_draw_glyph90+0xb6>
    2a8e:	c4 01       	movw	r24, r8
    2a90:	8e 0d       	add	r24, r14
    2a92:	91 1d       	adc	r25, r1


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    2a94:	7c 01       	movw	r14, r24
    2a96:	87 e0       	ldi	r24, 0x07	; 7
    2a98:	8d 0d       	add	r24, r13
    2a9a:	d8 2e       	mov	r13, r24
  
  if ( u8g_IsBBXIntersection(u8g, x, y, h, w) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
    2a9c:	d6 94       	lsr	r13
    2a9e:	d6 94       	lsr	r13
  w /= 8;
    2aa0:	d6 94       	lsr	r13
    2aa2:	8f ef       	ldi	r24, 0xFF	; 255
    2aa4:	8b 0d       	add	r24, r11
    2aa6:	18 0f       	add	r17, r24
    2aa8:	71 2e       	mov	r7, r17
    2aaa:	7b 18       	sub	r7, r11
  
  ix = x;
  ix += h;
  ix--;
    2aac:	8d 2c       	mov	r8, r13
    2aae:	91 2c       	mov	r9, r1
    2ab0:	17 15       	cp	r17, r7
    2ab2:	c1 f0       	breq	.+48     	; 0x2ae4 <u8g_draw_glyph90+0xb6>
    2ab4:	3c 2d       	mov	r19, r12
  for( j = 0; j < h; j++ )
    2ab6:	57 01       	movw	r10, r14
    2ab8:	8a 2d       	mov	r24, r10
    2aba:	8e 19       	sub	r24, r14
    2abc:	8d 15       	cp	r24, r13
    2abe:	70 f4       	brcc	.+28     	; 0x2adc <u8g_draw_glyph90+0xae>
    2ac0:	f5 01       	movw	r30, r10
  {
    iy = y;
    for( i = 0; i < w; i++ )
    2ac2:	04 91       	lpm	r16, Z
    2ac4:	21 e0       	ldi	r18, 0x01	; 1
    {
      u8g_Draw8Pixel(u8g, ix, iy, 1, u8g_pgm_read(data));
    2ac6:	43 2f       	mov	r20, r19
    2ac8:	61 2f       	mov	r22, r17
    2aca:	c2 01       	movw	r24, r4
    2acc:	39 83       	std	Y+1, r19	; 0x01
    2ace:	1b d2       	rcall	.+1078   	; 0x2f06 <u8g_Draw8Pixel>
    2ad0:	ff ef       	ldi	r31, 0xFF	; 255
    2ad2:	af 1a       	sub	r10, r31
    2ad4:	bf 0a       	sbc	r11, r31
    2ad6:	39 81       	ldd	r19, Y+1	; 0x01
      data++;
    2ad8:	38 5f       	subi	r19, 0xF8	; 248
    2ada:	ee cf       	rjmp	.-36     	; 0x2ab8 <u8g_draw_glyph90+0x8a>
    2adc:	e8 0c       	add	r14, r8
      iy+=8;
    2ade:	f9 1c       	adc	r15, r9
    2ae0:	11 50       	subi	r17, 0x01	; 1
    2ae2:	e6 cf       	rjmp	.-52     	; 0x2ab0 <u8g_draw_glyph90+0x82>
    2ae4:	f2 01       	movw	r30, r4
    2ae6:	80 89       	ldd	r24, Z+16	; 0x10
    }
    ix--;
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <u8g_draw_glyph90+0xbe>
    2aea:	80 e0       	ldi	r24, 0x00	; 0
  }
  return u8g->glyph_dx;
    2aec:	0f 90       	pop	r0
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    if ( g == NULL  )
      return 0;
    2af2:	1f 91       	pop	r17
      iy+=8;
    }
    ix--;
  }
  return u8g->glyph_dx;
}
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	bf 90       	pop	r11
    2b00:	af 90       	pop	r10
    2b02:	9f 90       	pop	r9
    2b04:	8f 90       	pop	r8
    2b06:	7f 90       	pop	r7
    2b08:	5f 90       	pop	r5
    2b0a:	4f 90       	pop	r4
    2b0c:	08 95       	ret

00002b0e <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
    2b0e:	af 92       	push	r10
    2b10:	bf 92       	push	r11
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	ff 92       	push	r15
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <u8g_DrawStr+0x14>
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	7c 01       	movw	r14, r24
    2b28:	d6 2e       	mov	r13, r22
    2b2a:	04 2f       	mov	r16, r20
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	55 96       	adiw	r26, 0x15	; 21
    2b30:	ed 91       	ld	r30, X+
    2b32:	fc 91       	ld	r31, X
    2b34:	56 97       	sbiw	r26, 0x16	; 22
    2b36:	29 83       	std	Y+1, r18	; 0x01
    2b38:	3a 83       	std	Y+2, r19	; 0x02
    2b3a:	09 95       	icall
    2b3c:	08 0f       	add	r16, r24
    2b3e:	29 81       	ldd	r18, Y+1	; 0x01
    2b40:	a2 2e       	mov	r10, r18
    2b42:	3a 81       	ldd	r19, Y+2	; 0x02
    2b44:	b3 2e       	mov	r11, r19
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    2b46:	10 e0       	ldi	r17, 0x00	; 0
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
    2b48:	f5 01       	movw	r30, r10
    2b4a:	21 91       	ld	r18, Z+
    2b4c:	5f 01       	movw	r10, r30
    2b4e:	22 23       	and	r18, r18
    2b50:	39 f0       	breq	.+14     	; 0x2b60 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    2b52:	40 2f       	mov	r20, r16
    2b54:	6d 2d       	mov	r22, r13
    2b56:	c7 01       	movw	r24, r14
    2b58:	03 df       	rcall	.-506    	; 0x2960 <u8g_draw_glyph>
    2b5a:	d8 0e       	add	r13, r24
    x += d;
    2b5c:	18 0f       	add	r17, r24
    t += d;
    2b5e:	f4 cf       	rjmp	.-24     	; 0x2b48 <u8g_DrawStr+0x3a>
    2b60:	81 2f       	mov	r24, r17
    s++;
  }
  return t;
}
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	bf 90       	pop	r11
    2b76:	af 90       	pop	r10
    2b78:	08 95       	ret

00002b7a <u8g_DrawStr90>:

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
    2b7a:	af 92       	push	r10
    2b7c:	bf 92       	push	r11
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <u8g_DrawStr90+0x14>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	7c 01       	movw	r14, r24
    2b94:	06 2f       	mov	r16, r22
    2b96:	d4 2e       	mov	r13, r20
  u8g_uint_t t = 0;
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);
    2b98:	dc 01       	movw	r26, r24
    2b9a:	55 96       	adiw	r26, 0x15	; 21
    2b9c:	ed 91       	ld	r30, X+
    2b9e:	fc 91       	ld	r31, X
    2ba0:	56 97       	sbiw	r26, 0x16	; 22
    2ba2:	29 83       	std	Y+1, r18	; 0x01
    2ba4:	3a 83       	std	Y+2, r19	; 0x02
    2ba6:	09 95       	icall
    2ba8:	08 1b       	sub	r16, r24
    2baa:	29 81       	ldd	r18, Y+1	; 0x01
    2bac:	a2 2e       	mov	r10, r18
    2bae:	3a 81       	ldd	r19, Y+2	; 0x02
    2bb0:	b3 2e       	mov	r11, r19
  return t;
}

u8g_uint_t u8g_DrawStr90(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    2bb2:	10 e0       	ldi	r17, 0x00	; 0
  int8_t d;
    
  x -= u8g->font_calc_vref(u8g);

  while( *s != '\0' )
    2bb4:	f5 01       	movw	r30, r10
    2bb6:	21 91       	ld	r18, Z+
    2bb8:	5f 01       	movw	r10, r30
    2bba:	22 23       	and	r18, r18
    2bbc:	39 f0       	breq	.+14     	; 0x2bcc <u8g_DrawStr90+0x52>
  {
    d = u8g_draw_glyph90(u8g, x, y, *s);
    2bbe:	4d 2d       	mov	r20, r13
    2bc0:	60 2f       	mov	r22, r16
    2bc2:	c7 01       	movw	r24, r14
    2bc4:	34 df       	rcall	.-408    	; 0x2a2e <u8g_draw_glyph90>
    2bc6:	d8 0e       	add	r13, r24
    y += d;
    2bc8:	18 0f       	add	r17, r24
    t += d;
    2bca:	f4 cf       	rjmp	.-24     	; 0x2bb4 <u8g_DrawStr90+0x3a>
    2bcc:	81 2f       	mov	r24, r17
    s++;
  }
  return t;
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	df 90       	pop	r13
    2be0:	bf 90       	pop	r11
    2be2:	af 90       	pop	r10
    2be4:	08 95       	ret

00002be6 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
    2be6:	dc 01       	movw	r26, r24
  uint16_t ls;
  if ( u8g->font == NULL )
    2be8:	14 96       	adiw	r26, 0x04	; 4
    2bea:	2d 91       	ld	r18, X+
    2bec:	3c 91       	ld	r19, X
    2bee:	15 97       	sbiw	r26, 0x05	; 5
    2bf0:	21 15       	cp	r18, r1
    2bf2:	31 05       	cpc	r19, r1
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <u8g_UpdateRefHeight+0x12>
    2bf6:	3f c0       	rjmp	.+126    	; 0x2c76 <u8g_UpdateRefHeight+0x90>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
    2bf8:	57 96       	adiw	r26, 0x17	; 23
    2bfa:	8c 91       	ld	r24, X
    2bfc:	57 97       	sbiw	r26, 0x17	; 23

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2bfe:	f9 01       	movw	r30, r18
void u8g_UpdateRefHeight(u8g_t *u8g)
{
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
    2c00:	81 11       	cpse	r24, r1
    2c02:	08 c0       	rjmp	.+16     	; 0x2c14 <u8g_UpdateRefHeight+0x2e>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2c04:	35 96       	adiw	r30, 0x05	; 5
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2c06:	e4 91       	lpm	r30, Z
  uint16_t ls;
  if ( u8g->font == NULL )
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    2c08:	58 96       	adiw	r26, 0x18	; 24
    2c0a:	ec 93       	st	X, r30
    2c0c:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2c0e:	f9 01       	movw	r30, r18
    2c10:	3c 96       	adiw	r30, 0x0c	; 12
    2c12:	11 c0       	rjmp	.+34     	; 0x2c36 <u8g_UpdateRefHeight+0x50>
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
    2c14:	81 30       	cpi	r24, 0x01	; 1
    2c16:	41 f4       	brne	.+16     	; 0x2c28 <u8g_UpdateRefHeight+0x42>

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2c18:	3f 96       	adiw	r30, 0x0f	; 15
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2c1a:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    2c1c:	58 96       	adiw	r26, 0x18	; 24
    2c1e:	ec 93       	st	X, r30
    2c20:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2c22:	f9 01       	movw	r30, r18
    2c24:	70 96       	adiw	r30, 0x10	; 16
    2c26:	07 c0       	rjmp	.+14     	; 0x2c36 <u8g_UpdateRefHeight+0x50>
    2c28:	3d 96       	adiw	r30, 0x0d	; 13
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2c2a:	e4 91       	lpm	r30, Z
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    2c2c:	58 96       	adiw	r26, 0x18	; 24
    2c2e:	ec 93       	st	X, r30
    2c30:	58 97       	sbiw	r26, 0x18	; 24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2c32:	f9 01       	movw	r30, r18
    2c34:	3e 96       	adiw	r30, 0x0e	; 14
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2c36:	e4 91       	lpm	r30, Z
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
    2c38:	59 96       	adiw	r26, 0x19	; 25
    2c3a:	ec 93       	st	X, r30
    2c3c:	59 97       	sbiw	r26, 0x19	; 25
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
    2c3e:	58 96       	adiw	r26, 0x18	; 24
    2c40:	8c 91       	ld	r24, X
    2c42:	58 97       	sbiw	r26, 0x18	; 24
    2c44:	08 2e       	mov	r0, r24
    2c46:	00 0c       	add	r0, r0
    2c48:	99 0b       	sbc	r25, r25
    2c4a:	59 96       	adiw	r26, 0x19	; 25
    2c4c:	2c 91       	ld	r18, X
    2c4e:	59 97       	sbiw	r26, 0x19	; 25
    2c50:	82 1b       	sub	r24, r18
    2c52:	91 09       	sbc	r25, r1
    2c54:	27 fd       	sbrc	r18, 7
    2c56:	93 95       	inc	r25
  if ( u8g->font_line_spacing_factor != 64 )
    2c58:	5a 96       	adiw	r26, 0x1a	; 26
    2c5a:	2c 91       	ld	r18, X
    2c5c:	5a 97       	sbiw	r26, 0x1a	; 26
    2c5e:	20 34       	cpi	r18, 0x40	; 64
    2c60:	41 f0       	breq	.+16     	; 0x2c72 <u8g_UpdateRefHeight+0x8c>
  {
    ls &= 255;
    ls *= u8g->font_line_spacing_factor;
    2c62:	82 9f       	mul	r24, r18
    2c64:	c0 01       	movw	r24, r0
    2c66:	11 24       	eor	r1, r1
    ls >>= 6;
    2c68:	26 e0       	ldi	r18, 0x06	; 6
    2c6a:	96 95       	lsr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	2a 95       	dec	r18
    2c70:	e1 f7       	brne	.-8      	; 0x2c6a <u8g_UpdateRefHeight+0x84>
  }
  u8g->line_spacing = ls;
    2c72:	5b 96       	adiw	r26, 0x1b	; 27
    2c74:	8c 93       	st	X, r24
    2c76:	08 95       	ret

00002c78 <u8g_SetFontPosBaseline>:
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2c78:	2d ed       	ldi	r18, 0xDD	; 221
    2c7a:	33 e1       	ldi	r19, 0x13	; 19
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	36 8b       	std	Z+22, r19	; 0x16
    2c80:	25 8b       	std	Z+21, r18	; 0x15
    2c82:	08 95       	ret

00002c84 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
  if ( u8g->font != font )
    2c88:	fc 01       	movw	r30, r24
    2c8a:	24 81       	ldd	r18, Z+4	; 0x04
    2c8c:	35 81       	ldd	r19, Z+5	; 0x05
    2c8e:	26 17       	cp	r18, r22
    2c90:	37 07       	cpc	r19, r23
    2c92:	41 f0       	breq	.+16     	; 0x2ca4 <u8g_SetFont+0x20>
    2c94:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    2c96:	75 83       	std	Z+5, r23	; 0x05
    2c98:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    2c9a:	a5 df       	rcall	.-182    	; 0x2be6 <u8g_UpdateRefHeight>
    2c9c:	8d ed       	ldi	r24, 0xDD	; 221
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    2c9e:	93 e1       	ldi	r25, 0x13	; 19
    2ca0:	9e 8b       	std	Y+22, r25	; 0x16
    2ca2:	8d 8b       	std	Y+21, r24	; 0x15
    2ca4:	df 91       	pop	r29
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <u8g_init_data>:
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	ec 01       	movw	r28, r24
  u8g->font = NULL;
    2cb2:	1d 82       	std	Y+5, r1	; 0x05
    2cb4:	1c 82       	std	Y+4, r1	; 0x04
  u8g->cursor_font = NULL;
    2cb6:	1f 82       	std	Y+7, r1	; 0x07
    2cb8:	1e 82       	std	Y+6, r1	; 0x06
  u8g->cursor_bg_color = 0;
    2cba:	19 86       	std	Y+9, r1	; 0x09
  u8g->cursor_fg_color = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	88 87       	std	Y+8, r24	; 0x08
  u8g->cursor_encoding = 34;
    2cc0:	82 e2       	ldi	r24, 0x22	; 34
    2cc2:	8a 87       	std	Y+10, r24	; 0x0a
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
    2cc4:	1f 86       	std	Y+15, r1	; 0x0f
    2cc6:	1e 86       	std	Y+14, r1	; 0x0e
    2cc8:	fe 01       	movw	r30, r28
    2cca:	b3 96       	adiw	r30, 0x23	; 35
    2ccc:	ce 01       	movw	r24, r28
    2cce:	c1 96       	adiw	r24, 0x31	; 49

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
    2cd0:	2f ef       	ldi	r18, 0xFF	; 255
    2cd2:	21 93       	st	Z+, r18
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    2cd4:	e8 17       	cp	r30, r24
    2cd6:	f9 07       	cpc	r31, r25
    2cd8:	e1 f7       	brne	.-8      	; 0x2cd2 <u8g_init_data+0x28>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    2cda:	11 e0       	ldi	r17, 0x01	; 1
    2cdc:	18 a3       	std	Y+32, r17	; 0x20
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
    2cde:	ce 01       	movw	r24, r28
    2ce0:	cb df       	rcall	.-106    	; 0x2c78 <u8g_SetFontPosBaseline>
    2ce2:	1f 8b       	std	Y+23, r17	; 0x17
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
    2ce4:	18 8e       	std	Y+24, r1	; 0x18
  u8g->font_ref_ascent = 0;
    2ce6:	19 8e       	std	Y+25, r1	; 0x19
  u8g->font_ref_descent = 0;
    2ce8:	80 e4       	ldi	r24, 0x40	; 64
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
    2cea:	8a 8f       	std	Y+26, r24	; 0x1a
    2cec:	1b 8e       	std	Y+27, r1	; 0x1b
  u8g->line_spacing = 0;
    2cee:	8d e4       	ldi	r24, 0x4D	; 77
  
  u8g->state_cb = u8g_state_dummy_cb;
    2cf0:	99 e1       	ldi	r25, 0x19	; 25
    2cf2:	9a ab       	std	Y+50, r25	; 0x32
    2cf4:	89 ab       	std	Y+49, r24	; 0x31
    2cf6:	df 91       	pop	r29

}
    2cf8:	cf 91       	pop	r28
    2cfa:	1f 91       	pop	r17
    2cfc:	08 95       	ret

00002cfe <u8g_call_dev_fn>:
#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  return dev->dev_fn(u8g, dev, msg, arg); 
    2cfe:	db 01       	movw	r26, r22
    2d00:	ed 91       	ld	r30, X+
    2d02:	fc 91       	ld	r31, X
    2d04:	09 95       	icall
}
    2d06:	08 95       	ret

00002d08 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
    2d08:	ef 92       	push	r14
    2d0a:	ff 92       	push	r15
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <u8g_InitLL+0xc>
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	7c 01       	movw	r14, r24
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	d1 96       	adiw	r26, 0x31	; 49
    2d1e:	ed 91       	ld	r30, X+
    2d20:	fc 91       	ld	r31, X
    2d22:	d2 97       	sbiw	r26, 0x32	; 50
    2d24:	82 e0       	ldi	r24, 0x02	; 2
    2d26:	69 83       	std	Y+1, r22	; 0x01
    2d28:	7a 83       	std	Y+2, r23	; 0x02
    2d2a:	09 95       	icall
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	4a e0       	ldi	r20, 0x0A	; 10
    2d32:	69 81       	ldd	r22, Y+1	; 0x01
    2d34:	7a 81       	ldd	r23, Y+2	; 0x02
    2d36:	c7 01       	movw	r24, r14
    2d38:	e2 df       	rcall	.-60     	; 0x2cfe <u8g_call_dev_fn>
    2d3a:	18 2f       	mov	r17, r24
    2d3c:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
    2d3e:	d1 96       	adiw	r26, 0x31	; 49
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	d2 97       	sbiw	r26, 0x32	; 50
    2d46:	83 e0       	ldi	r24, 0x03	; 3
    2d48:	09 95       	icall
    2d4a:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    2d4c:	d1 96       	adiw	r26, 0x31	; 49
    2d4e:	ed 91       	ld	r30, X+
    2d50:	fc 91       	ld	r31, X
    2d52:	d2 97       	sbiw	r26, 0x32	; 50
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	09 95       	icall
    2d58:	81 2f       	mov	r24, r17
  return r;
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	08 95       	ret

00002d6a <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	ec 01       	movw	r28, r24
    2d74:	8b 01       	movw	r16, r22
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    2d76:	e9 a9       	ldd	r30, Y+49	; 0x31
    2d78:	fa a9       	ldd	r31, Y+50	; 0x32
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    2d7e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2d80:	fa a9       	ldd	r31, Y+50	; 0x32
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	09 95       	icall
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	44 e1       	ldi	r20, 0x14	; 20
    2d8c:	b8 01       	movw	r22, r16
    2d8e:	ce 01       	movw	r24, r28
    2d90:	b6 df       	rcall	.-148    	; 0x2cfe <u8g_call_dev_fn>
    2d92:	9e 01       	movw	r18, r28
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    2d94:	2d 5c       	subi	r18, 0xCD	; 205
    2d96:	3f 4f       	sbci	r19, 0xFF	; 255
    2d98:	47 e1       	ldi	r20, 0x17	; 23
    2d9a:	b8 01       	movw	r22, r16
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	af df       	rcall	.-162    	; 0x2cfe <u8g_call_dev_fn>
    2da0:	e9 a9       	ldd	r30, Y+49	; 0x31
    2da2:	fa a9       	ldd	r31, Y+50	; 0x32
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	09 95       	icall
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
}
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	ec 01       	movw	r28, r24
    2dbe:	7b 01       	movw	r14, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    2dc0:	e9 a9       	ldd	r30, Y+49	; 0x31
    2dc2:	fa a9       	ldd	r31, Y+50	; 0x32
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    2dc8:	e9 a9       	ldd	r30, Y+49	; 0x31
    2dca:	fa a9       	ldd	r31, Y+50	; 0x32
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	09 95       	icall
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	45 e1       	ldi	r20, 0x15	; 21
    2dd6:	b7 01       	movw	r22, r14
    2dd8:	ce 01       	movw	r24, r28
    2dda:	91 df       	rcall	.-222    	; 0x2cfe <u8g_call_dev_fn>
    2ddc:	18 2f       	mov	r17, r24
    2dde:	88 23       	and	r24, r24
  if ( r != 0 )
    2de0:	39 f0       	breq	.+14     	; 0x2df0 <u8g_NextPageLL+0x3e>
    2de2:	9e 01       	movw	r18, r28
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    2de4:	2d 5c       	subi	r18, 0xCD	; 205
    2de6:	3f 4f       	sbci	r19, 0xFF	; 255
    2de8:	47 e1       	ldi	r20, 0x17	; 23
    2dea:	b7 01       	movw	r22, r14
    2dec:	ce 01       	movw	r24, r28
    2dee:	87 df       	rcall	.-242    	; 0x2cfe <u8g_call_dev_fn>
    2df0:	e9 a9       	ldd	r30, Y+49	; 0x31
    2df2:	fa a9       	ldd	r31, Y+50	; 0x32
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	09 95       	icall
    2df8:	81 2f       	mov	r24, r17
    2dfa:	df 91       	pop	r29
  return r;
}
    2dfc:	cf 91       	pop	r28
    2dfe:	1f 91       	pop	r17
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	08 95       	ret

00002e06 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
    2e06:	a1 e0       	ldi	r26, 0x01	; 1
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e8 e0       	ldi	r30, 0x08	; 8
    2e0c:	f7 e1       	ldi	r31, 0x17	; 23
    2e0e:	a9 c3       	rjmp	.+1874   	; 0x3562 <__prologue_saves__+0x20>
    2e10:	9e 01       	movw	r18, r28
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
    2e12:	2f 5f       	subi	r18, 0xFF	; 255
    2e14:	3f 4f       	sbci	r19, 0xFF	; 255
    2e16:	46 e4       	ldi	r20, 0x46	; 70
    2e18:	72 df       	rcall	.-284    	; 0x2cfe <u8g_call_dev_fn>
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	21 96       	adiw	r28, 0x01	; 1
  return r;
}
    2e1e:	e2 e0       	ldi	r30, 0x02	; 2
    2e20:	bc c3       	rjmp	.+1912   	; 0x359a <__epilogue_restores__+0x20>

00002e22 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
    2e22:	a1 e0       	ldi	r26, 0x01	; 1
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e6 e1       	ldi	r30, 0x16	; 22
    2e28:	f7 e1       	ldi	r31, 0x17	; 23
    2e2a:	9b c3       	rjmp	.+1846   	; 0x3562 <__prologue_saves__+0x20>
    2e2c:	9e 01       	movw	r18, r28
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
    2e2e:	2f 5f       	subi	r18, 0xFF	; 255
    2e30:	3f 4f       	sbci	r19, 0xFF	; 255
    2e32:	47 e4       	ldi	r20, 0x47	; 71
    2e34:	64 df       	rcall	.-312    	; 0x2cfe <u8g_call_dev_fn>
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	21 96       	adiw	r28, 0x01	; 1
  return r;
}
    2e3a:	e2 e0       	ldi	r30, 0x02	; 2
    2e3c:	ae c3       	rjmp	.+1884   	; 0x359a <__epilogue_restores__+0x20>

00002e3e <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	48 e4       	ldi	r20, 0x48	; 72
    2e44:	5c cf       	rjmp	.-328    	; 0x2cfe <u8g_call_dev_fn>

00002e46 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	ec 01       	movw	r28, r24
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
    2e4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e4e:	7b 81       	ldd	r23, Y+3	; 0x03
    2e50:	da df       	rcall	.-76     	; 0x2e06 <u8g_GetWidthLL>
    2e52:	88 83       	st	Y, r24
    2e54:	6a 81       	ldd	r22, Y+2	; 0x02
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
    2e56:	7b 81       	ldd	r23, Y+3	; 0x03
    2e58:	ce 01       	movw	r24, r28
    2e5a:	e3 df       	rcall	.-58     	; 0x2e22 <u8g_GetHeightLL>
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e60:	7b 81       	ldd	r23, Y+3	; 0x03
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
    2e62:	ce 01       	movw	r24, r28
    2e64:	ec df       	rcall	.-40     	; 0x2e3e <u8g_GetModeLL>
    2e66:	8b 87       	std	Y+11, r24	; 0x0b
    2e68:	9e 01       	movw	r18, r28
    2e6a:	2d 5c       	subi	r18, 0xCD	; 205
    2e6c:	3f 4f       	sbci	r19, 0xFF	; 255
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    2e6e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e70:	7b 81       	ldd	r23, Y+3	; 0x03
    2e72:	47 e1       	ldi	r20, 0x17	; 23
    2e74:	ce 01       	movw	r24, r28
    2e76:	43 df       	rcall	.-378    	; 0x2cfe <u8g_call_dev_fn>
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	ec 01       	movw	r28, r24
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    2e84:	6a 81       	ldd	r22, Y+2	; 0x02
    2e86:	7b 81       	ldd	r23, Y+3	; 0x03
    2e88:	3f df       	rcall	.-386    	; 0x2d08 <u8g_InitLL>
    2e8a:	88 23       	and	r24, r24
    2e8c:	19 f0       	breq	.+6      	; 0x2e94 <u8g_Begin+0x16>
    2e8e:	ce 01       	movw	r24, r28
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
    2e90:	da df       	rcall	.-76     	; 0x2e46 <u8g_UpdateDimension>
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	df 91       	pop	r29
  return 1;
    2e96:	cf 91       	pop	r28
}
    2e98:	08 95       	ret

00002e9a <u8g_InitHWSPI>:
  /* issue 146 */
  return u8g_Begin(u8g);
}

uint8_t u8g_InitHWSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs, uint8_t a0, uint8_t reset)
{
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <u8g_InitHWSPI+0x10>
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	6c 01       	movw	r12, r24
    2eb0:	7b 01       	movw	r14, r22
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    2eb2:	2a 83       	std	Y+2, r18	; 0x02
    2eb4:	49 83       	std	Y+1, r20	; 0x01
    2eb6:	f9 de       	rcall	.-526    	; 0x2caa <u8g_init_data>
    2eb8:	f6 01       	movw	r30, r12
  u8g->dev = dev;
    2eba:	f3 82       	std	Z+3, r15	; 0x03
    2ebc:	e2 82       	std	Z+2, r14	; 0x02
    2ebe:	49 81       	ldd	r20, Y+1	; 0x01
  
  
  /* assign user pins */
  u8g->pin_list[U8G_PI_CS] = cs;
    2ec0:	45 a3       	std	Z+37, r20	; 0x25
    2ec2:	2a 81       	ldd	r18, Y+2	; 0x02
  u8g->pin_list[U8G_PI_A0] = a0;
    2ec4:	24 a3       	std	Z+36, r18	; 0x24
    2ec6:	03 a3       	std	Z+35, r16	; 0x23
  u8g->pin_list[U8G_PI_RESET] = reset;
    2ec8:	c6 01       	movw	r24, r12
  
  return u8g_Begin(u8g);
    2eca:	d9 df       	rcall	.-78     	; 0x2e7e <u8g_Begin>
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
}
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	df 90       	pop	r13
    2edc:	cf 90       	pop	r12
    2ede:	08 95       	ret

00002ee0 <u8g_FirstPage>:
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
  u8g_FirstPageLL(u8g, u8g->dev);
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	62 81       	ldd	r22, Z+2	; 0x02
    2ee4:	73 81       	ldd	r23, Z+3	; 0x03
    2ee6:	41 cf       	rjmp	.-382    	; 0x2d6a <u8g_FirstPageLL>

00002ee8 <u8g_NextPage>:
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	ec 01       	movw	r28, r24
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
    2eee:	ee 85       	ldd	r30, Y+14	; 0x0e
    2ef0:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ef2:	30 97       	sbiw	r30, 0x00	; 0
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <u8g_NextPage+0x10>
  {
    u8g->cursor_fn(u8g);
    2ef6:	09 95       	icall
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    2ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    2efa:	7b 81       	ldd	r23, Y+3	; 0x03
    2efc:	ce 01       	movw	r24, r28
    2efe:	59 df       	rcall	.-334    	; 0x2db2 <u8g_NextPageLL>
    2f00:	df 91       	pop	r29
}
    2f02:	cf 91       	pop	r28
    2f04:	08 95       	ret

00002f06 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    2f06:	0f 93       	push	r16
    2f08:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    2f0e:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    2f10:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    2f12:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    2f14:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    2f16:	9f 01       	movw	r18, r30
    2f18:	24 5e       	subi	r18, 0xE4	; 228
    2f1a:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    2f1c:	4b e3       	ldi	r20, 0x3B	; 59
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cf 01       	movw	r24, r30
    2f22:	ed de       	rcall	.-550    	; 0x2cfe <u8g_call_dev_fn>
    2f24:	0f 91       	pop	r16
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    2f26:	08 95       	ret

00002f28 <u8g_SetColorIndex>:
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    2f28:	fc 01       	movw	r30, r24
    2f2a:	60 a3       	std	Z+32, r22	; 0x20
    2f2c:	08 95       	ret

00002f2e <u8g_pb8h1_set_pixel>:
  u8g_pb_Clear(b);
}

/* limitation: total buffer must not exceed 256 bytes */
void u8g_pb8h1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	ec 01       	movw	r28, r24
//    return;
//  u8g_pb8h1_state_set_pixel(&s, color_index);
#else
  register uint8_t mask;
  u8g_uint_t tmp;
  uint8_t *ptr = b->buf;
    2f38:	0e 81       	ldd	r16, Y+6	; 0x06
    2f3a:	1f 81       	ldd	r17, Y+7	; 0x07
  
  y -= b->p.page_y0;
  tmp = b->width;
    2f3c:	9d 81       	ldd	r25, Y+5	; 0x05
  tmp >>= 3;
    2f3e:	96 95       	lsr	r25
    2f40:	96 95       	lsr	r25
    2f42:	96 95       	lsr	r25
  tmp *= (uint8_t)y;
  ptr += tmp;
  
  mask = 0x080;
  mask >>= x & 7;
    2f44:	86 2f       	mov	r24, r22
    2f46:	87 70       	andi	r24, 0x07	; 7
    2f48:	a0 e8       	ldi	r26, 0x80	; 128
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <u8g_pb8h1_set_pixel+0x24>
    2f4e:	b5 95       	asr	r27
    2f50:	a7 95       	ror	r26
    2f52:	8a 95       	dec	r24
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <u8g_pb8h1_set_pixel+0x20>
#else
  register uint8_t mask;
  u8g_uint_t tmp;
  uint8_t *ptr = b->buf;
  
  y -= b->p.page_y0;
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	48 1b       	sub	r20, r24
  tmp = b->width;
  tmp >>= 3;
  tmp *= (uint8_t)y;
    2f5a:	49 9f       	mul	r20, r25
    2f5c:	40 2d       	mov	r20, r0
    2f5e:	11 24       	eor	r1, r1
  ptr += tmp;
  
  mask = 0x080;
  mask >>= x & 7;
  x >>= 3;
    2f60:	66 95       	lsr	r22
    2f62:	66 95       	lsr	r22
    2f64:	66 95       	lsr	r22
  ptr += x;
    2f66:	e6 2f       	mov	r30, r22
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	e4 0f       	add	r30, r20
    2f6c:	f1 1d       	adc	r31, r1
    2f6e:	e0 0f       	add	r30, r16
    2f70:	f1 1f       	adc	r31, r17
    2f72:	80 81       	ld	r24, Z
  if ( color_index )
    2f74:	22 23       	and	r18, r18
    2f76:	11 f0       	breq	.+4      	; 0x2f7c <u8g_pb8h1_set_pixel+0x4e>
  {
    *ptr |= mask;
    2f78:	a8 2b       	or	r26, r24
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <u8g_pb8h1_set_pixel+0x52>
  }
  else
  {
    mask ^=0xff;
    2f7c:	a0 95       	com	r26
    *ptr &= mask;
    2f7e:	a8 23       	and	r26, r24
    2f80:	a0 83       	st	Z, r26
  }
#endif
}
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	08 95       	ret

00002f8c <u8g_pb8h1_SetPixel>:


void u8g_pb8h1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	db 01       	movw	r26, r22
  if ( arg_pixel->y < b->p.page_y0 )
    2f90:	11 96       	adiw	r26, 0x01	; 1
    2f92:	4c 91       	ld	r20, X
    2f94:	11 97       	sbiw	r26, 0x01	; 1
    2f96:	82 81       	ldd	r24, Z+2	; 0x02
    2f98:	48 17       	cp	r20, r24
    2f9a:	58 f0       	brcs	.+22     	; 0x2fb2 <u8g_pb8h1_SetPixel+0x26>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
    2f9c:	83 81       	ldd	r24, Z+3	; 0x03
    2f9e:	84 17       	cp	r24, r20
    2fa0:	40 f0       	brcs	.+16     	; 0x2fb2 <u8g_pb8h1_SetPixel+0x26>
    return;
  if ( arg_pixel->x >= b->width )
    2fa2:	6c 91       	ld	r22, X
    2fa4:	85 81       	ldd	r24, Z+5	; 0x05
    2fa6:	68 17       	cp	r22, r24
    2fa8:	20 f4       	brcc	.+8      	; 0x2fb2 <u8g_pb8h1_SetPixel+0x26>
    2faa:	cf 01       	movw	r24, r30
    return;
  u8g_pb8h1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
    2fac:	14 96       	adiw	r26, 0x04	; 4
    2fae:	2c 91       	ld	r18, X
    2fb0:	be cf       	rjmp	.-132    	; 0x2f2e <u8g_pb8h1_set_pixel>
    2fb2:	08 95       	ret

00002fb4 <u8g_pb8h1_Set8PixelOpt2>:
    pixel <<= 1;
  } while( pixel != 0  );
}

void u8g_pb8h1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    2fb4:	cf 92       	push	r12
    2fb6:	df 92       	push	r13
    2fb8:	ff 92       	push	r15
    2fba:	0f 93       	push	r16
    2fbc:	1f 93       	push	r17
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	6c 01       	movw	r12, r24
    2fc4:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    2fc6:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    2fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fca:	91 30       	cpi	r25, 0x01	; 1
    2fcc:	51 f0       	breq	.+20     	; 0x2fe2 <u8g_pb8h1_Set8PixelOpt2+0x2e>
    2fce:	30 f0       	brcs	.+12     	; 0x2fdc <u8g_pb8h1_Set8PixelOpt2+0x28>
    2fd0:	92 30       	cpi	r25, 0x02	; 2
    2fd2:	49 f0       	breq	.+18     	; 0x2fe6 <u8g_pb8h1_Set8PixelOpt2+0x32>
    2fd4:	93 30       	cpi	r25, 0x03	; 3
    2fd6:	51 f4       	brne	.+20     	; 0x2fec <u8g_pb8h1_Set8PixelOpt2+0x38>
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    2fd8:	1f ef       	ldi	r17, 0xFF	; 255
    2fda:	09 c0       	rjmp	.+18     	; 0x2fee <u8g_pb8h1_Set8PixelOpt2+0x3a>

void u8g_pb8h1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    2fde:	01 e0       	ldi	r16, 0x01	; 1
    2fe0:	07 c0       	rjmp	.+14     	; 0x2ff0 <u8g_pb8h1_Set8PixelOpt2+0x3c>
    case 1: dy++; break;
    2fe2:	11 e0       	ldi	r17, 0x01	; 1
    2fe4:	04 c0       	rjmp	.+8      	; 0x2fee <u8g_pb8h1_Set8PixelOpt2+0x3a>

void u8g_pb8h1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    2fe8:	0f ef       	ldi	r16, 0xFF	; 255
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <u8g_pb8h1_Set8PixelOpt2+0x3c>

void u8g_pb8h1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    2fec:	10 e0       	ldi	r17, 0x00	; 0
}

void u8g_pb8h1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    2fee:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    2ff0:	f7 fe       	sbrs	r15, 7
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <u8g_pb8h1_Set8PixelOpt2+0x46>
      u8g_pb8h1_SetPixel(b, arg_pixel);
    2ff4:	be 01       	movw	r22, r28
    2ff6:	c6 01       	movw	r24, r12
    2ff8:	c9 df       	rcall	.-110    	; 0x2f8c <u8g_pb8h1_SetPixel>
    2ffa:	98 81       	ld	r25, Y
    arg_pixel->x += dx;
    2ffc:	90 0f       	add	r25, r16
    2ffe:	98 83       	st	Y, r25
    3000:	99 81       	ldd	r25, Y+1	; 0x01
    arg_pixel->y += dy;
    3002:	91 0f       	add	r25, r17
    3004:	99 83       	std	Y+1, r25	; 0x01
    3006:	ff 0c       	add	r15, r15
    pixel <<= 1;
    3008:	99 f7       	brne	.-26     	; 0x2ff0 <u8g_pb8h1_Set8PixelOpt2+0x3c>
  } while( pixel != 0  );  
    300a:	df 91       	pop	r29
}
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	ff 90       	pop	r15
    3014:	df 90       	pop	r13
    3016:	cf 90       	pop	r12
    3018:	08 95       	ret

0000301a <u8g_dev_pb8h1_base_fn>:
  }
}
#endif

uint8_t u8g_dev_pb8h1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    3024:	fb 01       	movw	r30, r22
    3026:	c2 81       	ldd	r28, Z+2	; 0x02
    3028:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    302a:	42 33       	cpi	r20, 0x32	; 50
    302c:	d9 f0       	breq	.+54     	; 0x3064 <u8g_dev_pb8h1_base_fn+0x4a>
    302e:	58 f4       	brcc	.+22     	; 0x3046 <u8g_dev_pb8h1_base_fn+0x2c>
    3030:	45 31       	cpi	r20, 0x15	; 21
    3032:	e1 f0       	breq	.+56     	; 0x306c <u8g_dev_pb8h1_base_fn+0x52>
    3034:	47 31       	cpi	r20, 0x17	; 23
    3036:	09 f1       	breq	.+66     	; 0x307a <u8g_dev_pb8h1_base_fn+0x60>
    3038:	44 31       	cpi	r20, 0x14	; 20
    303a:	41 f5       	brne	.+80     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    303c:	ce 01       	movw	r24, r28
    303e:	2c d0       	rcall	.+88     	; 0x3098 <u8g_pb_Clear>
    3040:	ce 01       	movw	r24, r28
      u8g_page_First(&(pb->p));
    3042:	5c d2       	rcall	.+1208   	; 0x34fc <u8g_page_First>
    3044:	23 c0       	rjmp	.+70     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    3046:	46 34       	cpi	r20, 0x46	; 70
    3048:	e1 f0       	breq	.+56     	; 0x3082 <u8g_dev_pb8h1_base_fn+0x68>
#endif

uint8_t u8g_dev_pb8h1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    304a:	47 34       	cpi	r20, 0x47	; 71
    304c:	e1 f0       	breq	.+56     	; 0x3086 <u8g_dev_pb8h1_base_fn+0x6c>
    304e:	4b 33       	cpi	r20, 0x3B	; 59
    3050:	e9 f4       	brne	.+58     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    3052:	b9 01       	movw	r22, r18
    3054:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_SET_8PIXEL:
#ifdef NEW_CODE
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8h1_Set8PixelState(pb, (u8g_dev_arg_pixel_t *)arg);
#else
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    3056:	56 d0       	rcall	.+172    	; 0x3104 <u8g_pb_Is8PixelVisible>
    3058:	88 23       	and	r24, r24
    305a:	c1 f0       	breq	.+48     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    305c:	b8 01       	movw	r22, r16
    305e:	ce 01       	movw	r24, r28
    3060:	a9 df       	rcall	.-174    	; 0x2fb4 <u8g_pb8h1_Set8PixelOpt2>
        u8g_pb8h1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    3062:	14 c0       	rjmp	.+40     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    3064:	b9 01       	movw	r22, r18
    3066:	ce 01       	movw	r24, r28
    3068:	91 df       	rcall	.-222    	; 0x2f8c <u8g_pb8h1_SetPixel>
    306a:	10 c0       	rjmp	.+32     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
#endif
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8h1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    306c:	ce 01       	movw	r24, r28
    306e:	4d d2       	rcall	.+1178   	; 0x350a <u8g_page_Next>
    3070:	88 23       	and	r24, r24
    3072:	69 f0       	breq	.+26     	; 0x308e <u8g_dev_pb8h1_base_fn+0x74>
    3074:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    3076:	10 d0       	rcall	.+32     	; 0x3098 <u8g_pb_Clear>
    3078:	09 c0       	rjmp	.+18     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    307a:	b9 01       	movw	r22, r18
    307c:	ce 01       	movw	r24, r28
    307e:	32 d0       	rcall	.+100    	; 0x30e4 <u8g_pb_GetPageBox>
        return 0;
      u8g_pb_Clear(pb);
    3080:	05 c0       	rjmp	.+10     	; 0x308c <u8g_dev_pb8h1_base_fn+0x72>
    3082:	8d 81       	ldd	r24, Y+5	; 0x05
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <u8g_dev_pb8h1_base_fn+0x6e>
    3086:	89 81       	ldd	r24, Y+1	; 0x01
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    3088:	f8 01       	movw	r30, r16
    308a:	80 83       	st	Z, r24
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    3096:	08 95       	ret

00003098 <u8g_pb_Clear>:

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
    3098:	dc 01       	movw	r26, r24
    309a:	16 96       	adiw	r26, 0x06	; 6
    309c:	ed 91       	ld	r30, X+
    309e:	fc 91       	ld	r31, X
    30a0:	17 97       	sbiw	r26, 0x07	; 7
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
    30a2:	15 96       	adiw	r26, 0x05	; 5
    30a4:	8c 91       	ld	r24, X
    30a6:	9f 01       	movw	r18, r30
    30a8:	28 0f       	add	r18, r24
    30aa:	31 1d       	adc	r19, r1
    30ac:	c9 01       	movw	r24, r18
  do
  {
    *ptr++ = 0;
    30ae:	11 92       	st	Z+, r1
  } while( ptr != end_ptr );
    30b0:	e8 17       	cp	r30, r24
    30b2:	f9 07       	cpc	r31, r25
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <u8g_pb_Clear+0x16>
}
    30b6:	08 95       	ret

000030b8 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
    30b8:	fc 01       	movw	r30, r24
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
    30ba:	91 e0       	ldi	r25, 0x01	; 1
    30bc:	83 81       	ldd	r24, Z+3	; 0x03
    30be:	86 17       	cp	r24, r22
    30c0:	08 f4       	brcc	.+2      	; 0x30c4 <u8g_pb_IsYIntersection+0xc>
    30c2:	90 e0       	ldi	r25, 0x00	; 0
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
    30c4:	31 e0       	ldi	r19, 0x01	; 1
    30c6:	46 17       	cp	r20, r22
    30c8:	08 f0       	brcs	.+2      	; 0x30cc <u8g_pb_IsYIntersection+0x14>
    30ca:	30 e0       	ldi	r19, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    30cc:	83 2f       	mov	r24, r19
    30ce:	89 2b       	or	r24, r25

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
    30d0:	21 e0       	ldi	r18, 0x01	; 1
    30d2:	52 81       	ldd	r21, Z+2	; 0x02
    30d4:	45 17       	cp	r20, r21
    30d6:	08 f4       	brcc	.+2      	; 0x30da <u8g_pb_IsYIntersection+0x22>
    30d8:	20 e0       	ldi	r18, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    30da:	28 23       	and	r18, r24
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
    30dc:	83 2f       	mov	r24, r19
    30de:	89 23       	and	r24, r25
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
}
    30e0:	82 2b       	or	r24, r18
    30e2:	08 95       	ret

000030e4 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    30e4:	dc 01       	movw	r26, r24
    30e6:	fb 01       	movw	r30, r22
  box->x0 = 0;
    30e8:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    30ea:	12 96       	adiw	r26, 0x02	; 2
    30ec:	8c 91       	ld	r24, X
    30ee:	12 97       	sbiw	r26, 0x02	; 2
    30f0:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    30f2:	15 96       	adiw	r26, 0x05	; 5
    30f4:	8c 91       	ld	r24, X
    30f6:	15 97       	sbiw	r26, 0x05	; 5
    30f8:	81 50       	subi	r24, 0x01	; 1
    30fa:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    30fc:	13 96       	adiw	r26, 0x03	; 3
    30fe:	8c 91       	ld	r24, X
    3100:	83 83       	std	Z+3, r24	; 0x03
    3102:	08 95       	ret

00003104 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    3104:	fb 01       	movw	r30, r22
    3106:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    3108:	23 81       	ldd	r18, Z+3	; 0x03
    310a:	21 30       	cpi	r18, 0x01	; 1
    310c:	29 f0       	breq	.+10     	; 0x3118 <u8g_pb_Is8PixelVisible+0x14>
    310e:	23 30       	cpi	r18, 0x03	; 3
    3110:	31 f4       	brne	.+12     	; 0x311e <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    3112:	68 ef       	ldi	r22, 0xF8	; 248
    3114:	64 0f       	add	r22, r20
      break;
    3116:	04 c0       	rjmp	.+8      	; 0x3120 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    3118:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    311a:	48 5f       	subi	r20, 0xF8	; 248
      break;
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    311e:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    3120:	cb cf       	rjmp	.-106    	; 0x30b8 <u8g_pb_IsYIntersection>

00003122 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e6 e9       	ldi	r30, 0x96	; 150
    3128:	f8 e1       	ldi	r31, 0x18	; 24
    312a:	15 c2       	rjmp	.+1066   	; 0x3556 <__prologue_saves__+0x14>
    312c:	7c 01       	movw	r14, r24
    312e:	d6 2f       	mov	r29, r22
    3130:	d4 2e       	mov	r13, r20
    3132:	c2 2f       	mov	r28, r18
    3134:	12 2f       	mov	r17, r18
  uint8_t pixel = 0x0ff;
  while( w >= 8 )
    3136:	c6 2e       	mov	r12, r22
    3138:	c2 0e       	add	r12, r18
    313a:	6c 2d       	mov	r22, r12
    313c:	61 1b       	sub	r22, r17
    313e:	18 30       	cpi	r17, 0x08	; 8
    3140:	38 f0       	brcs	.+14     	; 0x3150 <u8g_draw_hline+0x2e>
    3142:	0f ef       	ldi	r16, 0xFF	; 255
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	4d 2d       	mov	r20, r13
    3148:	c7 01       	movw	r24, r14
    314a:	dd de       	rcall	.-582    	; 0x2f06 <u8g_Draw8Pixel>
    314c:	18 50       	subi	r17, 0x08	; 8
    314e:	f5 cf       	rjmp	.-22     	; 0x313a <u8g_draw_hline+0x18>
    w-=8;
    3150:	6c 2f       	mov	r22, r28
    3152:	68 7f       	andi	r22, 0xF8	; 248
    3154:	6d 0f       	add	r22, r29
    3156:	2c 2f       	mov	r18, r28
    3158:	27 70       	andi	r18, 0x07	; 7
    315a:	79 f0       	breq	.+30     	; 0x317a <u8g_draw_hline+0x58>
    315c:	97 e0       	ldi	r25, 0x07	; 7
    x+=8;
  }
  if ( w != 0 )
    315e:	29 27       	eor	r18, r25
  {
    w ^=7;
    3160:	2f 5f       	subi	r18, 0xFF	; 255
    3162:	27 70       	andi	r18, 0x07	; 7
    w++;
    3164:	0f ef       	ldi	r16, 0xFF	; 255
    pixel <<= w&7;
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	02 c0       	rjmp	.+4      	; 0x316e <u8g_draw_hline+0x4c>
    316a:	00 0f       	add	r16, r16
    316c:	11 1f       	adc	r17, r17
    316e:	2a 95       	dec	r18
    3170:	e2 f7       	brpl	.-8      	; 0x316a <u8g_draw_hline+0x48>
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	4d 2d       	mov	r20, r13
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
    3176:	c7 01       	movw	r24, r14
    3178:	c6 de       	rcall	.-628    	; 0x2f06 <u8g_Draw8Pixel>
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    317e:	e8 e0       	ldi	r30, 0x08	; 8
  }
}
    3180:	06 c2       	rjmp	.+1036   	; 0x358e <__epilogue_restores__+0x14>

00003182 <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
    3182:	a0 e0       	ldi	r26, 0x00	; 0
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e6 ec       	ldi	r30, 0xC6	; 198
    3188:	f8 e1       	ldi	r31, 0x18	; 24
    318a:	e5 c1       	rjmp	.+970    	; 0x3556 <__prologue_saves__+0x14>
    318c:	7c 01       	movw	r14, r24
    318e:	d6 2e       	mov	r13, r22
    3190:	d4 2f       	mov	r29, r20
    3192:	c2 2f       	mov	r28, r18
    3194:	12 2f       	mov	r17, r18
  uint8_t pixel = 0x0ff;
  while( h >= 8 )
    3196:	c4 2e       	mov	r12, r20
    3198:	c2 0e       	add	r12, r18
    319a:	4c 2d       	mov	r20, r12
    319c:	41 1b       	sub	r20, r17
    319e:	18 30       	cpi	r17, 0x08	; 8
    31a0:	38 f0       	brcs	.+14     	; 0x31b0 <u8g_draw_vline+0x2e>
    31a2:	0f ef       	ldi	r16, 0xFF	; 255
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    31a4:	21 e0       	ldi	r18, 0x01	; 1
    31a6:	6d 2d       	mov	r22, r13
    31a8:	c7 01       	movw	r24, r14
    31aa:	ad de       	rcall	.-678    	; 0x2f06 <u8g_Draw8Pixel>
    31ac:	18 50       	subi	r17, 0x08	; 8
    31ae:	f5 cf       	rjmp	.-22     	; 0x319a <u8g_draw_vline+0x18>
    h-=8;
    31b0:	4c 2f       	mov	r20, r28
    31b2:	48 7f       	andi	r20, 0xF8	; 248
    31b4:	4d 0f       	add	r20, r29
    31b6:	2c 2f       	mov	r18, r28
    31b8:	27 70       	andi	r18, 0x07	; 7
    31ba:	79 f0       	breq	.+30     	; 0x31da <u8g_draw_vline+0x58>
    31bc:	97 e0       	ldi	r25, 0x07	; 7
    y+=8;
  }
  if ( h != 0 )
    31be:	29 27       	eor	r18, r25
  {
    h ^=7;
    31c0:	2f 5f       	subi	r18, 0xFF	; 255
    31c2:	27 70       	andi	r18, 0x07	; 7
    h++;
    31c4:	0f ef       	ldi	r16, 0xFF	; 255
    pixel <<= h&7;
    31c6:	10 e0       	ldi	r17, 0x00	; 0
    31c8:	02 c0       	rjmp	.+4      	; 0x31ce <u8g_draw_vline+0x4c>
    31ca:	00 0f       	add	r16, r16
    31cc:	11 1f       	adc	r17, r17
    31ce:	2a 95       	dec	r18
    31d0:	e2 f7       	brpl	.-8      	; 0x31ca <u8g_draw_vline+0x48>
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	6d 2d       	mov	r22, r13
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
    31d6:	c7 01       	movw	r24, r14
    31d8:	96 de       	rcall	.-724    	; 0x2f06 <u8g_Draw8Pixel>
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	e8 e0       	ldi	r30, 0x08	; 8
  }
}
    31e0:	d6 c1       	rjmp	.+940    	; 0x358e <__epilogue_restores__+0x14>

000031e2 <u8g_DrawHLine>:

void u8g_DrawHLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    31e2:	ef 92       	push	r14
    31e4:	ff 92       	push	r15
    31e6:	0f 93       	push	r16
    31e8:	1f 93       	push	r17
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	ec 01       	movw	r28, r24
    31f0:	16 2f       	mov	r17, r22
    31f2:	f4 2e       	mov	r15, r20
    31f4:	e2 2e       	mov	r14, r18
  if ( u8g_IsBBXIntersection(u8g, x, y, w, 1) == 0 )
    31f6:	01 e0       	ldi	r16, 0x01	; 1
    31f8:	51 d0       	rcall	.+162    	; 0x329c <u8g_IsBBXIntersection>
    31fa:	88 23       	and	r24, r24
    31fc:	29 f0       	breq	.+10     	; 0x3208 <u8g_DrawHLine+0x26>
    31fe:	2e 2d       	mov	r18, r14
    return;
  u8g_draw_hline(u8g, x, y, w);
    3200:	4f 2d       	mov	r20, r15
    3202:	61 2f       	mov	r22, r17
    3204:	ce 01       	movw	r24, r28
    3206:	8d df       	rcall	.-230    	; 0x3122 <u8g_draw_hline>
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
}
    320c:	e6 e0       	ldi	r30, 0x06	; 6
    320e:	c1 c1       	rjmp	.+898    	; 0x3592 <__epilogue_restores__+0x18>

00003210 <u8g_DrawVLine>:

void u8g_DrawVLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	ec 01       	movw	r28, r24
    321e:	16 2f       	mov	r17, r22
    3220:	f4 2e       	mov	r15, r20
    3222:	e2 2e       	mov	r14, r18
  if ( u8g_IsBBXIntersection(u8g, x, y, 1, w) == 0 )
    3224:	02 2f       	mov	r16, r18
    3226:	21 e0       	ldi	r18, 0x01	; 1
    3228:	39 d0       	rcall	.+114    	; 0x329c <u8g_IsBBXIntersection>
    322a:	88 23       	and	r24, r24
    322c:	29 f0       	breq	.+10     	; 0x3238 <u8g_DrawVLine+0x28>
    322e:	2e 2d       	mov	r18, r14
    return;
  u8g_draw_vline(u8g, x, y, w);
    3230:	4f 2d       	mov	r20, r15
    3232:	61 2f       	mov	r22, r17
    3234:	ce 01       	movw	r24, r28
    3236:	a5 df       	rcall	.-182    	; 0x3182 <u8g_draw_vline>
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
}
    323c:	e6 e0       	ldi	r30, 0x06	; 6
    323e:	a9 c1       	rjmp	.+850    	; 0x3592 <__epilogue_restores__+0x18>

00003240 <u8g_draw_box>:
  y--;
  u8g_draw_hline(u8g, xtmp, y, w);
}

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    3240:	ef 92       	push	r14
    3242:	ff 92       	push	r15
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	7c 01       	movw	r14, r24
    324e:	d6 2f       	mov	r29, r22
    3250:	12 2f       	mov	r17, r18
    3252:	c4 2f       	mov	r28, r20
    3254:	04 0f       	add	r16, r20
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
    3256:	21 2f       	mov	r18, r17
    3258:	4c 2f       	mov	r20, r28
    325a:	6d 2f       	mov	r22, r29
    325c:	c7 01       	movw	r24, r14
    325e:	61 df       	rcall	.-318    	; 0x3122 <u8g_draw_hline>
    3260:	cf 5f       	subi	r28, 0xFF	; 255
    y++;    
    3262:	0c 13       	cpse	r16, r28
    h--;
  } while( h != 0 );
    3264:	f8 cf       	rjmp	.-16     	; 0x3256 <u8g_draw_box+0x16>
    3266:	cd b7       	in	r28, 0x3d	; 61
}
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	e6 e0       	ldi	r30, 0x06	; 6
    326c:	92 c1       	rjmp	.+804    	; 0x3592 <__epilogue_restores__+0x18>

0000326e <u8g_DrawBox>:

/* restrictions: h > 0 */
void u8g_DrawBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    326e:	a0 e0       	ldi	r26, 0x00	; 0
    3270:	b0 e0       	ldi	r27, 0x00	; 0
    3272:	ec e3       	ldi	r30, 0x3C	; 60
    3274:	f9 e1       	ldi	r31, 0x19	; 25
    3276:	70 c1       	rjmp	.+736    	; 0x3558 <__prologue_saves__+0x16>
    3278:	ec 01       	movw	r28, r24
    327a:	16 2f       	mov	r17, r22
    327c:	f4 2e       	mov	r15, r20
    327e:	e2 2e       	mov	r14, r18
    3280:	d0 2e       	mov	r13, r16
    3282:	0c d0       	rcall	.+24     	; 0x329c <u8g_IsBBXIntersection>
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    3284:	88 23       	and	r24, r24
    3286:	29 f0       	breq	.+10     	; 0x3292 <u8g_DrawBox+0x24>
    3288:	2e 2d       	mov	r18, r14
    328a:	4f 2d       	mov	r20, r15
    return;
  u8g_draw_box(u8g, x, y, w, h);
    328c:	61 2f       	mov	r22, r17
    328e:	ce 01       	movw	r24, r28
    3290:	d7 df       	rcall	.-82     	; 0x3240 <u8g_draw_box>
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	e7 e0       	ldi	r30, 0x07	; 7
}
    3298:	7b c1       	rjmp	.+758    	; 0x3590 <__epilogue_restores__+0x16>

0000329a <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    329a:	08 95       	ret

0000329c <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    329c:	0f 93       	push	r16
    329e:	fc 01       	movw	r30, r24
    32a0:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    32a2:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    32a4:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    32a6:	96 a9       	ldd	r25, Z+54	; 0x36
    32a8:	94 17       	cp	r25, r20
    32aa:	18 f0       	brcs	.+6      	; 0x32b2 <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    32ac:	08 17       	cp	r16, r24
    32ae:	28 f4       	brcc	.+10     	; 0x32ba <u8g_IsBBXIntersection+0x1e>
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    32b2:	08 17       	cp	r16, r24
    32b4:	50 f0       	brcs	.+20     	; 0x32ca <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    32b6:	04 17       	cp	r16, r20
    32b8:	40 f4       	brcc	.+16     	; 0x32ca <u8g_IsBBXIntersection+0x2e>
    32ba:	21 50       	subi	r18, 0x01	; 1
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    32bc:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    32be:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    32c0:	95 a9       	ldd	r25, Z+53	; 0x35
    32c2:	96 17       	cp	r25, r22
    32c4:	20 f4       	brcc	.+8      	; 0x32ce <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    32c6:	28 17       	cp	r18, r24
    32c8:	20 f4       	brcc	.+8      	; 0x32d2 <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	07 c0       	rjmp	.+14     	; 0x32dc <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    32ce:	28 17       	cp	r18, r24
    32d0:	20 f4       	brcc	.+8      	; 0x32da <u8g_IsBBXIntersection+0x3e>
  }
  else
  {
    if ( v1 >= a0 )
    {
      if ( v0 > v1 )
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	26 17       	cp	r18, r22
    32d6:	10 f0       	brcs	.+4      	; 0x32dc <u8g_IsBBXIntersection+0x40>
    32d8:	f8 cf       	rjmp	.-16     	; 0x32ca <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    32dc:	0f 91       	pop	r16
    32de:	08 95       	ret

000032e0 <u8g_InitCom>:

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
    32e0:	db 01       	movw	r26, r22
    32e2:	14 96       	adiw	r26, 0x04	; 4
    32e4:	ed 91       	ld	r30, X+
    32e6:	fc 91       	ld	r31, X
    32e8:	15 97       	sbiw	r26, 0x05	; 5
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	61 e0       	ldi	r22, 0x01	; 1
    32f0:	09 95       	icall
}
    32f2:	08 95       	ret

000032f4 <u8g_SetChipSelect>:
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
    32f4:	db 01       	movw	r26, r22
    32f6:	14 96       	adiw	r26, 0x04	; 4
    32f8:	ed 91       	ld	r30, X+
    32fa:	fc 91       	ld	r31, X
    32fc:	15 97       	sbiw	r26, 0x05	; 5
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	63 e0       	ldi	r22, 0x03	; 3
    3304:	09 95       	icall
    3306:	08 95       	ret

00003308 <u8g_SetResetLow>:
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
    3308:	db 01       	movw	r26, r22
    330a:	14 96       	adiw	r26, 0x04	; 4
    330c:	ed 91       	ld	r30, X+
    330e:	fc 91       	ld	r31, X
    3310:	15 97       	sbiw	r26, 0x05	; 5
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	64 e0       	ldi	r22, 0x04	; 4
    331a:	09 95       	icall
    331c:	08 95       	ret

0000331e <u8g_SetResetHigh>:
}

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
    331e:	db 01       	movw	r26, r22
    3320:	14 96       	adiw	r26, 0x04	; 4
    3322:	ed 91       	ld	r30, X+
    3324:	fc 91       	ld	r31, X
    3326:	15 97       	sbiw	r26, 0x05	; 5
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	41 e0       	ldi	r20, 0x01	; 1
    332e:	64 e0       	ldi	r22, 0x04	; 4
    3330:	09 95       	icall
    3332:	08 95       	ret

00003334 <u8g_SetAddress>:
}


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
    3334:	db 01       	movw	r26, r22
    3336:	14 96       	adiw	r26, 0x04	; 4
    3338:	ed 91       	ld	r30, X+
    333a:	fc 91       	ld	r31, X
    333c:	15 97       	sbiw	r26, 0x05	; 5
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	62 e0       	ldi	r22, 0x02	; 2
    3344:	09 95       	icall
    3346:	08 95       	ret

00003348 <u8g_WriteByte>:
}

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
    3348:	db 01       	movw	r26, r22
    334a:	14 96       	adiw	r26, 0x04	; 4
    334c:	ed 91       	ld	r30, X+
    334e:	fc 91       	ld	r31, X
    3350:	15 97       	sbiw	r26, 0x05	; 5
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	65 e0       	ldi	r22, 0x05	; 5
    3358:	09 95       	icall
}
    335a:	08 95       	ret

0000335c <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
    335c:	db 01       	movw	r26, r22
    335e:	14 96       	adiw	r26, 0x04	; 4
    3360:	ed 91       	ld	r30, X+
    3362:	fc 91       	ld	r31, X
    3364:	15 97       	sbiw	r26, 0x05	; 5
    3366:	66 e0       	ldi	r22, 0x06	; 6
    3368:	09 95       	icall
}
    336a:	08 95       	ret

0000336c <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    336c:	a0 e0       	ldi	r26, 0x00	; 0
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	eb eb       	ldi	r30, 0xBB	; 187
    3372:	f9 e1       	ldi	r31, 0x19	; 25
    3374:	f0 c0       	rjmp	.+480    	; 0x3556 <__prologue_saves__+0x14>
    3376:	8c 01       	movw	r16, r24
    3378:	7b 01       	movw	r14, r22
    337a:	6a 01       	movw	r12, r20
    337c:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t is_escape = 0;
    337e:	f6 01       	movw	r30, r12
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    3380:	c4 91       	lpm	r28, Z
    3382:	81 11       	cpse	r24, r1
    if ( is_escape == 0 )
    3384:	09 c0       	rjmp	.+18     	; 0x3398 <u8g_WriteEscSeqP+0x2c>
    3386:	cf 3f       	cpi	r28, 0xFF	; 255
    {
      if ( value != 255 )
    3388:	b1 f1       	breq	.+108    	; 0x33f6 <u8g_WriteEscSeqP+0x8a>
    338a:	4c 2f       	mov	r20, r28
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    338c:	b7 01       	movw	r22, r14
    338e:	c8 01       	movw	r24, r16
    3390:	db df       	rcall	.-74     	; 0x3348 <u8g_WriteByte>
    3392:	81 11       	cpse	r24, r1
    3394:	29 c0       	rjmp	.+82     	; 0x33e8 <u8g_WriteEscSeqP+0x7c>
    3396:	34 c0       	rjmp	.+104    	; 0x3400 <u8g_WriteEscSeqP+0x94>
    3398:	cf 3f       	cpi	r28, 0xFF	; 255
    339a:	11 f4       	brne	.+4      	; 0x33a0 <u8g_WriteEscSeqP+0x34>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    339c:	4f ef       	ldi	r20, 0xFF	; 255
    339e:	f6 cf       	rjmp	.-20     	; 0x338c <u8g_WriteEscSeqP+0x20>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    33a0:	ce 3f       	cpi	r28, 0xFE	; 254
    33a2:	81 f1       	breq	.+96     	; 0x3404 <u8g_WriteEscSeqP+0x98>
          return 0;
      }
      else if ( value == 254 )
    33a4:	c0 3f       	cpi	r28, 0xF0	; 240
    33a6:	00 f5       	brcc	.+64     	; 0x33e8 <u8g_WriteEscSeqP+0x7c>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    33a8:	c0 3e       	cpi	r28, 0xE0	; 224
    33aa:	30 f0       	brcs	.+12     	; 0x33b8 <u8g_WriteEscSeqP+0x4c>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    33ac:	4c 2f       	mov	r20, r28
    33ae:	4f 70       	andi	r20, 0x0F	; 15
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    33b0:	b7 01       	movw	r22, r14
    33b2:	c8 01       	movw	r24, r16
    33b4:	bf df       	rcall	.-130    	; 0x3334 <u8g_SetAddress>
    33b6:	18 c0       	rjmp	.+48     	; 0x33e8 <u8g_WriteEscSeqP+0x7c>
    33b8:	c0 3d       	cpi	r28, 0xD0	; 208
    33ba:	30 f0       	brcs	.+12     	; 0x33c8 <u8g_WriteEscSeqP+0x5c>
    33bc:	4c 2f       	mov	r20, r28
      }
      else if ( value >= 0xd0 )
    33be:	4f 70       	andi	r20, 0x0F	; 15
    33c0:	b7 01       	movw	r22, r14
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    33c2:	c8 01       	movw	r24, r16
    33c4:	97 df       	rcall	.-210    	; 0x32f4 <u8g_SetChipSelect>
    33c6:	10 c0       	rjmp	.+32     	; 0x33e8 <u8g_WriteEscSeqP+0x7c>
    33c8:	c0 3c       	cpi	r28, 0xC0	; 192
    33ca:	80 f0       	brcs	.+32     	; 0x33ec <u8g_WriteEscSeqP+0x80>
    33cc:	b7 01       	movw	r22, r14
    33ce:	c8 01       	movw	r24, r16
      }
      else if ( value >= 0xc0 )
    33d0:	9b df       	rcall	.-202    	; 0x3308 <u8g_SetResetLow>
    33d2:	c2 95       	swap	r28
      {
        u8g_SetResetLow(u8g, dev);
    33d4:	c0 7f       	andi	r28, 0xF0	; 240
    33d6:	ce 5f       	subi	r28, 0xFE	; 254
    33d8:	d0 e0       	ldi	r29, 0x00	; 0
    33da:	ce 01       	movw	r24, r28
        value &= 0x0f;
        value <<= 4;
    33dc:	71 d9       	rcall	.-3358   	; 0x26c0 <u8g_Delay>
    33de:	b7 01       	movw	r22, r14
        value+=2;
    33e0:	c8 01       	movw	r24, r16
        u8g_Delay(value);
    33e2:	9d df       	rcall	.-198    	; 0x331e <u8g_SetResetHigh>
    33e4:	ce 01       	movw	r24, r28
    33e6:	6c d9       	rcall	.-3368   	; 0x26c0 <u8g_Delay>
    33e8:	80 e0       	ldi	r24, 0x00	; 0
        u8g_SetResetHigh(u8g, dev);
    33ea:	06 c0       	rjmp	.+12     	; 0x33f8 <u8g_WriteEscSeqP+0x8c>
    33ec:	c7 fd       	sbrc	r28, 7
    33ee:	fc cf       	rjmp	.-8      	; 0x33e8 <u8g_WriteEscSeqP+0x7c>
    33f0:	8c 2f       	mov	r24, r28
        u8g_Delay(value);
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	f8 cf       	rjmp	.-16     	; 0x33e6 <u8g_WriteEscSeqP+0x7a>
    33f6:	81 e0       	ldi	r24, 0x01	; 1
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    33f8:	ff ef       	ldi	r31, 0xFF	; 255
    33fa:	cf 1a       	sub	r12, r31
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    33fc:	df 0a       	sbc	r13, r31
    33fe:	bf cf       	rjmp	.-130    	; 0x337e <u8g_WriteEscSeqP+0x12>
      {
        u8g_Delay(value);
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	01 c0       	rjmp	.+2      	; 0x3406 <u8g_WriteEscSeqP+0x9a>
    3404:	81 e0       	ldi	r24, 0x01	; 1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    3406:	cd b7       	in	r28, 0x3d	; 61
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	e8 e0       	ldi	r30, 0x08	; 8
    340c:	c0 c0       	rjmp	.+384    	; 0x358e <__epilogue_restores__+0x14>

0000340e <u8g_atmega_st7920_hw_spi_shift_out.isra.0>:

static uint8_t u8g_atmega_st7920_hw_spi_shift_out(u8g_t *u8g, uint8_t val) U8G_NOINLINE;
static uint8_t u8g_atmega_st7920_hw_spi_shift_out(u8g_t *u8g, uint8_t val)
{
  /* send data */
  SPDR = val;
    340e:	8e bd       	out	0x2e, r24	; 46
  /* wait for transmission */
  while (!(SPSR & (1<<SPIF))) 
    3410:	0d b4       	in	r0, 0x2d	; 45
    3412:	07 fe       	sbrs	r0, 7
    3414:	fd cf       	rjmp	.-6      	; 0x3410 <u8g_atmega_st7920_hw_spi_shift_out.isra.0+0x2>
    ;
  /* clear the SPIF flag by reading SPDR */
  return  SPDR;
    3416:	8e b5       	in	r24, 0x2e	; 46
}
    3418:	08 95       	ret

0000341a <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1>:


static void u8g_com_atmega_st7920_write_byte_hw_spi(u8g_t *u8g, uint8_t rs, uint8_t val) U8G_NOINLINE;
static void u8g_com_atmega_st7920_write_byte_hw_spi(u8g_t *u8g, uint8_t rs, uint8_t val)
    341a:	cf 93       	push	r28
    341c:	c6 2f       	mov	r28, r22
{
  uint8_t i;

  if ( rs == 0 )
    341e:	81 11       	cpse	r24, r1
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1+0xc>
  {
    /* command */
    u8g_atmega_st7920_hw_spi_shift_out(u8g, 0x0f8);
    3422:	88 ef       	ldi	r24, 0xF8	; 248
    3424:	03 c0       	rjmp	.+6      	; 0x342c <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1+0x12>
  }
  else if ( rs == 1 )
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	11 f4       	brne	.+4      	; 0x342e <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1+0x14>
  {
    /* data */
    u8g_atmega_st7920_hw_spi_shift_out(u8g, 0x0fa);
    342a:	8a ef       	ldi	r24, 0xFA	; 250
    342c:	f0 df       	rcall	.-32     	; 0x340e <u8g_atmega_st7920_hw_spi_shift_out.isra.0>
    342e:	8c 2f       	mov	r24, r28
  }
  
  u8g_atmega_st7920_hw_spi_shift_out(u8g, val & 0x0f0);
    3430:	80 7f       	andi	r24, 0xF0	; 240
    3432:	ed df       	rcall	.-38     	; 0x340e <u8g_atmega_st7920_hw_spi_shift_out.isra.0>
    3434:	8c 2f       	mov	r24, r28
    3436:	82 95       	swap	r24
  u8g_atmega_st7920_hw_spi_shift_out(u8g, val << 4);
    3438:	80 7f       	andi	r24, 0xF0	; 240
    343a:	e9 df       	rcall	.-46     	; 0x340e <u8g_atmega_st7920_hw_spi_shift_out.isra.0>
    343c:	4b d9       	rcall	.-3434   	; 0x26d4 <u8g_10MicroDelay>
    343e:	4a d9       	rcall	.-3436   	; 0x26d4 <u8g_10MicroDelay>
    3440:	49 d9       	rcall	.-3438   	; 0x26d4 <u8g_10MicroDelay>

  for( i = 0; i < 4; i++ )
    u8g_10MicroDelay();
    3442:	48 d9       	rcall	.-3440   	; 0x26d4 <u8g_10MicroDelay>
    3444:	cf 91       	pop	r28
    3446:	08 95       	ret

00003448 <u8g_com_atmega_st7920_hw_spi_fn>:
}


uint8_t u8g_com_atmega_st7920_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    3448:	a1 e0       	ldi	r26, 0x01	; 1
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e9 e2       	ldi	r30, 0x29	; 41
    344e:	fa e1       	ldi	r31, 0x1A	; 26
    3450:	84 c0       	rjmp	.+264    	; 0x355a <__prologue_saves__+0x18>
    3452:	7c 01       	movw	r14, r24
    3454:	89 01       	movw	r16, r18
    3456:	86 2f       	mov	r24, r22
  switch(msg)
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	fc 01       	movw	r30, r24
    345c:	31 97       	sbiw	r30, 0x01	; 1
    345e:	e7 30       	cpi	r30, 0x07	; 7
    3460:	f1 05       	cpc	r31, r1
    3462:	08 f0       	brcs	.+2      	; 0x3466 <u8g_com_atmega_st7920_hw_spi_fn+0x1e>
    3464:	47 c0       	rjmp	.+142    	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
    3466:	ec 5c       	subi	r30, 0xCC	; 204
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	65 c0       	rjmp	.+202    	; 0x3536 <__tablejump2__>
    346c:	62 e0       	ldi	r22, 0x02	; 2
    346e:	c7 01       	movw	r24, r14
  {
    case U8G_COM_MSG_INIT:
      u8g_SetPIOutput(u8g, U8G_PI_CS);
    3470:	16 d9       	rcall	.-3540   	; 0x269e <u8g_SetPIOutput>
    3472:	8f b7       	in	r24, 0x3f	; 63
    3474:	80 93 35 02 	sts	0x0235, r24
      //u8g_SetPIOutput(u8g, U8G_PI_A0);
      
      U8G_ATOMIC_START();
    3478:	f8 94       	cli
    347a:	23 9a       	sbi	0x04, 3	; 4
    347c:	25 9a       	sbi	0x04, 5	; 4
    347e:	22 9a       	sbi	0x04, 2	; 4
      
      DDRB |= _BV(3);          /* D0, MOSI */
    3480:	2b 98       	cbi	0x05, 3	; 5
      DDRB |= _BV(5);          /* SCK */
    3482:	2d 98       	cbi	0x05, 5	; 5
      DDRB |= _BV(2);		/* slave select */
    3484:	80 91 35 02 	lds	r24, 0x0235
    
      PORTB &= ~_BV(3);        /* D0, MOSI = 0 */
      PORTB &= ~_BV(5);        /* SCK = 0 */
    3488:	8f bf       	out	0x3f, r24	; 63
      U8G_ATOMIC_END();
    348a:	41 e0       	ldi	r20, 0x01	; 1
    348c:	62 e0       	ldi	r22, 0x02	; 2
    348e:	c7 01       	movw	r24, r14
      
      u8g_SetPILevel(u8g, U8G_PI_CS, 1);
    3490:	0e d9       	rcall	.-3556   	; 0x26ae <u8g_SetPILevel>
    3492:	1c bc       	out	0x2c, r1	; 44
    3494:	8c e5       	ldi	r24, 0x5C	; 92
    3496:	8c bd       	out	0x2c, r24	; 44
    3498:	f7 01       	movw	r30, r14
            0	0		fclk/4
            0	1		fclk/16 
            1	0		fclk/64  
            1	1		fclk/128
      */
      SPCR = 0;
    349a:	16 a2       	std	Z+38, r1	; 0x26
      
      /* maybe set CPOL and CPHA to 1 */
      /* 20 Dez 2012: did set CPOL and CPHA to 1 in Arduino variant! */
      /* 24 Jan 2014: implemented, see also issue 221 */
      SPCR =  (1<<SPE) | (1<<MSTR)|(0<<SPR1)|(0<<SPR0)|(1<<CPOL)|(1<<CPHA);
    349c:	2b c0       	rjmp	.+86     	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
    349e:	60 e0       	ldi	r22, 0x00	; 0
#ifdef U8G_HW_SPI_2X
      SPSR = (1 << SPI2X);  /* double speed, issue 89 */
#endif
      u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: command mode */
    34a0:	06 c0       	rjmp	.+12     	; 0x34ae <u8g_com_atmega_st7920_hw_spi_fn+0x66>
    34a2:	f7 01       	movw	r30, r14
      break;
    34a4:	46 a3       	std	Z+38, r20	; 0x26
    
    case U8G_COM_MSG_STOP:
      break;

    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    34a6:	26 c0       	rjmp	.+76     	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
    34a8:	41 11       	cpse	r20, r1
      break;
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    34aa:	04 c0       	rjmp	.+8      	; 0x34b4 <u8g_com_atmega_st7920_hw_spi_fn+0x6c>
    34ac:	62 e0       	ldi	r22, 0x02	; 2
      break;
    34ae:	c7 01       	movw	r24, r14

    case U8G_COM_MSG_CHIP_SELECT:      
      if ( arg_val == 0 )
    34b0:	fe d8       	rcall	.-3588   	; 0x26ae <u8g_SetPILevel>
    34b2:	20 c0       	rjmp	.+64     	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
      {
        /* disable, note: the st7920 has an active high chip select */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0);
    34b4:	41 e0       	ldi	r20, 0x01	; 1
    34b6:	fa cf       	rjmp	.-12     	; 0x34ac <u8g_com_atmega_st7920_hw_spi_fn+0x64>
    34b8:	64 2f       	mov	r22, r20
    34ba:	f7 01       	movw	r30, r14
    34bc:	86 a1       	ldd	r24, Z+38	; 0x26
      }
      else
      {
        /* u8g_SetPILevel(u8g, U8G_PI_SCK, 0 ); */
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1); /* CS = 1 (high active) */
    34be:	ad df       	rcall	.-166    	; 0x341a <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1>
    34c0:	19 c0       	rjmp	.+50     	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
      }
      break;
      

    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_st7920_write_byte_hw_spi(u8g, u8g->pin_list[U8G_PI_A0_STATE], arg_val);
    34c2:	44 23       	and	r20, r20
    34c4:	b9 f0       	breq	.+46     	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
    34c6:	f8 01       	movw	r30, r16
    34c8:	61 91       	ld	r22, Z+
    34ca:	8f 01       	movw	r16, r30
      //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
      break;
    34cc:	f7 01       	movw	r30, r14
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    34ce:	86 a1       	ldd	r24, Z+38	; 0x26
    34d0:	49 83       	std	Y+1, r20	; 0x01
        {
          u8g_com_atmega_st7920_write_byte_hw_spi(u8g, u8g->pin_list[U8G_PI_A0_STATE], *ptr++);
    34d2:	a3 df       	rcall	.-186    	; 0x341a <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1>
    34d4:	49 81       	ldd	r20, Y+1	; 0x01
    34d6:	41 50       	subi	r20, 0x01	; 1
    34d8:	f4 cf       	rjmp	.-24     	; 0x34c2 <u8g_com_atmega_st7920_hw_spi_fn+0x7a>
    34da:	44 23       	and	r20, r20
    34dc:	59 f0       	breq	.+22     	; 0x34f4 <u8g_com_atmega_st7920_hw_spi_fn+0xac>
    34de:	f8 01       	movw	r30, r16
    34e0:	64 91       	lpm	r22, Z
	  //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
          arg_val--;
    34e2:	f7 01       	movw	r30, r14
    34e4:	86 a1       	ldd	r24, Z+38	; 0x26
    34e6:	49 83       	std	Y+1, r20	; 0x01
      break;

      case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    34e8:	98 df       	rcall	.-208    	; 0x341a <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1>
    34ea:	0f 5f       	subi	r16, 0xFF	; 255
        {
          u8g_com_atmega_st7920_write_byte_hw_spi(u8g, u8g->pin_list[U8G_PI_A0_STATE], u8g_pgm_read(ptr));
    34ec:	1f 4f       	sbci	r17, 0xFF	; 255
    34ee:	49 81       	ldd	r20, Y+1	; 0x01
    34f0:	41 50       	subi	r20, 0x01	; 1
    34f2:	f3 cf       	rjmp	.-26     	; 0x34da <u8g_com_atmega_st7920_hw_spi_fn+0x92>
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	21 96       	adiw	r28, 0x01	; 1
    34f8:	e6 e0       	ldi	r30, 0x06	; 6
	  //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
          ptr++;
    34fa:	4b c0       	rjmp	.+150    	; 0x3592 <__epilogue_restores__+0x18>

000034fc <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
    34fc:	fc 01       	movw	r30, r24
  p->page_y0 = 0;
    34fe:	12 82       	std	Z+2, r1	; 0x02
  p->page_y1 = p->page_height;
  p->page_y1--;
    3500:	80 81       	ld	r24, Z
    3502:	81 50       	subi	r24, 0x01	; 1
    3504:	83 83       	std	Z+3, r24	; 0x03
  p->page = 0;
    3506:	14 82       	std	Z+4, r1	; 0x04
    3508:	08 95       	ret

0000350a <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    350a:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    350c:	80 81       	ld	r24, Z
    350e:	92 81       	ldd	r25, Z+2	; 0x02
    3510:	98 0f       	add	r25, r24
    3512:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    3514:	21 81       	ldd	r18, Z+1	; 0x01
    3516:	92 17       	cp	r25, r18
    3518:	60 f4       	brcc	.+24     	; 0x3532 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    351a:	94 81       	ldd	r25, Z+4	; 0x04
    351c:	9f 5f       	subi	r25, 0xFF	; 255
    351e:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    3520:	93 81       	ldd	r25, Z+3	; 0x03
  y1 += p->page_height;
    3522:	89 0f       	add	r24, r25
  if ( y1 >= p->total_height )
    3524:	82 17       	cp	r24, r18
    3526:	10 f0       	brcs	.+4      	; 0x352c <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    3528:	8f ef       	ldi	r24, 0xFF	; 255
    352a:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    352c:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    3532:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    3534:	08 95       	ret

00003536 <__tablejump2__>:
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	05 90       	lpm	r0, Z+
    353c:	f4 91       	lpm	r31, Z
    353e:	e0 2d       	mov	r30, r0
    3540:	09 94       	ijmp

00003542 <__prologue_saves__>:
    3542:	2f 92       	push	r2
    3544:	3f 92       	push	r3
    3546:	4f 92       	push	r4
    3548:	5f 92       	push	r5
    354a:	6f 92       	push	r6
    354c:	7f 92       	push	r7
    354e:	8f 92       	push	r8
    3550:	9f 92       	push	r9
    3552:	af 92       	push	r10
    3554:	bf 92       	push	r11
    3556:	cf 92       	push	r12
    3558:	df 92       	push	r13
    355a:	ef 92       	push	r14
    355c:	ff 92       	push	r15
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	ca 1b       	sub	r28, r26
    356c:	db 0b       	sbc	r29, r27
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	09 94       	ijmp

0000357a <__epilogue_restores__>:
    357a:	2a 88       	ldd	r2, Y+18	; 0x12
    357c:	39 88       	ldd	r3, Y+17	; 0x11
    357e:	48 88       	ldd	r4, Y+16	; 0x10
    3580:	5f 84       	ldd	r5, Y+15	; 0x0f
    3582:	6e 84       	ldd	r6, Y+14	; 0x0e
    3584:	7d 84       	ldd	r7, Y+13	; 0x0d
    3586:	8c 84       	ldd	r8, Y+12	; 0x0c
    3588:	9b 84       	ldd	r9, Y+11	; 0x0b
    358a:	aa 84       	ldd	r10, Y+10	; 0x0a
    358c:	b9 84       	ldd	r11, Y+9	; 0x09
    358e:	c8 84       	ldd	r12, Y+8	; 0x08
    3590:	df 80       	ldd	r13, Y+7	; 0x07
    3592:	ee 80       	ldd	r14, Y+6	; 0x06
    3594:	fd 80       	ldd	r15, Y+5	; 0x05
    3596:	0c 81       	ldd	r16, Y+4	; 0x04
    3598:	1b 81       	ldd	r17, Y+3	; 0x03
    359a:	aa 81       	ldd	r26, Y+2	; 0x02
    359c:	b9 81       	ldd	r27, Y+1	; 0x01
    359e:	ce 0f       	add	r28, r30
    35a0:	d1 1d       	adc	r29, r1
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	ed 01       	movw	r28, r26
    35ae:	08 95       	ret

000035b0 <memcpy_P>:
    35b0:	fb 01       	movw	r30, r22
    35b2:	dc 01       	movw	r26, r24
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <memcpy_P+0xa>
    35b6:	05 90       	lpm	r0, Z+
    35b8:	0d 92       	st	X+, r0
    35ba:	41 50       	subi	r20, 0x01	; 1
    35bc:	50 40       	sbci	r21, 0x00	; 0
    35be:	d8 f7       	brcc	.-10     	; 0x35b6 <memcpy_P+0x6>
    35c0:	08 95       	ret

000035c2 <_exit>:
    35c2:	f8 94       	cli

000035c4 <__stop_program>:
    35c4:	ff cf       	rjmp	.-2      	; 0x35c4 <__stop_program>
